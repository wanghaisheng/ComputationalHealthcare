// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvisit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pvisit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comphealth {

namespace {

const ::google::protobuf::Descriptor* KVI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVI_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVS_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVF_reflection_ = NULL;
const ::google::protobuf::Descriptor* PR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PR_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Visit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Patient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Patient_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatientList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatientList_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pvisit_2eproto() {
  protobuf_AddDesc_pvisit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pvisit.proto");
  GOOGLE_CHECK(file != NULL);
  KVI_descriptor_ = file->message_type(0);
  static const int KVI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVI, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVI, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVI, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVI, f_),
  };
  KVI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVI_descriptor_,
      KVI::default_instance_,
      KVI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVI));
  KVS_descriptor_ = file->message_type(1);
  static const int KVS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVS, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVS, v_),
  };
  KVS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVS_descriptor_,
      KVS::default_instance_,
      KVS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVS));
  KVF_descriptor_ = file->message_type(2);
  static const int KVF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVF, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVF, v_),
  };
  KVF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVF_descriptor_,
      KVF::default_instance_,
      KVF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVF));
  PR_descriptor_ = file->message_type(3);
  static const int PR_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PR, pcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PR, pday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PR, ctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PR, occur_),
  };
  PR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PR_descriptor_,
      PR::default_instance_,
      PR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PR));
  VisitEdge_descriptor_ = file->message_type(4);
  static const int VisitEdge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitEdge, initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitEdge, sub_),
  };
  VisitEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisitEdge_descriptor_,
      VisitEdge::default_instance_,
      VisitEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisitEdge));
  Visit_descriptor_ = file->message_type(5);
  static const int Visit_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, patient_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, facility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, disposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, los_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, death_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, payer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, primary_diagnosis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, primary_procedure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, drg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, dxs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, exs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, poas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, prs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, quarter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, dnr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, dstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, dint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, dfloat_),
  };
  Visit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Visit_descriptor_,
      Visit::default_instance_,
      Visit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Visit));
  Patient_descriptor_ = file->message_type(6);
  static const int Patient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patient, patient_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patient, visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patient, raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patient, linked_),
  };
  Patient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Patient_descriptor_,
      Patient::default_instance_,
      Patient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Patient));
  PatientList_descriptor_ = file->message_type(7);
  static const int PatientList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatientList, patients_),
  };
  PatientList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatientList_descriptor_,
      PatientList::default_instance_,
      PatientList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatientList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatientList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatientList));
  VisitList_descriptor_ = file->message_type(8);
  static const int VisitList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitList, visits_),
  };
  VisitList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisitList_descriptor_,
      VisitList::default_instance_,
      VisitList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisitList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pvisit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVI_descriptor_, &KVI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVS_descriptor_, &KVS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVF_descriptor_, &KVF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PR_descriptor_, &PR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisitEdge_descriptor_, &VisitEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Visit_descriptor_, &Visit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Patient_descriptor_, &Patient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatientList_descriptor_, &PatientList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisitList_descriptor_, &VisitList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pvisit_2eproto() {
  delete KVI::default_instance_;
  delete KVI_reflection_;
  delete KVS::default_instance_;
  delete KVS_reflection_;
  delete KVF::default_instance_;
  delete KVF_reflection_;
  delete PR::default_instance_;
  delete PR_reflection_;
  delete VisitEdge::default_instance_;
  delete VisitEdge_reflection_;
  delete Visit::default_instance_;
  delete Visit_reflection_;
  delete Patient::default_instance_;
  delete Patient_reflection_;
  delete PatientList::default_instance_;
  delete PatientList_reflection_;
  delete VisitList::default_instance_;
  delete VisitList_reflection_;
}

void protobuf_AddDesc_pvisit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comphealth::protobuf_AddDesc_penums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pvisit.proto\022\ncomphealth\032\014penums.proto"
    "\"1\n\003KVI\022\t\n\001k\030\001 \002(\t\022\t\n\001v\030\002 \002(\005\022\t\n\001s\030\003 \001(\t"
    "\022\t\n\001f\030\004 \001(\002\"\033\n\003KVS\022\t\n\001k\030\001 \002(\t\022\t\n\001v\030\002 \002(\t"
    "\"\033\n\003KVF\022\t\n\001k\030\001 \002(\t\022\t\n\001v\030\002 \002(\002\"U\n\002PR\022\r\n\005p"
    "code\030\001 \002(\t\022\014\n\004pday\030\002 \001(\005\022 \n\005ctype\030\003 \002(\0162"
    "\021.comphealth.CTYPE\022\020\n\005occur\030\004 \001(\005:\0011\"O\n\t"
    "VisitEdge\022\"\n\007initial\030\001 \002(\0132\021.comphealth."
    "Visit\022\036\n\003sub\030\002 \002(\0132\021.comphealth.Visit\"\371\005"
    "\n\005Visit\022\013\n\003key\030\001 \002(\t\022\023\n\013patient_key\030\002 \002("
    "\t\022\017\n\007dataset\030\003 \002(\t\022\r\n\005state\030\004 \002(\t\022\020\n\010fac"
    "ility\030\005 \002(\t\022 \n\005vtype\030\006 \002(\0162\021.comphealth."
    "ETYPE\022\017\n\003age\030\007 \002(\005:\002-1\022\034\n\003sex\030\010 \002(\0162\017.co"
    "mphealth.SEX\022\036\n\004race\030\t \002(\0162\020.comphealth."
    "RACE\022\"\n\006source\030\n \002(\0162\022.comphealth.SOURCE"
    "\022,\n\013disposition\030\013 \002(\0162\027.comphealth.DISPO"
    "SITION\022\013\n\003los\030\014 \002(\005\022 \n\005death\030\r \002(\0162\021.com"
    "phealth.DEATH\022 \n\005payer\030\016 \002(\0162\021.comphealt"
    "h.PAYER\022\031\n\021primary_diagnosis\030\017 \002(\t\022)\n\021pr"
    "imary_procedure\030\020 \001(\0132\016.comphealth.PR\022\013\n"
    "\003drg\030\022 \002(\t\022\013\n\003dxs\030\023 \003(\t\022\013\n\003exs\030\024 \003(\t\022\014\n\004"
    "poas\030% \003(\t\022\033\n\003prs\030\025 \003(\0132\016.comphealth.PR\022"
    "\014\n\004year\030\026 \002(\005\022\013\n\003day\030\027 \002(\005\022\021\n\005month\030\030 \002("
    "\005:\002-1\022\023\n\007quarter\030\032 \002(\005:\002-1\022\035\n\003zip\030\033 \002(\0162"
    "\020.comphealth.PZIP\022\034\n\003dnr\030\034 \002(\0162\017.comphea"
    "lth.DNR\022\016\n\006charge\030\036 \002(\002\022 \n\007dstring\030\" \003(\013"
    "2\017.comphealth.KVS\022\035\n\004dint\030# \003(\0132\017.comphe"
    "alth.KVI\022\037\n\006dfloat\030$ \003(\0132\017.comphealth.KV"
    "F\"e\n\007Patient\022\023\n\013patient_key\030\001 \001(\t\022!\n\006vis"
    "its\030\002 \003(\0132\021.comphealth.Visit\022\013\n\003raw\030\003 \001("
    "\t\022\025\n\006linked\030\004 \001(\010:\005false\"4\n\013PatientList\022"
    "%\n\010patients\030\001 \003(\0132\023.comphealth.Patient\"."
    "\n\tVisitList\022!\n\006visits\030\001 \003(\0132\021.comphealth"
    ".Visit", 1286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pvisit.proto", &protobuf_RegisterTypes);
  KVI::default_instance_ = new KVI();
  KVS::default_instance_ = new KVS();
  KVF::default_instance_ = new KVF();
  PR::default_instance_ = new PR();
  VisitEdge::default_instance_ = new VisitEdge();
  Visit::default_instance_ = new Visit();
  Patient::default_instance_ = new Patient();
  PatientList::default_instance_ = new PatientList();
  VisitList::default_instance_ = new VisitList();
  KVI::default_instance_->InitAsDefaultInstance();
  KVS::default_instance_->InitAsDefaultInstance();
  KVF::default_instance_->InitAsDefaultInstance();
  PR::default_instance_->InitAsDefaultInstance();
  VisitEdge::default_instance_->InitAsDefaultInstance();
  Visit::default_instance_->InitAsDefaultInstance();
  Patient::default_instance_->InitAsDefaultInstance();
  PatientList::default_instance_->InitAsDefaultInstance();
  VisitList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pvisit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pvisit_2eproto {
  StaticDescriptorInitializer_pvisit_2eproto() {
    protobuf_AddDesc_pvisit_2eproto();
  }
} static_descriptor_initializer_pvisit_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KVI::kKFieldNumber;
const int KVI::kVFieldNumber;
const int KVI::kSFieldNumber;
const int KVI::kFFieldNumber;
#endif  // !_MSC_VER

KVI::KVI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.KVI)
}

void KVI::InitAsDefaultInstance() {
}

KVI::KVI(const KVI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.KVI)
}

void KVI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVI::~KVI() {
  // @@protoc_insertion_point(destructor:comphealth.KVI)
  SharedDtor();
}

void KVI::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void KVI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVI_descriptor_;
}

const KVI& KVI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

KVI* KVI::default_instance_ = NULL;

KVI* KVI::New() const {
  return new KVI;
}

void KVI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KVI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(v_, f_);
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.KVI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_f;
        break;
      }

      // optional float f = 4;
      case 4: {
        if (tag == 37) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
          set_has_f();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.KVI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.KVI)
  return false;
#undef DO_
}

void KVI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.KVI)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  // optional float f = 4;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->f(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.KVI)
}

::google::protobuf::uint8* KVI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.KVI)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  // optional float f = 4;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->f(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.KVI)
  return target;
}

int KVI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

    // optional float f = 4;
    if (has_f()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVI::MergeFrom(const KVI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_f()) {
      set_f(from.f());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVI::CopyFrom(const KVI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KVI::Swap(KVI* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(f_, other->f_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVI_descriptor_;
  metadata.reflection = KVI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KVS::kKFieldNumber;
const int KVS::kVFieldNumber;
#endif  // !_MSC_VER

KVS::KVS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.KVS)
}

void KVS::InitAsDefaultInstance() {
}

KVS::KVS(const KVS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.KVS)
}

void KVS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVS::~KVS() {
  // @@protoc_insertion_point(destructor:comphealth.KVS)
  SharedDtor();
}

void KVS::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (v_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete v_;
  }
  if (this != default_instance_) {
  }
}

void KVS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVS_descriptor_;
}

const KVS& KVS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

KVS* KVS::default_instance_ = NULL;

KVS* KVS::New() const {
  return new KVS;
}

void KVS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
    if (has_v()) {
      if (v_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        v_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.KVS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v;
        break;
      }

      // required string v = 2;
      case 2: {
        if (tag == 18) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->v().data(), this->v().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "v");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.KVS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.KVS)
  return false;
#undef DO_
}

void KVS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.KVS)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // required string v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "v");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.KVS)
}

::google::protobuf::uint8* KVS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.KVS)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // required string v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "v");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.KVS)
  return target;
}

int KVS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // required string v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVS::MergeFrom(const KVS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVS::CopyFrom(const KVS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KVS::Swap(KVS* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVS_descriptor_;
  metadata.reflection = KVS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KVF::kKFieldNumber;
const int KVF::kVFieldNumber;
#endif  // !_MSC_VER

KVF::KVF()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.KVF)
}

void KVF::InitAsDefaultInstance() {
}

KVF::KVF(const KVF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.KVF)
}

void KVF::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVF::~KVF() {
  // @@protoc_insertion_point(destructor:comphealth.KVF)
  SharedDtor();
}

void KVF::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (this != default_instance_) {
  }
}

void KVF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVF_descriptor_;
}

const KVF& KVF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

KVF* KVF::default_instance_ = NULL;

KVF* KVF::New() const {
  return new KVF;
}

void KVF::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.KVF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_v;
        break;
      }

      // required float v = 2;
      case 2: {
        if (tag == 21) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.KVF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.KVF)
  return false;
#undef DO_
}

void KVF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.KVF)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // required float v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.KVF)
}

::google::protobuf::uint8* KVF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.KVF)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // required float v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.KVF)
  return target;
}

int KVF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // required float v = 2;
    if (has_v()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVF::MergeFrom(const KVF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVF::CopyFrom(const KVF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KVF::Swap(KVF* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVF_descriptor_;
  metadata.reflection = KVF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PR::kPcodeFieldNumber;
const int PR::kPdayFieldNumber;
const int PR::kCtypeFieldNumber;
const int PR::kOccurFieldNumber;
#endif  // !_MSC_VER

PR::PR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PR)
}

void PR::InitAsDefaultInstance() {
}

PR::PR(const PR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PR)
}

void PR::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pday_ = 0;
  ctype_ = 90;
  occur_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PR::~PR() {
  // @@protoc_insertion_point(destructor:comphealth.PR)
  SharedDtor();
}

void PR::SharedDtor() {
  if (pcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcode_;
  }
  if (this != default_instance_) {
  }
}

void PR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PR_descriptor_;
}

const PR& PR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

PR* PR::default_instance_ = NULL;

PR* PR::New() const {
  return new PR;
}

void PR::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_pcode()) {
      if (pcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pcode_->clear();
      }
    }
    pday_ = 0;
    ctype_ = 90;
    occur_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pcode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcode().data(), this->pcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pday;
        break;
      }

      // optional int32 pday = 2;
      case 2: {
        if (tag == 16) {
         parse_pday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pday_)));
          set_has_pday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ctype;
        break;
      }

      // required .comphealth.CTYPE ctype = 3;
      case 3: {
        if (tag == 24) {
         parse_ctype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::CTYPE_IsValid(value)) {
            set_ctype(static_cast< ::comphealth::CTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_occur;
        break;
      }

      // optional int32 occur = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_occur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occur_)));
          set_has_occur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PR)
  return false;
#undef DO_
}

void PR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PR)
  // required string pcode = 1;
  if (has_pcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcode().data(), this->pcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pcode(), output);
  }

  // optional int32 pday = 2;
  if (has_pday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pday(), output);
  }

  // required .comphealth.CTYPE ctype = 3;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ctype(), output);
  }

  // optional int32 occur = 4 [default = 1];
  if (has_occur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PR)
}

::google::protobuf::uint8* PR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PR)
  // required string pcode = 1;
  if (has_pcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcode().data(), this->pcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pcode(), target);
  }

  // optional int32 pday = 2;
  if (has_pday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pday(), target);
  }

  // required .comphealth.CTYPE ctype = 3;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ctype(), target);
  }

  // optional int32 occur = 4 [default = 1];
  if (has_occur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PR)
  return target;
}

int PR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pcode = 1;
    if (has_pcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcode());
    }

    // optional int32 pday = 2;
    if (has_pday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pday());
    }

    // required .comphealth.CTYPE ctype = 3;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());
    }

    // optional int32 occur = 4 [default = 1];
    if (has_occur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occur());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PR::MergeFrom(const PR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pcode()) {
      set_pcode(from.pcode());
    }
    if (from.has_pday()) {
      set_pday(from.pday());
    }
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
    if (from.has_occur()) {
      set_occur(from.occur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PR::CopyFrom(const PR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void PR::Swap(PR* other) {
  if (other != this) {
    std::swap(pcode_, other->pcode_);
    std::swap(pday_, other->pday_);
    std::swap(ctype_, other->ctype_);
    std::swap(occur_, other->occur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PR_descriptor_;
  metadata.reflection = PR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisitEdge::kInitialFieldNumber;
const int VisitEdge::kSubFieldNumber;
#endif  // !_MSC_VER

VisitEdge::VisitEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.VisitEdge)
}

void VisitEdge::InitAsDefaultInstance() {
  initial_ = const_cast< ::comphealth::Visit*>(&::comphealth::Visit::default_instance());
  sub_ = const_cast< ::comphealth::Visit*>(&::comphealth::Visit::default_instance());
}

VisitEdge::VisitEdge(const VisitEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.VisitEdge)
}

void VisitEdge::SharedCtor() {
  _cached_size_ = 0;
  initial_ = NULL;
  sub_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisitEdge::~VisitEdge() {
  // @@protoc_insertion_point(destructor:comphealth.VisitEdge)
  SharedDtor();
}

void VisitEdge::SharedDtor() {
  if (this != default_instance_) {
    delete initial_;
    delete sub_;
  }
}

void VisitEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitEdge_descriptor_;
}

const VisitEdge& VisitEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

VisitEdge* VisitEdge::default_instance_ = NULL;

VisitEdge* VisitEdge::New() const {
  return new VisitEdge;
}

void VisitEdge::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_initial()) {
      if (initial_ != NULL) initial_->::comphealth::Visit::Clear();
    }
    if (has_sub()) {
      if (sub_ != NULL) sub_->::comphealth::Visit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisitEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.VisitEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.Visit initial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub;
        break;
      }

      // required .comphealth.Visit sub = 2;
      case 2: {
        if (tag == 18) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.VisitEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.VisitEdge)
  return false;
#undef DO_
}

void VisitEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.VisitEdge)
  // required .comphealth.Visit initial = 1;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->initial(), output);
  }

  // required .comphealth.Visit sub = 2;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.VisitEdge)
}

::google::protobuf::uint8* VisitEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.VisitEdge)
  // required .comphealth.Visit initial = 1;
  if (has_initial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->initial(), target);
  }

  // required .comphealth.Visit sub = 2;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sub(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.VisitEdge)
  return target;
}

int VisitEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.Visit initial = 1;
    if (has_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initial());
    }

    // required .comphealth.Visit sub = 2;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisitEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisitEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisitEdge::MergeFrom(const VisitEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initial()) {
      mutable_initial()->::comphealth::Visit::MergeFrom(from.initial());
    }
    if (from.has_sub()) {
      mutable_sub()->::comphealth::Visit::MergeFrom(from.sub());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisitEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitEdge::CopyFrom(const VisitEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitEdge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_initial()) {
    if (!this->initial().IsInitialized()) return false;
  }
  if (has_sub()) {
    if (!this->sub().IsInitialized()) return false;
  }
  return true;
}

void VisitEdge::Swap(VisitEdge* other) {
  if (other != this) {
    std::swap(initial_, other->initial_);
    std::swap(sub_, other->sub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisitEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitEdge_descriptor_;
  metadata.reflection = VisitEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Visit::kKeyFieldNumber;
const int Visit::kPatientKeyFieldNumber;
const int Visit::kDatasetFieldNumber;
const int Visit::kStateFieldNumber;
const int Visit::kFacilityFieldNumber;
const int Visit::kVtypeFieldNumber;
const int Visit::kAgeFieldNumber;
const int Visit::kSexFieldNumber;
const int Visit::kRaceFieldNumber;
const int Visit::kSourceFieldNumber;
const int Visit::kDispositionFieldNumber;
const int Visit::kLosFieldNumber;
const int Visit::kDeathFieldNumber;
const int Visit::kPayerFieldNumber;
const int Visit::kPrimaryDiagnosisFieldNumber;
const int Visit::kPrimaryProcedureFieldNumber;
const int Visit::kDrgFieldNumber;
const int Visit::kDxsFieldNumber;
const int Visit::kExsFieldNumber;
const int Visit::kPoasFieldNumber;
const int Visit::kPrsFieldNumber;
const int Visit::kYearFieldNumber;
const int Visit::kDayFieldNumber;
const int Visit::kMonthFieldNumber;
const int Visit::kQuarterFieldNumber;
const int Visit::kZipFieldNumber;
const int Visit::kDnrFieldNumber;
const int Visit::kChargeFieldNumber;
const int Visit::kDstringFieldNumber;
const int Visit::kDintFieldNumber;
const int Visit::kDfloatFieldNumber;
#endif  // !_MSC_VER

Visit::Visit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.Visit)
}

void Visit::InitAsDefaultInstance() {
  primary_procedure_ = const_cast< ::comphealth::PR*>(&::comphealth::PR::default_instance());
}

Visit::Visit(const Visit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.Visit)
}

void Visit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patient_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facility_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vtype_ = 0;
  age_ = -1;
  sex_ = 10;
  race_ = 51;
  source_ = 61;
  disposition_ = 71;
  los_ = 0;
  death_ = 30;
  payer_ = 41;
  primary_diagnosis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_procedure_ = NULL;
  drg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year_ = 0;
  day_ = 0;
  month_ = -1;
  quarter_ = -1;
  zip_ = 101;
  dnr_ = 80;
  charge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Visit::~Visit() {
  // @@protoc_insertion_point(destructor:comphealth.Visit)
  SharedDtor();
}

void Visit::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (patient_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patient_key_;
  }
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (facility_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete facility_;
  }
  if (primary_diagnosis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete primary_diagnosis_;
  }
  if (drg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete drg_;
  }
  if (this != default_instance_) {
    delete primary_procedure_;
  }
}

void Visit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visit_descriptor_;
}

const Visit& Visit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

Visit* Visit::default_instance_ = NULL;

Visit* Visit::New() const {
  return new Visit;
}

void Visit::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_patient_key()) {
      if (patient_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patient_key_->clear();
      }
    }
    if (has_dataset()) {
      if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataset_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
    if (has_facility()) {
      if (facility_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        facility_->clear();
      }
    }
    vtype_ = 0;
    age_ = -1;
    sex_ = 10;
  }
  if (_has_bits_[8 / 32] & 65280) {
    race_ = 51;
    source_ = 61;
    disposition_ = 71;
    los_ = 0;
    death_ = 30;
    payer_ = 41;
    if (has_primary_diagnosis()) {
      if (primary_diagnosis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        primary_diagnosis_->clear();
      }
    }
    if (has_primary_procedure()) {
      if (primary_procedure_ != NULL) primary_procedure_->::comphealth::PR::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 14745600) {
    if (has_drg()) {
      if (drg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        drg_->clear();
      }
    }
    year_ = 0;
    day_ = 0;
    month_ = -1;
  }
  if (_has_bits_[24 / 32] & 251658240) {
    quarter_ = -1;
    zip_ = 101;
    dnr_ = 80;
    charge_ = 0;
  }
  dxs_.Clear();
  exs_.Clear();
  poas_.Clear();
  prs_.Clear();
  dstring_.Clear();
  dint_.Clear();
  dfloat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Visit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.Visit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_patient_key;
        break;
      }

      // required string patient_key = 2;
      case 2: {
        if (tag == 18) {
         parse_patient_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patient_key().data(), this->patient_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patient_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dataset;
        break;
      }

      // required string dataset = 3;
      case 3: {
        if (tag == 26) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_state;
        break;
      }

      // required string state = 4;
      case 4: {
        if (tag == 34) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_facility;
        break;
      }

      // required string facility = 5;
      case 5: {
        if (tag == 42) {
         parse_facility:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facility()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->facility().data(), this->facility().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "facility");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vtype;
        break;
      }

      // required .comphealth.ETYPE vtype = 6;
      case 6: {
        if (tag == 48) {
         parse_vtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::ETYPE_IsValid(value)) {
            set_vtype(static_cast< ::comphealth::ETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_age;
        break;
      }

      // required int32 age = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // required .comphealth.SEX sex = 8;
      case 8: {
        if (tag == 64) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::SEX_IsValid(value)) {
            set_sex(static_cast< ::comphealth::SEX >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_race;
        break;
      }

      // required .comphealth.RACE race = 9;
      case 9: {
        if (tag == 72) {
         parse_race:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::RACE_IsValid(value)) {
            set_race(static_cast< ::comphealth::RACE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_source;
        break;
      }

      // required .comphealth.SOURCE source = 10;
      case 10: {
        if (tag == 80) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::SOURCE_IsValid(value)) {
            set_source(static_cast< ::comphealth::SOURCE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_disposition;
        break;
      }

      // required .comphealth.DISPOSITION disposition = 11;
      case 11: {
        if (tag == 88) {
         parse_disposition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::DISPOSITION_IsValid(value)) {
            set_disposition(static_cast< ::comphealth::DISPOSITION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_los;
        break;
      }

      // required int32 los = 12;
      case 12: {
        if (tag == 96) {
         parse_los:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &los_)));
          set_has_los();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_death;
        break;
      }

      // required .comphealth.DEATH death = 13;
      case 13: {
        if (tag == 104) {
         parse_death:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::DEATH_IsValid(value)) {
            set_death(static_cast< ::comphealth::DEATH >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_payer;
        break;
      }

      // required .comphealth.PAYER payer = 14;
      case 14: {
        if (tag == 112) {
         parse_payer:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::PAYER_IsValid(value)) {
            set_payer(static_cast< ::comphealth::PAYER >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_primary_diagnosis;
        break;
      }

      // required string primary_diagnosis = 15;
      case 15: {
        if (tag == 122) {
         parse_primary_diagnosis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_diagnosis()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->primary_diagnosis().data(), this->primary_diagnosis().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "primary_diagnosis");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_primary_procedure;
        break;
      }

      // optional .comphealth.PR primary_procedure = 16;
      case 16: {
        if (tag == 130) {
         parse_primary_procedure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primary_procedure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_drg;
        break;
      }

      // required string drg = 18;
      case 18: {
        if (tag == 146) {
         parse_drg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->drg().data(), this->drg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "drg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_dxs;
        break;
      }

      // repeated string dxs = 19;
      case 19: {
        if (tag == 154) {
         parse_dxs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dxs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dxs(this->dxs_size() - 1).data(),
            this->dxs(this->dxs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dxs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_dxs;
        if (input->ExpectTag(162)) goto parse_exs;
        break;
      }

      // repeated string exs = 20;
      case 20: {
        if (tag == 162) {
         parse_exs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exs(this->exs_size() - 1).data(),
            this->exs(this->exs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_exs;
        if (input->ExpectTag(170)) goto parse_prs;
        break;
      }

      // repeated .comphealth.PR prs = 21;
      case 21: {
        if (tag == 170) {
         parse_prs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_prs;
        if (input->ExpectTag(176)) goto parse_year;
        break;
      }

      // required int32 year = 22;
      case 22: {
        if (tag == 176) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_day;
        break;
      }

      // required int32 day = 23;
      case 23: {
        if (tag == 184) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_month;
        break;
      }

      // required int32 month = 24 [default = -1];
      case 24: {
        if (tag == 192) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_quarter;
        break;
      }

      // required int32 quarter = 26 [default = -1];
      case 26: {
        if (tag == 208) {
         parse_quarter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quarter_)));
          set_has_quarter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_zip;
        break;
      }

      // required .comphealth.PZIP zip = 27;
      case 27: {
        if (tag == 216) {
         parse_zip:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::PZIP_IsValid(value)) {
            set_zip(static_cast< ::comphealth::PZIP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_dnr;
        break;
      }

      // required .comphealth.DNR dnr = 28;
      case 28: {
        if (tag == 224) {
         parse_dnr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::DNR_IsValid(value)) {
            set_dnr(static_cast< ::comphealth::DNR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_charge;
        break;
      }

      // required float charge = 30;
      case 30: {
        if (tag == 245) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_dstring;
        break;
      }

      // repeated .comphealth.KVS dstring = 34;
      case 34: {
        if (tag == 274) {
         parse_dstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_dstring;
        if (input->ExpectTag(282)) goto parse_dint;
        break;
      }

      // repeated .comphealth.KVI dint = 35;
      case 35: {
        if (tag == 282) {
         parse_dint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_dint;
        if (input->ExpectTag(290)) goto parse_dfloat;
        break;
      }

      // repeated .comphealth.KVF dfloat = 36;
      case 36: {
        if (tag == 290) {
         parse_dfloat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dfloat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_dfloat;
        if (input->ExpectTag(298)) goto parse_poas;
        break;
      }

      // repeated string poas = 37;
      case 37: {
        if (tag == 298) {
         parse_poas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_poas()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->poas(this->poas_size() - 1).data(),
            this->poas(this->poas_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "poas");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_poas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.Visit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.Visit)
  return false;
#undef DO_
}

void Visit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.Visit)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string patient_key = 2;
  if (has_patient_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_key().data(), this->patient_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patient_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->patient_key(), output);
  }

  // required string dataset = 3;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dataset(), output);
  }

  // required string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->state(), output);
  }

  // required string facility = 5;
  if (has_facility()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facility().data(), this->facility().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "facility");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->facility(), output);
  }

  // required .comphealth.ETYPE vtype = 6;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->vtype(), output);
  }

  // required int32 age = 7 [default = -1];
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->age(), output);
  }

  // required .comphealth.SEX sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->sex(), output);
  }

  // required .comphealth.RACE race = 9;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->race(), output);
  }

  // required .comphealth.SOURCE source = 10;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->source(), output);
  }

  // required .comphealth.DISPOSITION disposition = 11;
  if (has_disposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->disposition(), output);
  }

  // required int32 los = 12;
  if (has_los()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->los(), output);
  }

  // required .comphealth.DEATH death = 13;
  if (has_death()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->death(), output);
  }

  // required .comphealth.PAYER payer = 14;
  if (has_payer()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->payer(), output);
  }

  // required string primary_diagnosis = 15;
  if (has_primary_diagnosis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_diagnosis().data(), this->primary_diagnosis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "primary_diagnosis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->primary_diagnosis(), output);
  }

  // optional .comphealth.PR primary_procedure = 16;
  if (has_primary_procedure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->primary_procedure(), output);
  }

  // required string drg = 18;
  if (has_drg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->drg().data(), this->drg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "drg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->drg(), output);
  }

  // repeated string dxs = 19;
  for (int i = 0; i < this->dxs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->dxs(i).data(), this->dxs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "dxs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->dxs(i), output);
  }

  // repeated string exs = 20;
  for (int i = 0; i < this->exs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->exs(i).data(), this->exs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "exs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->exs(i), output);
  }

  // repeated .comphealth.PR prs = 21;
  for (int i = 0; i < this->prs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->prs(i), output);
  }

  // required int32 year = 22;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->year(), output);
  }

  // required int32 day = 23;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->day(), output);
  }

  // required int32 month = 24 [default = -1];
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->month(), output);
  }

  // required int32 quarter = 26 [default = -1];
  if (has_quarter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->quarter(), output);
  }

  // required .comphealth.PZIP zip = 27;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->zip(), output);
  }

  // required .comphealth.DNR dnr = 28;
  if (has_dnr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->dnr(), output);
  }

  // required float charge = 30;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->charge(), output);
  }

  // repeated .comphealth.KVS dstring = 34;
  for (int i = 0; i < this->dstring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->dstring(i), output);
  }

  // repeated .comphealth.KVI dint = 35;
  for (int i = 0; i < this->dint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->dint(i), output);
  }

  // repeated .comphealth.KVF dfloat = 36;
  for (int i = 0; i < this->dfloat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->dfloat(i), output);
  }

  // repeated string poas = 37;
  for (int i = 0; i < this->poas_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->poas(i).data(), this->poas(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "poas");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->poas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.Visit)
}

::google::protobuf::uint8* Visit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.Visit)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string patient_key = 2;
  if (has_patient_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_key().data(), this->patient_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patient_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patient_key(), target);
  }

  // required string dataset = 3;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataset(), target);
  }

  // required string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->state(), target);
  }

  // required string facility = 5;
  if (has_facility()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facility().data(), this->facility().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "facility");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->facility(), target);
  }

  // required .comphealth.ETYPE vtype = 6;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->vtype(), target);
  }

  // required int32 age = 7 [default = -1];
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->age(), target);
  }

  // required .comphealth.SEX sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->sex(), target);
  }

  // required .comphealth.RACE race = 9;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->race(), target);
  }

  // required .comphealth.SOURCE source = 10;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->source(), target);
  }

  // required .comphealth.DISPOSITION disposition = 11;
  if (has_disposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->disposition(), target);
  }

  // required int32 los = 12;
  if (has_los()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->los(), target);
  }

  // required .comphealth.DEATH death = 13;
  if (has_death()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->death(), target);
  }

  // required .comphealth.PAYER payer = 14;
  if (has_payer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->payer(), target);
  }

  // required string primary_diagnosis = 15;
  if (has_primary_diagnosis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_diagnosis().data(), this->primary_diagnosis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "primary_diagnosis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->primary_diagnosis(), target);
  }

  // optional .comphealth.PR primary_procedure = 16;
  if (has_primary_procedure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->primary_procedure(), target);
  }

  // required string drg = 18;
  if (has_drg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->drg().data(), this->drg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "drg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->drg(), target);
  }

  // repeated string dxs = 19;
  for (int i = 0; i < this->dxs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dxs(i).data(), this->dxs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dxs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->dxs(i), target);
  }

  // repeated string exs = 20;
  for (int i = 0; i < this->exs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exs(i).data(), this->exs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->exs(i), target);
  }

  // repeated .comphealth.PR prs = 21;
  for (int i = 0; i < this->prs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->prs(i), target);
  }

  // required int32 year = 22;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->year(), target);
  }

  // required int32 day = 23;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->day(), target);
  }

  // required int32 month = 24 [default = -1];
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->month(), target);
  }

  // required int32 quarter = 26 [default = -1];
  if (has_quarter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->quarter(), target);
  }

  // required .comphealth.PZIP zip = 27;
  if (has_zip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->zip(), target);
  }

  // required .comphealth.DNR dnr = 28;
  if (has_dnr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->dnr(), target);
  }

  // required float charge = 30;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->charge(), target);
  }

  // repeated .comphealth.KVS dstring = 34;
  for (int i = 0; i < this->dstring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->dstring(i), target);
  }

  // repeated .comphealth.KVI dint = 35;
  for (int i = 0; i < this->dint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->dint(i), target);
  }

  // repeated .comphealth.KVF dfloat = 36;
  for (int i = 0; i < this->dfloat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->dfloat(i), target);
  }

  // repeated string poas = 37;
  for (int i = 0; i < this->poas_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poas(i).data(), this->poas(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poas");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(37, this->poas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.Visit)
  return target;
}

int Visit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string patient_key = 2;
    if (has_patient_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patient_key());
    }

    // required string dataset = 3;
    if (has_dataset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

    // required string state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // required string facility = 5;
    if (has_facility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facility());
    }

    // required .comphealth.ETYPE vtype = 6;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vtype());
    }

    // required int32 age = 7 [default = -1];
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // required .comphealth.SEX sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .comphealth.RACE race = 9;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
    }

    // required .comphealth.SOURCE source = 10;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // required .comphealth.DISPOSITION disposition = 11;
    if (has_disposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disposition());
    }

    // required int32 los = 12;
    if (has_los()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->los());
    }

    // required .comphealth.DEATH death = 13;
    if (has_death()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->death());
    }

    // required .comphealth.PAYER payer = 14;
    if (has_payer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->payer());
    }

    // required string primary_diagnosis = 15;
    if (has_primary_diagnosis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_diagnosis());
    }

    // optional .comphealth.PR primary_procedure = 16;
    if (has_primary_procedure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primary_procedure());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string drg = 18;
    if (has_drg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->drg());
    }

    // required int32 year = 22;
    if (has_year()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // required int32 day = 23;
    if (has_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 month = 24 [default = -1];
    if (has_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 quarter = 26 [default = -1];
    if (has_quarter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quarter());
    }

    // required .comphealth.PZIP zip = 27;
    if (has_zip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zip());
    }

    // required .comphealth.DNR dnr = 28;
    if (has_dnr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dnr());
    }

    // required float charge = 30;
    if (has_charge()) {
      total_size += 2 + 4;
    }

  }
  // repeated string dxs = 19;
  total_size += 2 * this->dxs_size();
  for (int i = 0; i < this->dxs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dxs(i));
  }

  // repeated string exs = 20;
  total_size += 2 * this->exs_size();
  for (int i = 0; i < this->exs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exs(i));
  }

  // repeated string poas = 37;
  total_size += 2 * this->poas_size();
  for (int i = 0; i < this->poas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->poas(i));
  }

  // repeated .comphealth.PR prs = 21;
  total_size += 2 * this->prs_size();
  for (int i = 0; i < this->prs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prs(i));
  }

  // repeated .comphealth.KVS dstring = 34;
  total_size += 2 * this->dstring_size();
  for (int i = 0; i < this->dstring_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dstring(i));
  }

  // repeated .comphealth.KVI dint = 35;
  total_size += 2 * this->dint_size();
  for (int i = 0; i < this->dint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dint(i));
  }

  // repeated .comphealth.KVF dfloat = 36;
  total_size += 2 * this->dfloat_size();
  for (int i = 0; i < this->dfloat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dfloat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Visit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Visit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Visit::MergeFrom(const Visit& from) {
  GOOGLE_CHECK_NE(&from, this);
  dxs_.MergeFrom(from.dxs_);
  exs_.MergeFrom(from.exs_);
  poas_.MergeFrom(from.poas_);
  prs_.MergeFrom(from.prs_);
  dstring_.MergeFrom(from.dstring_);
  dint_.MergeFrom(from.dint_);
  dfloat_.MergeFrom(from.dfloat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_patient_key()) {
      set_patient_key(from.patient_key());
    }
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_facility()) {
      set_facility(from.facility());
    }
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_disposition()) {
      set_disposition(from.disposition());
    }
    if (from.has_los()) {
      set_los(from.los());
    }
    if (from.has_death()) {
      set_death(from.death());
    }
    if (from.has_payer()) {
      set_payer(from.payer());
    }
    if (from.has_primary_diagnosis()) {
      set_primary_diagnosis(from.primary_diagnosis());
    }
    if (from.has_primary_procedure()) {
      mutable_primary_procedure()->::comphealth::PR::MergeFrom(from.primary_procedure());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_drg()) {
      set_drg(from.drg());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_quarter()) {
      set_quarter(from.quarter());
    }
    if (from.has_zip()) {
      set_zip(from.zip());
    }
    if (from.has_dnr()) {
      set_dnr(from.dnr());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Visit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visit::CopyFrom(const Visit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0fe17fff) != 0x0fe17fff) return false;

  if (has_primary_procedure()) {
    if (!this->primary_procedure().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->prs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dstring())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dint())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dfloat())) return false;
  return true;
}

void Visit::Swap(Visit* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(patient_key_, other->patient_key_);
    std::swap(dataset_, other->dataset_);
    std::swap(state_, other->state_);
    std::swap(facility_, other->facility_);
    std::swap(vtype_, other->vtype_);
    std::swap(age_, other->age_);
    std::swap(sex_, other->sex_);
    std::swap(race_, other->race_);
    std::swap(source_, other->source_);
    std::swap(disposition_, other->disposition_);
    std::swap(los_, other->los_);
    std::swap(death_, other->death_);
    std::swap(payer_, other->payer_);
    std::swap(primary_diagnosis_, other->primary_diagnosis_);
    std::swap(primary_procedure_, other->primary_procedure_);
    std::swap(drg_, other->drg_);
    dxs_.Swap(&other->dxs_);
    exs_.Swap(&other->exs_);
    poas_.Swap(&other->poas_);
    prs_.Swap(&other->prs_);
    std::swap(year_, other->year_);
    std::swap(day_, other->day_);
    std::swap(month_, other->month_);
    std::swap(quarter_, other->quarter_);
    std::swap(zip_, other->zip_);
    std::swap(dnr_, other->dnr_);
    std::swap(charge_, other->charge_);
    dstring_.Swap(&other->dstring_);
    dint_.Swap(&other->dint_);
    dfloat_.Swap(&other->dfloat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Visit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visit_descriptor_;
  metadata.reflection = Visit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Patient::kPatientKeyFieldNumber;
const int Patient::kVisitsFieldNumber;
const int Patient::kRawFieldNumber;
const int Patient::kLinkedFieldNumber;
#endif  // !_MSC_VER

Patient::Patient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.Patient)
}

void Patient::InitAsDefaultInstance() {
}

Patient::Patient(const Patient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.Patient)
}

void Patient::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  patient_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Patient::~Patient() {
  // @@protoc_insertion_point(destructor:comphealth.Patient)
  SharedDtor();
}

void Patient::SharedDtor() {
  if (patient_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patient_key_;
  }
  if (raw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_;
  }
  if (this != default_instance_) {
  }
}

void Patient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Patient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Patient_descriptor_;
}

const Patient& Patient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

Patient* Patient::default_instance_ = NULL;

Patient* Patient::New() const {
  return new Patient;
}

void Patient::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_patient_key()) {
      if (patient_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patient_key_->clear();
      }
    }
    if (has_raw()) {
      if (raw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raw_->clear();
      }
    }
    linked_ = false;
  }
  visits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Patient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.Patient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string patient_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patient_key().data(), this->patient_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patient_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_visits;
        break;
      }

      // repeated .comphealth.Visit visits = 2;
      case 2: {
        if (tag == 18) {
         parse_visits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_visits;
        if (input->ExpectTag(26)) goto parse_raw;
        break;
      }

      // optional string raw = 3;
      case 3: {
        if (tag == 26) {
         parse_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->raw().data(), this->raw().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raw");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_linked;
        break;
      }

      // optional bool linked = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.Patient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.Patient)
  return false;
#undef DO_
}

void Patient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.Patient)
  // optional string patient_key = 1;
  if (has_patient_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_key().data(), this->patient_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patient_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->patient_key(), output);
  }

  // repeated .comphealth.Visit visits = 2;
  for (int i = 0; i < this->visits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->visits(i), output);
  }

  // optional string raw = 3;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw().data(), this->raw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->raw(), output);
  }

  // optional bool linked = 4 [default = false];
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->linked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.Patient)
}

::google::protobuf::uint8* Patient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.Patient)
  // optional string patient_key = 1;
  if (has_patient_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_key().data(), this->patient_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patient_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patient_key(), target);
  }

  // repeated .comphealth.Visit visits = 2;
  for (int i = 0; i < this->visits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->visits(i), target);
  }

  // optional string raw = 3;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw().data(), this->raw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->raw(), target);
  }

  // optional bool linked = 4 [default = false];
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->linked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.Patient)
  return target;
}

int Patient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string patient_key = 1;
    if (has_patient_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patient_key());
    }

    // optional string raw = 3;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw());
    }

    // optional bool linked = 4 [default = false];
    if (has_linked()) {
      total_size += 1 + 1;
    }

  }
  // repeated .comphealth.Visit visits = 2;
  total_size += 1 * this->visits_size();
  for (int i = 0; i < this->visits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Patient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Patient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Patient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Patient::MergeFrom(const Patient& from) {
  GOOGLE_CHECK_NE(&from, this);
  visits_.MergeFrom(from.visits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patient_key()) {
      set_patient_key(from.patient_key());
    }
    if (from.has_raw()) {
      set_raw(from.raw());
    }
    if (from.has_linked()) {
      set_linked(from.linked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Patient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Patient::CopyFrom(const Patient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Patient::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->visits())) return false;
  return true;
}

void Patient::Swap(Patient* other) {
  if (other != this) {
    std::swap(patient_key_, other->patient_key_);
    visits_.Swap(&other->visits_);
    std::swap(raw_, other->raw_);
    std::swap(linked_, other->linked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Patient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Patient_descriptor_;
  metadata.reflection = Patient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatientList::kPatientsFieldNumber;
#endif  // !_MSC_VER

PatientList::PatientList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PatientList)
}

void PatientList::InitAsDefaultInstance() {
}

PatientList::PatientList(const PatientList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PatientList)
}

void PatientList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatientList::~PatientList() {
  // @@protoc_insertion_point(destructor:comphealth.PatientList)
  SharedDtor();
}

void PatientList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PatientList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatientList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatientList_descriptor_;
}

const PatientList& PatientList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

PatientList* PatientList::default_instance_ = NULL;

PatientList* PatientList::New() const {
  return new PatientList;
}

void PatientList::Clear() {
  patients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatientList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PatientList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comphealth.Patient patients = 1;
      case 1: {
        if (tag == 10) {
         parse_patients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_patients;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PatientList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PatientList)
  return false;
#undef DO_
}

void PatientList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PatientList)
  // repeated .comphealth.Patient patients = 1;
  for (int i = 0; i < this->patients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->patients(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PatientList)
}

::google::protobuf::uint8* PatientList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PatientList)
  // repeated .comphealth.Patient patients = 1;
  for (int i = 0; i < this->patients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->patients(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PatientList)
  return target;
}

int PatientList::ByteSize() const {
  int total_size = 0;

  // repeated .comphealth.Patient patients = 1;
  total_size += 1 * this->patients_size();
  for (int i = 0; i < this->patients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patients(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatientList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatientList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatientList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatientList::MergeFrom(const PatientList& from) {
  GOOGLE_CHECK_NE(&from, this);
  patients_.MergeFrom(from.patients_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatientList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientList::CopyFrom(const PatientList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->patients())) return false;
  return true;
}

void PatientList::Swap(PatientList* other) {
  if (other != this) {
    patients_.Swap(&other->patients_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatientList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatientList_descriptor_;
  metadata.reflection = PatientList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisitList::kVisitsFieldNumber;
#endif  // !_MSC_VER

VisitList::VisitList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.VisitList)
}

void VisitList::InitAsDefaultInstance() {
}

VisitList::VisitList(const VisitList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.VisitList)
}

void VisitList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisitList::~VisitList() {
  // @@protoc_insertion_point(destructor:comphealth.VisitList)
  SharedDtor();
}

void VisitList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisitList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitList_descriptor_;
}

const VisitList& VisitList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvisit_2eproto();
  return *default_instance_;
}

VisitList* VisitList::default_instance_ = NULL;

VisitList* VisitList::New() const {
  return new VisitList;
}

void VisitList::Clear() {
  visits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisitList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.VisitList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comphealth.Visit visits = 1;
      case 1: {
        if (tag == 10) {
         parse_visits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_visits;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.VisitList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.VisitList)
  return false;
#undef DO_
}

void VisitList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.VisitList)
  // repeated .comphealth.Visit visits = 1;
  for (int i = 0; i < this->visits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.VisitList)
}

::google::protobuf::uint8* VisitList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.VisitList)
  // repeated .comphealth.Visit visits = 1;
  for (int i = 0; i < this->visits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->visits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.VisitList)
  return target;
}

int VisitList::ByteSize() const {
  int total_size = 0;

  // repeated .comphealth.Visit visits = 1;
  total_size += 1 * this->visits_size();
  for (int i = 0; i < this->visits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisitList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisitList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisitList::MergeFrom(const VisitList& from) {
  GOOGLE_CHECK_NE(&from, this);
  visits_.MergeFrom(from.visits_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisitList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitList::CopyFrom(const VisitList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->visits())) return false;
  return true;
}

void VisitList::Swap(VisitList* other) {
  if (other != this) {
    visits_.Swap(&other->visits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisitList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitList_descriptor_;
  metadata.reflection = VisitList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

// @@protoc_insertion_point(global_scope)

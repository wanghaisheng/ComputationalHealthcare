// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pn1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pn1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comphealth {

namespace {

const ::google::protobuf::Descriptor* PGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Exclusion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Exclusion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ISubset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ISubset_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSubset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSubset_reflection_ = NULL;
const ::google::protobuf::Descriptor* RSEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RSEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PLVisits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PLVisits_reflection_ = NULL;
const ::google::protobuf::Descriptor* PLVisit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PLVisit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ENTRYTYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pn1_2eproto() {
  protobuf_AddDesc_pn1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pn1.proto");
  GOOGLE_CHECK(file != NULL);
  PGroup_descriptor_ = file->message_type(0);
  static const int PGroup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGroup, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGroup, primary_entry_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGroup, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGroup, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGroup, count_),
  };
  PGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGroup_descriptor_,
      PGroup::default_instance_,
      PGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGroup));
  PEntry_descriptor_ = file->message_type(1);
  static const int PEntry_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, deltah_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, delta_subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, age_subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, year_subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, state_subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, dataset_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, provenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, pediatric_),
  };
  PEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEntry_descriptor_,
      PEntry::default_instance_,
      PEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEntry));
  Exclusion_descriptor_ = file->message_type(2);
  static const int Exclusion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusion, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusion, s_),
  };
  Exclusion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Exclusion_descriptor_,
      Exclusion::default_instance_,
      Exclusion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Exclusion));
  ISubset_descriptor_ = file->message_type(3);
  static const int ISubset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISubset, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISubset, subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISubset, s_),
  };
  ISubset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ISubset_descriptor_,
      ISubset::default_instance_,
      ISubset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISubset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ISubset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ISubset));
  SSubset_descriptor_ = file->message_type(4);
  static const int SSubset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSubset, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSubset, subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSubset, s_),
  };
  SSubset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSubset_descriptor_,
      SSubset::default_instance_,
      SSubset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSubset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSubset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSubset));
  RSEntry_descriptor_ = file->message_type(5);
  static const int RSEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSEntry, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSEntry, subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSEntry, s_),
  };
  RSEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RSEntry_descriptor_,
      RSEntry::default_instance_,
      RSEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RSEntry));
  PLVisits_descriptor_ = file->message_type(6);
  static const int PLVisits_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisits, plvisits_),
  };
  PLVisits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PLVisits_descriptor_,
      PLVisits::default_instance_,
      PLVisits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PLVisits));
  PLVisit_descriptor_ = file->message_type(7);
  static const int PLVisit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisit, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisit, initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisit, sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisit, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisit, v_),
  };
  PLVisit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PLVisit_descriptor_,
      PLVisit::default_instance_,
      PLVisit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLVisit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PLVisit));
  ENTRYTYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pn1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGroup_descriptor_, &PGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEntry_descriptor_, &PEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Exclusion_descriptor_, &Exclusion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ISubset_descriptor_, &ISubset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSubset_descriptor_, &SSubset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RSEntry_descriptor_, &RSEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PLVisits_descriptor_, &PLVisits::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PLVisit_descriptor_, &PLVisit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pn1_2eproto() {
  delete PGroup::default_instance_;
  delete PGroup_reflection_;
  delete PEntry::default_instance_;
  delete PEntry_reflection_;
  delete Exclusion::default_instance_;
  delete Exclusion_reflection_;
  delete ISubset::default_instance_;
  delete ISubset_reflection_;
  delete SSubset::default_instance_;
  delete SSubset_reflection_;
  delete RSEntry::default_instance_;
  delete RSEntry_reflection_;
  delete PLVisits::default_instance_;
  delete PLVisits_reflection_;
  delete PLVisit::default_instance_;
  delete PLVisit_reflection_;
}

void protobuf_AddDesc_pn1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comphealth::protobuf_AddDesc_penums_2eproto();
  ::comphealth::protobuf_AddDesc_pvisit_2eproto();
  ::comphealth::protobuf_AddDesc_pstat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpn1.proto\022\ncomphealth\032\014penums.proto\032\014p"
    "visit.proto\032\013pstat.proto\"X\n\006PGroup\022\013\n\003ke"
    "y\030\001 \002(\t\022\031\n\021primary_entry_key\030\002 \001(\t\022\014\n\004ke"
    "ys\030\003 \003(\t\022\t\n\001s\030\004 \001(\t\022\r\n\005count\030\005 \001(\005\"\274\003\n\006P"
    "Entry\022\013\n\003key\030\001 \002(\t\022\017\n\007dataset\030\002 \001(\t\022$\n\005e"
    "type\030\003 \002(\0162\025.comphealth.ENTRYTYPE\022\n\n\002dx\030"
    "\004 \002(\t\022\017\n\007initial\030\005 \002(\t\022\013\n\003sub\030\006 \002(\t\022#\n\006d"
    "eltah\030\007 \002(\0132\023.comphealth.IntHist\022\036\n\005stat"
    "s\030\010 \002(\0132\017.comphealth.AGG\022)\n\014delta_subset"
    "\030\t \003(\0132\023.comphealth.ISubset\022\'\n\nage_subse"
    "t\030\n \003(\0132\023.comphealth.SSubset\022(\n\013year_sub"
    "set\030\013 \003(\0132\023.comphealth.ISubset\022)\n\014state_"
    "subset\030\014 \003(\0132\023.comphealth.RSEntry\022\021\n\tdat"
    "aset_s\030\020 \001(\t\022)\n\nprovenance\030\021 \003(\0132\025.comph"
    "ealth.Exclusion\022\030\n\tpediatric\030\022 \001(\010:\005fals"
    "e\"!\n\tExclusion\022\t\n\001k\030\001 \002(\005\022\t\n\001s\030\003 \001(\t\"@\n\007"
    "ISubset\022\t\n\001k\030\001 \002(\005\022\037\n\006subset\030\002 \002(\0132\017.com"
    "phealth.AGG\022\t\n\001s\030\003 \001(\t\"@\n\007SSubset\022\t\n\001k\030\001"
    " \002(\t\022\037\n\006subset\030\002 \002(\0132\017.comphealth.AGG\022\t\n"
    "\001s\030\003 \001(\t\"C\n\007RSEntry\022\t\n\001k\030\001 \002(\t\022\"\n\006subset"
    "\030\002 \002(\0132\022.comphealth.PEntry\022\t\n\001s\030\003 \001(\t\"1\n"
    "\010PLVisits\022%\n\010plvisits\030\001 \003(\0132\023.comphealth"
    ".PLVisit\"`\n\007PLVisit\022\n\n\002dx\030\001 \002(\t\022\017\n\007initi"
    "al\030\002 \002(\t\022\013\n\003sub\030\003 \002(\t\022\r\n\005delta\030\004 \002(\005\022\034\n\001"
    "v\030\005 \002(\0132\021.comphealth.Visit*&\n\tENTRYTYPE\022"
    "\010\n\004NONE\020\001\022\006\n\002DX\020\002\022\007\n\003DRG\020\003", 1026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pn1.proto", &protobuf_RegisterTypes);
  PGroup::default_instance_ = new PGroup();
  PEntry::default_instance_ = new PEntry();
  Exclusion::default_instance_ = new Exclusion();
  ISubset::default_instance_ = new ISubset();
  SSubset::default_instance_ = new SSubset();
  RSEntry::default_instance_ = new RSEntry();
  PLVisits::default_instance_ = new PLVisits();
  PLVisit::default_instance_ = new PLVisit();
  PGroup::default_instance_->InitAsDefaultInstance();
  PEntry::default_instance_->InitAsDefaultInstance();
  Exclusion::default_instance_->InitAsDefaultInstance();
  ISubset::default_instance_->InitAsDefaultInstance();
  SSubset::default_instance_->InitAsDefaultInstance();
  RSEntry::default_instance_->InitAsDefaultInstance();
  PLVisits::default_instance_->InitAsDefaultInstance();
  PLVisit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pn1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pn1_2eproto {
  StaticDescriptorInitializer_pn1_2eproto() {
    protobuf_AddDesc_pn1_2eproto();
  }
} static_descriptor_initializer_pn1_2eproto_;
const ::google::protobuf::EnumDescriptor* ENTRYTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENTRYTYPE_descriptor_;
}
bool ENTRYTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PGroup::kKeyFieldNumber;
const int PGroup::kPrimaryEntryKeyFieldNumber;
const int PGroup::kKeysFieldNumber;
const int PGroup::kSFieldNumber;
const int PGroup::kCountFieldNumber;
#endif  // !_MSC_VER

PGroup::PGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PGroup)
}

void PGroup::InitAsDefaultInstance() {
}

PGroup::PGroup(const PGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PGroup)
}

void PGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_entry_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGroup::~PGroup() {
  // @@protoc_insertion_point(destructor:comphealth.PGroup)
  SharedDtor();
}

void PGroup::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (primary_entry_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete primary_entry_key_;
  }
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void PGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGroup_descriptor_;
}

const PGroup& PGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

PGroup* PGroup::default_instance_ = NULL;

PGroup* PGroup::New() const {
  return new PGroup;
}

void PGroup::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_primary_entry_key()) {
      if (primary_entry_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        primary_entry_key_->clear();
      }
    }
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
    count_ = 0;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_primary_entry_key;
        break;
      }

      // optional string primary_entry_key = 2;
      case 2: {
        if (tag == 18) {
         parse_primary_entry_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_entry_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->primary_entry_key().data(), this->primary_entry_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "primary_entry_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated string keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keys");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(34)) goto parse_s;
        break;
      }

      // optional string s = 4;
      case 4: {
        if (tag == 34) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PGroup)
  return false;
#undef DO_
}

void PGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PGroup)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string primary_entry_key = 2;
  if (has_primary_entry_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_entry_key().data(), this->primary_entry_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "primary_entry_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->primary_entry_key(), output);
  }

  // repeated string keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keys(i), output);
  }

  // optional string s = 4;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->s(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PGroup)
}

::google::protobuf::uint8* PGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PGroup)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string primary_entry_key = 2;
  if (has_primary_entry_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_entry_key().data(), this->primary_entry_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "primary_entry_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->primary_entry_key(), target);
  }

  // repeated string keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keys(i), target);
  }

  // optional string s = 4;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->s(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PGroup)
  return target;
}

int PGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string primary_entry_key = 2;
    if (has_primary_entry_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_entry_key());
    }

    // optional string s = 4;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated string keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGroup::MergeFrom(const PGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_primary_entry_key()) {
      set_primary_entry_key(from.primary_entry_key());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGroup::CopyFrom(const PGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PGroup::Swap(PGroup* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(primary_entry_key_, other->primary_entry_key_);
    keys_.Swap(&other->keys_);
    std::swap(s_, other->s_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGroup_descriptor_;
  metadata.reflection = PGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEntry::kKeyFieldNumber;
const int PEntry::kDatasetFieldNumber;
const int PEntry::kEtypeFieldNumber;
const int PEntry::kDxFieldNumber;
const int PEntry::kInitialFieldNumber;
const int PEntry::kSubFieldNumber;
const int PEntry::kDeltahFieldNumber;
const int PEntry::kStatsFieldNumber;
const int PEntry::kDeltaSubsetFieldNumber;
const int PEntry::kAgeSubsetFieldNumber;
const int PEntry::kYearSubsetFieldNumber;
const int PEntry::kStateSubsetFieldNumber;
const int PEntry::kDatasetSFieldNumber;
const int PEntry::kProvenanceFieldNumber;
const int PEntry::kPediatricFieldNumber;
#endif  // !_MSC_VER

PEntry::PEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PEntry)
}

void PEntry::InitAsDefaultInstance() {
  deltah_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
  stats_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
}

PEntry::PEntry(const PEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PEntry)
}

void PEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etype_ = 1;
  dx_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deltah_ = NULL;
  stats_ = NULL;
  dataset_s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pediatric_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEntry::~PEntry() {
  // @@protoc_insertion_point(destructor:comphealth.PEntry)
  SharedDtor();
}

void PEntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (dx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dx_;
  }
  if (initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initial_;
  }
  if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sub_;
  }
  if (dataset_s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_s_;
  }
  if (this != default_instance_) {
    delete deltah_;
    delete stats_;
  }
}

void PEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEntry_descriptor_;
}

const PEntry& PEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

PEntry* PEntry::default_instance_ = NULL;

PEntry* PEntry::New() const {
  return new PEntry;
}

void PEntry::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_dataset()) {
      if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataset_->clear();
      }
    }
    etype_ = 1;
    if (has_dx()) {
      if (dx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dx_->clear();
      }
    }
    if (has_initial()) {
      if (initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initial_->clear();
      }
    }
    if (has_sub()) {
      if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sub_->clear();
      }
    }
    if (has_deltah()) {
      if (deltah_ != NULL) deltah_->::comphealth::IntHist::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::comphealth::AGG::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 20480) {
    if (has_dataset_s()) {
      if (dataset_s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataset_s_->clear();
      }
    }
    pediatric_ = false;
  }
  delta_subset_.Clear();
  age_subset_.Clear();
  year_subset_.Clear();
  state_subset_.Clear();
  provenance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dataset;
        break;
      }

      // optional string dataset = 2;
      case 2: {
        if (tag == 18) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // required .comphealth.ENTRYTYPE etype = 3;
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::ENTRYTYPE_IsValid(value)) {
            set_etype(static_cast< ::comphealth::ENTRYTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dx;
        break;
      }

      // required string dx = 4;
      case 4: {
        if (tag == 34) {
         parse_dx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dx().data(), this->dx().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dx");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_initial;
        break;
      }

      // required string initial = 5;
      case 5: {
        if (tag == 42) {
         parse_initial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initial().data(), this->initial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initial");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sub;
        break;
      }

      // required string sub = 6;
      case 6: {
        if (tag == 50) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub().data(), this->sub().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sub");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_deltah;
        break;
      }

      // required .comphealth.IntHist deltah = 7;
      case 7: {
        if (tag == 58) {
         parse_deltah:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deltah()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stats;
        break;
      }

      // required .comphealth.AGG stats = 8;
      case 8: {
        if (tag == 66) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_delta_subset;
        break;
      }

      // repeated .comphealth.ISubset delta_subset = 9;
      case 9: {
        if (tag == 74) {
         parse_delta_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delta_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_delta_subset;
        if (input->ExpectTag(82)) goto parse_age_subset;
        break;
      }

      // repeated .comphealth.SSubset age_subset = 10;
      case 10: {
        if (tag == 82) {
         parse_age_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_age_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_age_subset;
        if (input->ExpectTag(90)) goto parse_year_subset;
        break;
      }

      // repeated .comphealth.ISubset year_subset = 11;
      case 11: {
        if (tag == 90) {
         parse_year_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_year_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_year_subset;
        if (input->ExpectTag(98)) goto parse_state_subset;
        break;
      }

      // repeated .comphealth.RSEntry state_subset = 12;
      case 12: {
        if (tag == 98) {
         parse_state_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_state_subset;
        if (input->ExpectTag(130)) goto parse_dataset_s;
        break;
      }

      // optional string dataset_s = 16;
      case 16: {
        if (tag == 130) {
         parse_dataset_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset_s().data(), this->dataset_s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset_s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_provenance;
        break;
      }

      // repeated .comphealth.Exclusion provenance = 17;
      case 17: {
        if (tag == 138) {
         parse_provenance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_provenance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_provenance;
        if (input->ExpectTag(144)) goto parse_pediatric;
        break;
      }

      // optional bool pediatric = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_pediatric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pediatric_)));
          set_has_pediatric();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PEntry)
  return false;
#undef DO_
}

void PEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string dataset = 2;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dataset(), output);
  }

  // required .comphealth.ENTRYTYPE etype = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // required string dx = 4;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dx().data(), this->dx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dx(), output);
  }

  // required string initial = 5;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial().data(), this->initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->initial(), output);
  }

  // required string sub = 6;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub().data(), this->sub().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sub(), output);
  }

  // required .comphealth.IntHist deltah = 7;
  if (has_deltah()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deltah(), output);
  }

  // required .comphealth.AGG stats = 8;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stats(), output);
  }

  // repeated .comphealth.ISubset delta_subset = 9;
  for (int i = 0; i < this->delta_subset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->delta_subset(i), output);
  }

  // repeated .comphealth.SSubset age_subset = 10;
  for (int i = 0; i < this->age_subset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->age_subset(i), output);
  }

  // repeated .comphealth.ISubset year_subset = 11;
  for (int i = 0; i < this->year_subset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->year_subset(i), output);
  }

  // repeated .comphealth.RSEntry state_subset = 12;
  for (int i = 0; i < this->state_subset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->state_subset(i), output);
  }

  // optional string dataset_s = 16;
  if (has_dataset_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_s().data(), this->dataset_s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset_s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->dataset_s(), output);
  }

  // repeated .comphealth.Exclusion provenance = 17;
  for (int i = 0; i < this->provenance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->provenance(i), output);
  }

  // optional bool pediatric = 18 [default = false];
  if (has_pediatric()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->pediatric(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PEntry)
}

::google::protobuf::uint8* PEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string dataset = 2;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset(), target);
  }

  // required .comphealth.ENTRYTYPE etype = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // required string dx = 4;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dx().data(), this->dx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dx(), target);
  }

  // required string initial = 5;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial().data(), this->initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->initial(), target);
  }

  // required string sub = 6;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub().data(), this->sub().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sub(), target);
  }

  // required .comphealth.IntHist deltah = 7;
  if (has_deltah()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deltah(), target);
  }

  // required .comphealth.AGG stats = 8;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stats(), target);
  }

  // repeated .comphealth.ISubset delta_subset = 9;
  for (int i = 0; i < this->delta_subset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->delta_subset(i), target);
  }

  // repeated .comphealth.SSubset age_subset = 10;
  for (int i = 0; i < this->age_subset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->age_subset(i), target);
  }

  // repeated .comphealth.ISubset year_subset = 11;
  for (int i = 0; i < this->year_subset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->year_subset(i), target);
  }

  // repeated .comphealth.RSEntry state_subset = 12;
  for (int i = 0; i < this->state_subset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->state_subset(i), target);
  }

  // optional string dataset_s = 16;
  if (has_dataset_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_s().data(), this->dataset_s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset_s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dataset_s(), target);
  }

  // repeated .comphealth.Exclusion provenance = 17;
  for (int i = 0; i < this->provenance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->provenance(i), target);
  }

  // optional bool pediatric = 18 [default = false];
  if (has_pediatric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->pediatric(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PEntry)
  return target;
}

int PEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string dataset = 2;
    if (has_dataset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

    // required .comphealth.ENTRYTYPE etype = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // required string dx = 4;
    if (has_dx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dx());
    }

    // required string initial = 5;
    if (has_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initial());
    }

    // required string sub = 6;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub());
    }

    // required .comphealth.IntHist deltah = 7;
    if (has_deltah()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deltah());
    }

    // required .comphealth.AGG stats = 8;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional string dataset_s = 16;
    if (has_dataset_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_s());
    }

    // optional bool pediatric = 18 [default = false];
    if (has_pediatric()) {
      total_size += 2 + 1;
    }

  }
  // repeated .comphealth.ISubset delta_subset = 9;
  total_size += 1 * this->delta_subset_size();
  for (int i = 0; i < this->delta_subset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delta_subset(i));
  }

  // repeated .comphealth.SSubset age_subset = 10;
  total_size += 1 * this->age_subset_size();
  for (int i = 0; i < this->age_subset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->age_subset(i));
  }

  // repeated .comphealth.ISubset year_subset = 11;
  total_size += 1 * this->year_subset_size();
  for (int i = 0; i < this->year_subset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->year_subset(i));
  }

  // repeated .comphealth.RSEntry state_subset = 12;
  total_size += 1 * this->state_subset_size();
  for (int i = 0; i < this->state_subset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state_subset(i));
  }

  // repeated .comphealth.Exclusion provenance = 17;
  total_size += 2 * this->provenance_size();
  for (int i = 0; i < this->provenance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->provenance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEntry::MergeFrom(const PEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  delta_subset_.MergeFrom(from.delta_subset_);
  age_subset_.MergeFrom(from.age_subset_);
  year_subset_.MergeFrom(from.year_subset_);
  state_subset_.MergeFrom(from.state_subset_);
  provenance_.MergeFrom(from.provenance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_initial()) {
      set_initial(from.initial());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
    if (from.has_deltah()) {
      mutable_deltah()->::comphealth::IntHist::MergeFrom(from.deltah());
    }
    if (from.has_stats()) {
      mutable_stats()->::comphealth::AGG::MergeFrom(from.stats());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_dataset_s()) {
      set_dataset_s(from.dataset_s());
    }
    if (from.has_pediatric()) {
      set_pediatric(from.pediatric());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEntry::CopyFrom(const PEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fd) != 0x000000fd) return false;

  if (has_deltah()) {
    if (!this->deltah().IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->delta_subset())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->age_subset())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->year_subset())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->state_subset())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->provenance())) return false;
  return true;
}

void PEntry::Swap(PEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(dataset_, other->dataset_);
    std::swap(etype_, other->etype_);
    std::swap(dx_, other->dx_);
    std::swap(initial_, other->initial_);
    std::swap(sub_, other->sub_);
    std::swap(deltah_, other->deltah_);
    std::swap(stats_, other->stats_);
    delta_subset_.Swap(&other->delta_subset_);
    age_subset_.Swap(&other->age_subset_);
    year_subset_.Swap(&other->year_subset_);
    state_subset_.Swap(&other->state_subset_);
    std::swap(dataset_s_, other->dataset_s_);
    provenance_.Swap(&other->provenance_);
    std::swap(pediatric_, other->pediatric_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEntry_descriptor_;
  metadata.reflection = PEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Exclusion::kKFieldNumber;
const int Exclusion::kSFieldNumber;
#endif  // !_MSC_VER

Exclusion::Exclusion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.Exclusion)
}

void Exclusion::InitAsDefaultInstance() {
}

Exclusion::Exclusion(const Exclusion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.Exclusion)
}

void Exclusion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Exclusion::~Exclusion() {
  // @@protoc_insertion_point(destructor:comphealth.Exclusion)
  SharedDtor();
}

void Exclusion::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void Exclusion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Exclusion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Exclusion_descriptor_;
}

const Exclusion& Exclusion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

Exclusion* Exclusion::default_instance_ = NULL;

Exclusion* Exclusion::New() const {
  return new Exclusion;
}

void Exclusion::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    k_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Exclusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.Exclusion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 k = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.Exclusion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.Exclusion)
  return false;
#undef DO_
}

void Exclusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.Exclusion)
  // required int32 k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->k(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.Exclusion)
}

::google::protobuf::uint8* Exclusion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.Exclusion)
  // required int32 k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->k(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.Exclusion)
  return target;
}

int Exclusion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Exclusion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Exclusion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Exclusion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Exclusion::MergeFrom(const Exclusion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Exclusion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exclusion::CopyFrom(const Exclusion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exclusion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Exclusion::Swap(Exclusion* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Exclusion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Exclusion_descriptor_;
  metadata.reflection = Exclusion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ISubset::kKFieldNumber;
const int ISubset::kSubsetFieldNumber;
const int ISubset::kSFieldNumber;
#endif  // !_MSC_VER

ISubset::ISubset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.ISubset)
}

void ISubset::InitAsDefaultInstance() {
  subset_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
}

ISubset::ISubset(const ISubset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.ISubset)
}

void ISubset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 0;
  subset_ = NULL;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ISubset::~ISubset() {
  // @@protoc_insertion_point(destructor:comphealth.ISubset)
  SharedDtor();
}

void ISubset::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
    delete subset_;
  }
}

void ISubset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ISubset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ISubset_descriptor_;
}

const ISubset& ISubset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

ISubset* ISubset::default_instance_ = NULL;

ISubset* ISubset::New() const {
  return new ISubset;
}

void ISubset::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 0;
    if (has_subset()) {
      if (subset_ != NULL) subset_->::comphealth::AGG::Clear();
    }
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ISubset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.ISubset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 k = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subset;
        break;
      }

      // required .comphealth.AGG subset = 2;
      case 2: {
        if (tag == 18) {
         parse_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.ISubset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.ISubset)
  return false;
#undef DO_
}

void ISubset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.ISubset)
  // required int32 k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->k(), output);
  }

  // required .comphealth.AGG subset = 2;
  if (has_subset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subset(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.ISubset)
}

::google::protobuf::uint8* ISubset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.ISubset)
  // required int32 k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->k(), target);
  }

  // required .comphealth.AGG subset = 2;
  if (has_subset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subset(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.ISubset)
  return target;
}

int ISubset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k());
    }

    // required .comphealth.AGG subset = 2;
    if (has_subset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subset());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ISubset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ISubset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ISubset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ISubset::MergeFrom(const ISubset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_subset()) {
      mutable_subset()->::comphealth::AGG::MergeFrom(from.subset());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ISubset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ISubset::CopyFrom(const ISubset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISubset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_subset()) {
    if (!this->subset().IsInitialized()) return false;
  }
  return true;
}

void ISubset::Swap(ISubset* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(subset_, other->subset_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ISubset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ISubset_descriptor_;
  metadata.reflection = ISubset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSubset::kKFieldNumber;
const int SSubset::kSubsetFieldNumber;
const int SSubset::kSFieldNumber;
#endif  // !_MSC_VER

SSubset::SSubset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.SSubset)
}

void SSubset::InitAsDefaultInstance() {
  subset_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
}

SSubset::SSubset(const SSubset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.SSubset)
}

void SSubset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subset_ = NULL;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSubset::~SSubset() {
  // @@protoc_insertion_point(destructor:comphealth.SSubset)
  SharedDtor();
}

void SSubset::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
    delete subset_;
  }
}

void SSubset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSubset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSubset_descriptor_;
}

const SSubset& SSubset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

SSubset* SSubset::default_instance_ = NULL;

SSubset* SSubset::New() const {
  return new SSubset;
}

void SSubset::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
    if (has_subset()) {
      if (subset_ != NULL) subset_->::comphealth::AGG::Clear();
    }
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSubset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.SSubset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subset;
        break;
      }

      // required .comphealth.AGG subset = 2;
      case 2: {
        if (tag == 18) {
         parse_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.SSubset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.SSubset)
  return false;
#undef DO_
}

void SSubset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.SSubset)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // required .comphealth.AGG subset = 2;
  if (has_subset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subset(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.SSubset)
}

::google::protobuf::uint8* SSubset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.SSubset)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // required .comphealth.AGG subset = 2;
  if (has_subset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subset(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.SSubset)
  return target;
}

int SSubset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // required .comphealth.AGG subset = 2;
    if (has_subset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subset());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSubset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSubset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSubset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSubset::MergeFrom(const SSubset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_subset()) {
      mutable_subset()->::comphealth::AGG::MergeFrom(from.subset());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSubset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSubset::CopyFrom(const SSubset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSubset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_subset()) {
    if (!this->subset().IsInitialized()) return false;
  }
  return true;
}

void SSubset::Swap(SSubset* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(subset_, other->subset_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSubset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSubset_descriptor_;
  metadata.reflection = SSubset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RSEntry::kKFieldNumber;
const int RSEntry::kSubsetFieldNumber;
const int RSEntry::kSFieldNumber;
#endif  // !_MSC_VER

RSEntry::RSEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.RSEntry)
}

void RSEntry::InitAsDefaultInstance() {
  subset_ = const_cast< ::comphealth::PEntry*>(&::comphealth::PEntry::default_instance());
}

RSEntry::RSEntry(const RSEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.RSEntry)
}

void RSEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subset_ = NULL;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RSEntry::~RSEntry() {
  // @@protoc_insertion_point(destructor:comphealth.RSEntry)
  SharedDtor();
}

void RSEntry::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
    delete subset_;
  }
}

void RSEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSEntry_descriptor_;
}

const RSEntry& RSEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

RSEntry* RSEntry::default_instance_ = NULL;

RSEntry* RSEntry::New() const {
  return new RSEntry;
}

void RSEntry::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
    if (has_subset()) {
      if (subset_ != NULL) subset_->::comphealth::PEntry::Clear();
    }
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RSEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.RSEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subset;
        break;
      }

      // required .comphealth.PEntry subset = 2;
      case 2: {
        if (tag == 18) {
         parse_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.RSEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.RSEntry)
  return false;
#undef DO_
}

void RSEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.RSEntry)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // required .comphealth.PEntry subset = 2;
  if (has_subset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subset(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.RSEntry)
}

::google::protobuf::uint8* RSEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.RSEntry)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // required .comphealth.PEntry subset = 2;
  if (has_subset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subset(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.RSEntry)
  return target;
}

int RSEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // required .comphealth.PEntry subset = 2;
    if (has_subset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subset());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RSEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RSEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RSEntry::MergeFrom(const RSEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_subset()) {
      mutable_subset()->::comphealth::PEntry::MergeFrom(from.subset());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RSEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSEntry::CopyFrom(const RSEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_subset()) {
    if (!this->subset().IsInitialized()) return false;
  }
  return true;
}

void RSEntry::Swap(RSEntry* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(subset_, other->subset_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RSEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RSEntry_descriptor_;
  metadata.reflection = RSEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PLVisits::kPlvisitsFieldNumber;
#endif  // !_MSC_VER

PLVisits::PLVisits()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PLVisits)
}

void PLVisits::InitAsDefaultInstance() {
}

PLVisits::PLVisits(const PLVisits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PLVisits)
}

void PLVisits::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PLVisits::~PLVisits() {
  // @@protoc_insertion_point(destructor:comphealth.PLVisits)
  SharedDtor();
}

void PLVisits::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PLVisits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PLVisits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLVisits_descriptor_;
}

const PLVisits& PLVisits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

PLVisits* PLVisits::default_instance_ = NULL;

PLVisits* PLVisits::New() const {
  return new PLVisits;
}

void PLVisits::Clear() {
  plvisits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PLVisits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PLVisits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comphealth.PLVisit plvisits = 1;
      case 1: {
        if (tag == 10) {
         parse_plvisits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plvisits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_plvisits;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PLVisits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PLVisits)
  return false;
#undef DO_
}

void PLVisits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PLVisits)
  // repeated .comphealth.PLVisit plvisits = 1;
  for (int i = 0; i < this->plvisits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plvisits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PLVisits)
}

::google::protobuf::uint8* PLVisits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PLVisits)
  // repeated .comphealth.PLVisit plvisits = 1;
  for (int i = 0; i < this->plvisits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plvisits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PLVisits)
  return target;
}

int PLVisits::ByteSize() const {
  int total_size = 0;

  // repeated .comphealth.PLVisit plvisits = 1;
  total_size += 1 * this->plvisits_size();
  for (int i = 0; i < this->plvisits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plvisits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PLVisits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PLVisits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PLVisits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PLVisits::MergeFrom(const PLVisits& from) {
  GOOGLE_CHECK_NE(&from, this);
  plvisits_.MergeFrom(from.plvisits_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PLVisits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLVisits::CopyFrom(const PLVisits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLVisits::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->plvisits())) return false;
  return true;
}

void PLVisits::Swap(PLVisits* other) {
  if (other != this) {
    plvisits_.Swap(&other->plvisits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PLVisits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PLVisits_descriptor_;
  metadata.reflection = PLVisits_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PLVisit::kDxFieldNumber;
const int PLVisit::kInitialFieldNumber;
const int PLVisit::kSubFieldNumber;
const int PLVisit::kDeltaFieldNumber;
const int PLVisit::kVFieldNumber;
#endif  // !_MSC_VER

PLVisit::PLVisit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PLVisit)
}

void PLVisit::InitAsDefaultInstance() {
  v_ = const_cast< ::comphealth::Visit*>(&::comphealth::Visit::default_instance());
}

PLVisit::PLVisit(const PLVisit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PLVisit)
}

void PLVisit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dx_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delta_ = 0;
  v_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PLVisit::~PLVisit() {
  // @@protoc_insertion_point(destructor:comphealth.PLVisit)
  SharedDtor();
}

void PLVisit::SharedDtor() {
  if (dx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dx_;
  }
  if (initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initial_;
  }
  if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sub_;
  }
  if (this != default_instance_) {
    delete v_;
  }
}

void PLVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PLVisit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLVisit_descriptor_;
}

const PLVisit& PLVisit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn1_2eproto();
  return *default_instance_;
}

PLVisit* PLVisit::default_instance_ = NULL;

PLVisit* PLVisit::New() const {
  return new PLVisit;
}

void PLVisit::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_dx()) {
      if (dx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dx_->clear();
      }
    }
    if (has_initial()) {
      if (initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initial_->clear();
      }
    }
    if (has_sub()) {
      if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sub_->clear();
      }
    }
    delta_ = 0;
    if (has_v()) {
      if (v_ != NULL) v_->::comphealth::Visit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PLVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PLVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dx = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dx().data(), this->dx().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dx");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_initial;
        break;
      }

      // required string initial = 2;
      case 2: {
        if (tag == 18) {
         parse_initial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initial().data(), this->initial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initial");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sub;
        break;
      }

      // required string sub = 3;
      case 3: {
        if (tag == 26) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub().data(), this->sub().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sub");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_delta;
        break;
      }

      // required int32 delta = 4;
      case 4: {
        if (tag == 32) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_v;
        break;
      }

      // required .comphealth.Visit v = 5;
      case 5: {
        if (tag == 42) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PLVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PLVisit)
  return false;
#undef DO_
}

void PLVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PLVisit)
  // required string dx = 1;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dx().data(), this->dx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dx(), output);
  }

  // required string initial = 2;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial().data(), this->initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->initial(), output);
  }

  // required string sub = 3;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub().data(), this->sub().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sub(), output);
  }

  // required int32 delta = 4;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->delta(), output);
  }

  // required .comphealth.Visit v = 5;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PLVisit)
}

::google::protobuf::uint8* PLVisit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PLVisit)
  // required string dx = 1;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dx().data(), this->dx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dx(), target);
  }

  // required string initial = 2;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial().data(), this->initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->initial(), target);
  }

  // required string sub = 3;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub().data(), this->sub().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sub(), target);
  }

  // required int32 delta = 4;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->delta(), target);
  }

  // required .comphealth.Visit v = 5;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PLVisit)
  return target;
}

int PLVisit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dx = 1;
    if (has_dx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dx());
    }

    // required string initial = 2;
    if (has_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initial());
    }

    // required string sub = 3;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub());
    }

    // required int32 delta = 4;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }

    // required .comphealth.Visit v = 5;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PLVisit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PLVisit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PLVisit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PLVisit::MergeFrom(const PLVisit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_initial()) {
      set_initial(from.initial());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_v()) {
      mutable_v()->::comphealth::Visit::MergeFrom(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PLVisit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLVisit::CopyFrom(const PLVisit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLVisit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_v()) {
    if (!this->v().IsInitialized()) return false;
  }
  return true;
}

void PLVisit::Swap(PLVisit* other) {
  if (other != this) {
    std::swap(dx_, other->dx_);
    std::swap(initial_, other->initial_);
    std::swap(sub_, other->sub_);
    std::swap(delta_, other->delta_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PLVisit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PLVisit_descriptor_;
  metadata.reflection = PLVisit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

// @@protoc_insertion_point(global_scope)

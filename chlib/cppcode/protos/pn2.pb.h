// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pn2.proto

#ifndef PROTOBUF_pn2_2eproto__INCLUDED
#define PROTOBUF_pn2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "penums.pb.h"
#include "pvisit.pb.h"
#include "pstat.pb.h"
#include "pn1.pb.h"
// @@protoc_insertion_point(includes)

namespace comphealth {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pn2_2eproto();
void protobuf_AssignDesc_pn2_2eproto();
void protobuf_ShutdownFile_pn2_2eproto();

class REntry;
class RNode;

enum KEYTYPE {
  N2_ICDPR = 120,
  N2_DX = 122,
  N2_DRG = 123,
  N2_ALL = 124
};
bool KEYTYPE_IsValid(int value);
const KEYTYPE KEYTYPE_MIN = N2_ICDPR;
const KEYTYPE KEYTYPE_MAX = N2_ALL;
const int KEYTYPE_ARRAYSIZE = KEYTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* KEYTYPE_descriptor();
inline const ::std::string& KEYTYPE_Name(KEYTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    KEYTYPE_descriptor(), value);
}
inline bool KEYTYPE_Parse(
    const ::std::string& name, KEYTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KEYTYPE>(
    KEYTYPE_descriptor(), name, value);
}
// ===================================================================

class REntry : public ::google::protobuf::Message {
 public:
  REntry();
  virtual ~REntry();

  REntry(const REntry& from);

  inline REntry& operator=(const REntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REntry& default_instance();

  void Swap(REntry* other);

  // implements Message ----------------------------------------------

  REntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REntry& from);
  void MergeFrom(const REntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 11;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 11;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string initial_key = 1;
  inline bool has_initial_key() const;
  inline void clear_initial_key();
  static const int kInitialKeyFieldNumber = 1;
  inline const ::std::string& initial_key() const;
  inline void set_initial_key(const ::std::string& value);
  inline void set_initial_key(const char* value);
  inline void set_initial_key(const char* value, size_t size);
  inline ::std::string* mutable_initial_key();
  inline ::std::string* release_initial_key();
  inline void set_allocated_initial_key(::std::string* initial_key);

  // required string sub_key = 2;
  inline bool has_sub_key() const;
  inline void clear_sub_key();
  static const int kSubKeyFieldNumber = 2;
  inline const ::std::string& sub_key() const;
  inline void set_sub_key(const ::std::string& value);
  inline void set_sub_key(const char* value);
  inline void set_sub_key(const char* value, size_t size);
  inline ::std::string* mutable_sub_key();
  inline ::std::string* release_sub_key();
  inline void set_allocated_sub_key(::std::string* sub_key);

  // optional string dataset = 3;
  inline bool has_dataset() const;
  inline void clear_dataset();
  static const int kDatasetFieldNumber = 3;
  inline const ::std::string& dataset() const;
  inline void set_dataset(const ::std::string& value);
  inline void set_dataset(const char* value);
  inline void set_dataset(const char* value, size_t size);
  inline ::std::string* mutable_dataset();
  inline ::std::string* release_dataset();
  inline void set_allocated_dataset(::std::string* dataset);

  // optional int32 delta = 8;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 8;
  inline ::google::protobuf::int32 delta() const;
  inline void set_delta(::google::protobuf::int32 value);

  // required .comphealth.AGG initial = 4;
  inline bool has_initial() const;
  inline void clear_initial();
  static const int kInitialFieldNumber = 4;
  inline const ::comphealth::AGG& initial() const;
  inline ::comphealth::AGG* mutable_initial();
  inline ::comphealth::AGG* release_initial();
  inline void set_allocated_initial(::comphealth::AGG* initial);

  // required .comphealth.AGG sub = 5;
  inline bool has_sub() const;
  inline void clear_sub();
  static const int kSubFieldNumber = 5;
  inline const ::comphealth::AGG& sub() const;
  inline ::comphealth::AGG* mutable_sub();
  inline ::comphealth::AGG* release_sub();
  inline void set_allocated_sub(::comphealth::AGG* sub);

  // required .comphealth.IntHist deltah = 6;
  inline bool has_deltah() const;
  inline void clear_deltah();
  static const int kDeltahFieldNumber = 6;
  inline const ::comphealth::IntHist& deltah() const;
  inline ::comphealth::IntHist* mutable_deltah();
  inline ::comphealth::IntHist* release_deltah();
  inline void set_allocated_deltah(::comphealth::IntHist* deltah);

  // required .comphealth.IntHist deltaweekh = 12;
  inline bool has_deltaweekh() const;
  inline void clear_deltaweekh();
  static const int kDeltaweekhFieldNumber = 12;
  inline const ::comphealth::IntHist& deltaweekh() const;
  inline ::comphealth::IntHist* mutable_deltaweekh();
  inline ::comphealth::IntHist* release_deltaweekh();
  inline void set_allocated_deltaweekh(::comphealth::IntHist* deltaweekh);

  // repeated .comphealth.Exclusion provenance = 7;
  inline int provenance_size() const;
  inline void clear_provenance();
  static const int kProvenanceFieldNumber = 7;
  inline const ::comphealth::Exclusion& provenance(int index) const;
  inline ::comphealth::Exclusion* mutable_provenance(int index);
  inline ::comphealth::Exclusion* add_provenance();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >&
      provenance() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >*
      mutable_provenance();

  // required .comphealth.KEYTYPE initial_ktype = 9;
  inline bool has_initial_ktype() const;
  inline void clear_initial_ktype();
  static const int kInitialKtypeFieldNumber = 9;
  inline ::comphealth::KEYTYPE initial_ktype() const;
  inline void set_initial_ktype(::comphealth::KEYTYPE value);

  // required .comphealth.KEYTYPE sub_ktype = 10;
  inline bool has_sub_ktype() const;
  inline void clear_sub_ktype();
  static const int kSubKtypeFieldNumber = 10;
  inline ::comphealth::KEYTYPE sub_ktype() const;
  inline void set_sub_ktype(::comphealth::KEYTYPE value);

  // @@protoc_insertion_point(class_scope:comphealth.REntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_initial_key();
  inline void clear_has_initial_key();
  inline void set_has_sub_key();
  inline void clear_has_sub_key();
  inline void set_has_dataset();
  inline void clear_has_dataset();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_initial();
  inline void clear_has_initial();
  inline void set_has_sub();
  inline void clear_has_sub();
  inline void set_has_deltah();
  inline void clear_has_deltah();
  inline void set_has_deltaweekh();
  inline void clear_has_deltaweekh();
  inline void set_has_initial_ktype();
  inline void clear_has_initial_ktype();
  inline void set_has_sub_ktype();
  inline void clear_has_sub_ktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* initial_key_;
  ::std::string* sub_key_;
  ::std::string* dataset_;
  ::comphealth::AGG* initial_;
  ::comphealth::AGG* sub_;
  ::comphealth::IntHist* deltah_;
  ::google::protobuf::int32 delta_;
  int initial_ktype_;
  ::comphealth::IntHist* deltaweekh_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion > provenance_;
  int sub_ktype_;
  friend void  protobuf_AddDesc_pn2_2eproto();
  friend void protobuf_AssignDesc_pn2_2eproto();
  friend void protobuf_ShutdownFile_pn2_2eproto();

  void InitAsDefaultInstance();
  static REntry* default_instance_;
};
// -------------------------------------------------------------------

class RNode : public ::google::protobuf::Message {
 public:
  RNode();
  virtual ~RNode();

  RNode(const RNode& from);

  inline RNode& operator=(const RNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RNode& default_instance();

  void Swap(RNode* other);

  // implements Message ----------------------------------------------

  RNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RNode& from);
  void MergeFrom(const RNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required .comphealth.KEYTYPE ktype = 2;
  inline bool has_ktype() const;
  inline void clear_ktype();
  static const int kKtypeFieldNumber = 2;
  inline ::comphealth::KEYTYPE ktype() const;
  inline void set_ktype(::comphealth::KEYTYPE value);

  // optional string dataset = 3;
  inline bool has_dataset() const;
  inline void clear_dataset();
  static const int kDatasetFieldNumber = 3;
  inline const ::std::string& dataset() const;
  inline void set_dataset(const ::std::string& value);
  inline void set_dataset(const char* value);
  inline void set_dataset(const char* value, size_t size);
  inline ::std::string* mutable_dataset();
  inline ::std::string* release_dataset();
  inline void set_allocated_dataset(::std::string* dataset);

  // required .comphealth.AGG all = 4;
  inline bool has_all() const;
  inline void clear_all();
  static const int kAllFieldNumber = 4;
  inline const ::comphealth::AGG& all() const;
  inline ::comphealth::AGG* mutable_all();
  inline ::comphealth::AGG* release_all();
  inline void set_allocated_all(::comphealth::AGG* all);

  // optional .comphealth.AGG discharged = 5;
  inline bool has_discharged() const;
  inline void clear_discharged();
  static const int kDischargedFieldNumber = 5;
  inline const ::comphealth::AGG& discharged() const;
  inline ::comphealth::AGG* mutable_discharged();
  inline ::comphealth::AGG* release_discharged();
  inline void set_allocated_discharged(::comphealth::AGG* discharged);

  // optional .comphealth.AGG transferred = 6;
  inline bool has_transferred() const;
  inline void clear_transferred();
  static const int kTransferredFieldNumber = 6;
  inline const ::comphealth::AGG& transferred() const;
  inline ::comphealth::AGG* mutable_transferred();
  inline ::comphealth::AGG* release_transferred();
  inline void set_allocated_transferred(::comphealth::AGG* transferred);

  // optional .comphealth.AGG died = 7;
  inline bool has_died() const;
  inline void clear_died();
  static const int kDiedFieldNumber = 7;
  inline const ::comphealth::AGG& died() const;
  inline ::comphealth::AGG* mutable_died();
  inline ::comphealth::AGG* release_died();
  inline void set_allocated_died(::comphealth::AGG* died);

  // repeated .comphealth.Exclusion provenance = 8;
  inline int provenance_size() const;
  inline void clear_provenance();
  static const int kProvenanceFieldNumber = 8;
  inline const ::comphealth::Exclusion& provenance(int index) const;
  inline ::comphealth::Exclusion* mutable_provenance(int index);
  inline ::comphealth::Exclusion* add_provenance();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >&
      provenance() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >*
      mutable_provenance();

  // required bool linked = 9;
  inline bool has_linked() const;
  inline void clear_linked();
  static const int kLinkedFieldNumber = 9;
  inline bool linked() const;
  inline void set_linked(bool value);

  // @@protoc_insertion_point(class_scope:comphealth.RNode)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ktype();
  inline void clear_has_ktype();
  inline void set_has_dataset();
  inline void clear_has_dataset();
  inline void set_has_all();
  inline void clear_has_all();
  inline void set_has_discharged();
  inline void clear_has_discharged();
  inline void set_has_transferred();
  inline void clear_has_transferred();
  inline void set_has_died();
  inline void clear_has_died();
  inline void set_has_linked();
  inline void clear_has_linked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* dataset_;
  ::comphealth::AGG* all_;
  ::comphealth::AGG* discharged_;
  int ktype_;
  bool linked_;
  ::comphealth::AGG* transferred_;
  ::comphealth::AGG* died_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion > provenance_;
  friend void  protobuf_AddDesc_pn2_2eproto();
  friend void protobuf_AssignDesc_pn2_2eproto();
  friend void protobuf_ShutdownFile_pn2_2eproto();

  void InitAsDefaultInstance();
  static RNode* default_instance_;
};
// ===================================================================


// ===================================================================

// REntry

// required string key = 11;
inline bool REntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& REntry::key() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.key)
  return *key_;
}
inline void REntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.REntry.key)
}
inline void REntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.REntry.key)
}
inline void REntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.REntry.key)
}
inline ::std::string* REntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.key)
  return key_;
}
inline ::std::string* REntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void REntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.key)
}

// required string initial_key = 1;
inline bool REntry::has_initial_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REntry::set_has_initial_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REntry::clear_has_initial_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REntry::clear_initial_key() {
  if (initial_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initial_key_->clear();
  }
  clear_has_initial_key();
}
inline const ::std::string& REntry::initial_key() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.initial_key)
  return *initial_key_;
}
inline void REntry::set_initial_key(const ::std::string& value) {
  set_has_initial_key();
  if (initial_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initial_key_ = new ::std::string;
  }
  initial_key_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.REntry.initial_key)
}
inline void REntry::set_initial_key(const char* value) {
  set_has_initial_key();
  if (initial_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initial_key_ = new ::std::string;
  }
  initial_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.REntry.initial_key)
}
inline void REntry::set_initial_key(const char* value, size_t size) {
  set_has_initial_key();
  if (initial_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initial_key_ = new ::std::string;
  }
  initial_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.REntry.initial_key)
}
inline ::std::string* REntry::mutable_initial_key() {
  set_has_initial_key();
  if (initial_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initial_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.initial_key)
  return initial_key_;
}
inline ::std::string* REntry::release_initial_key() {
  clear_has_initial_key();
  if (initial_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initial_key_;
    initial_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void REntry::set_allocated_initial_key(::std::string* initial_key) {
  if (initial_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initial_key_;
  }
  if (initial_key) {
    set_has_initial_key();
    initial_key_ = initial_key;
  } else {
    clear_has_initial_key();
    initial_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.initial_key)
}

// required string sub_key = 2;
inline bool REntry::has_sub_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REntry::set_has_sub_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REntry::clear_has_sub_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REntry::clear_sub_key() {
  if (sub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_key_->clear();
  }
  clear_has_sub_key();
}
inline const ::std::string& REntry::sub_key() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.sub_key)
  return *sub_key_;
}
inline void REntry::set_sub_key(const ::std::string& value) {
  set_has_sub_key();
  if (sub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_key_ = new ::std::string;
  }
  sub_key_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.REntry.sub_key)
}
inline void REntry::set_sub_key(const char* value) {
  set_has_sub_key();
  if (sub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_key_ = new ::std::string;
  }
  sub_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.REntry.sub_key)
}
inline void REntry::set_sub_key(const char* value, size_t size) {
  set_has_sub_key();
  if (sub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_key_ = new ::std::string;
  }
  sub_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.REntry.sub_key)
}
inline ::std::string* REntry::mutable_sub_key() {
  set_has_sub_key();
  if (sub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.sub_key)
  return sub_key_;
}
inline ::std::string* REntry::release_sub_key() {
  clear_has_sub_key();
  if (sub_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sub_key_;
    sub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void REntry::set_allocated_sub_key(::std::string* sub_key) {
  if (sub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sub_key_;
  }
  if (sub_key) {
    set_has_sub_key();
    sub_key_ = sub_key;
  } else {
    clear_has_sub_key();
    sub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.sub_key)
}

// optional string dataset = 3;
inline bool REntry::has_dataset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REntry::set_has_dataset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REntry::clear_has_dataset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REntry::clear_dataset() {
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_->clear();
  }
  clear_has_dataset();
}
inline const ::std::string& REntry::dataset() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.dataset)
  return *dataset_;
}
inline void REntry::set_dataset(const ::std::string& value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.REntry.dataset)
}
inline void REntry::set_dataset(const char* value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.REntry.dataset)
}
inline void REntry::set_dataset(const char* value, size_t size) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.REntry.dataset)
}
inline ::std::string* REntry::mutable_dataset() {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.dataset)
  return dataset_;
}
inline ::std::string* REntry::release_dataset() {
  clear_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dataset_;
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void REntry::set_allocated_dataset(::std::string* dataset) {
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (dataset) {
    set_has_dataset();
    dataset_ = dataset;
  } else {
    clear_has_dataset();
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.dataset)
}

// optional int32 delta = 8;
inline bool REntry::has_delta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void REntry::set_has_delta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void REntry::clear_has_delta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void REntry::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline ::google::protobuf::int32 REntry::delta() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.delta)
  return delta_;
}
inline void REntry::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:comphealth.REntry.delta)
}

// required .comphealth.AGG initial = 4;
inline bool REntry::has_initial() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void REntry::set_has_initial() {
  _has_bits_[0] |= 0x00000020u;
}
inline void REntry::clear_has_initial() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void REntry::clear_initial() {
  if (initial_ != NULL) initial_->::comphealth::AGG::Clear();
  clear_has_initial();
}
inline const ::comphealth::AGG& REntry::initial() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.initial)
  return initial_ != NULL ? *initial_ : *default_instance_->initial_;
}
inline ::comphealth::AGG* REntry::mutable_initial() {
  set_has_initial();
  if (initial_ == NULL) initial_ = new ::comphealth::AGG;
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.initial)
  return initial_;
}
inline ::comphealth::AGG* REntry::release_initial() {
  clear_has_initial();
  ::comphealth::AGG* temp = initial_;
  initial_ = NULL;
  return temp;
}
inline void REntry::set_allocated_initial(::comphealth::AGG* initial) {
  delete initial_;
  initial_ = initial;
  if (initial) {
    set_has_initial();
  } else {
    clear_has_initial();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.initial)
}

// required .comphealth.AGG sub = 5;
inline bool REntry::has_sub() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void REntry::set_has_sub() {
  _has_bits_[0] |= 0x00000040u;
}
inline void REntry::clear_has_sub() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void REntry::clear_sub() {
  if (sub_ != NULL) sub_->::comphealth::AGG::Clear();
  clear_has_sub();
}
inline const ::comphealth::AGG& REntry::sub() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.sub)
  return sub_ != NULL ? *sub_ : *default_instance_->sub_;
}
inline ::comphealth::AGG* REntry::mutable_sub() {
  set_has_sub();
  if (sub_ == NULL) sub_ = new ::comphealth::AGG;
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.sub)
  return sub_;
}
inline ::comphealth::AGG* REntry::release_sub() {
  clear_has_sub();
  ::comphealth::AGG* temp = sub_;
  sub_ = NULL;
  return temp;
}
inline void REntry::set_allocated_sub(::comphealth::AGG* sub) {
  delete sub_;
  sub_ = sub;
  if (sub) {
    set_has_sub();
  } else {
    clear_has_sub();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.sub)
}

// required .comphealth.IntHist deltah = 6;
inline bool REntry::has_deltah() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void REntry::set_has_deltah() {
  _has_bits_[0] |= 0x00000080u;
}
inline void REntry::clear_has_deltah() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void REntry::clear_deltah() {
  if (deltah_ != NULL) deltah_->::comphealth::IntHist::Clear();
  clear_has_deltah();
}
inline const ::comphealth::IntHist& REntry::deltah() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.deltah)
  return deltah_ != NULL ? *deltah_ : *default_instance_->deltah_;
}
inline ::comphealth::IntHist* REntry::mutable_deltah() {
  set_has_deltah();
  if (deltah_ == NULL) deltah_ = new ::comphealth::IntHist;
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.deltah)
  return deltah_;
}
inline ::comphealth::IntHist* REntry::release_deltah() {
  clear_has_deltah();
  ::comphealth::IntHist* temp = deltah_;
  deltah_ = NULL;
  return temp;
}
inline void REntry::set_allocated_deltah(::comphealth::IntHist* deltah) {
  delete deltah_;
  deltah_ = deltah;
  if (deltah) {
    set_has_deltah();
  } else {
    clear_has_deltah();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.deltah)
}

// required .comphealth.IntHist deltaweekh = 12;
inline bool REntry::has_deltaweekh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void REntry::set_has_deltaweekh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void REntry::clear_has_deltaweekh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void REntry::clear_deltaweekh() {
  if (deltaweekh_ != NULL) deltaweekh_->::comphealth::IntHist::Clear();
  clear_has_deltaweekh();
}
inline const ::comphealth::IntHist& REntry::deltaweekh() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.deltaweekh)
  return deltaweekh_ != NULL ? *deltaweekh_ : *default_instance_->deltaweekh_;
}
inline ::comphealth::IntHist* REntry::mutable_deltaweekh() {
  set_has_deltaweekh();
  if (deltaweekh_ == NULL) deltaweekh_ = new ::comphealth::IntHist;
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.deltaweekh)
  return deltaweekh_;
}
inline ::comphealth::IntHist* REntry::release_deltaweekh() {
  clear_has_deltaweekh();
  ::comphealth::IntHist* temp = deltaweekh_;
  deltaweekh_ = NULL;
  return temp;
}
inline void REntry::set_allocated_deltaweekh(::comphealth::IntHist* deltaweekh) {
  delete deltaweekh_;
  deltaweekh_ = deltaweekh;
  if (deltaweekh) {
    set_has_deltaweekh();
  } else {
    clear_has_deltaweekh();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.REntry.deltaweekh)
}

// repeated .comphealth.Exclusion provenance = 7;
inline int REntry::provenance_size() const {
  return provenance_.size();
}
inline void REntry::clear_provenance() {
  provenance_.Clear();
}
inline const ::comphealth::Exclusion& REntry::provenance(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.provenance)
  return provenance_.Get(index);
}
inline ::comphealth::Exclusion* REntry::mutable_provenance(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.REntry.provenance)
  return provenance_.Mutable(index);
}
inline ::comphealth::Exclusion* REntry::add_provenance() {
  // @@protoc_insertion_point(field_add:comphealth.REntry.provenance)
  return provenance_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >&
REntry::provenance() const {
  // @@protoc_insertion_point(field_list:comphealth.REntry.provenance)
  return provenance_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >*
REntry::mutable_provenance() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.REntry.provenance)
  return &provenance_;
}

// required .comphealth.KEYTYPE initial_ktype = 9;
inline bool REntry::has_initial_ktype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void REntry::set_has_initial_ktype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void REntry::clear_has_initial_ktype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void REntry::clear_initial_ktype() {
  initial_ktype_ = 120;
  clear_has_initial_ktype();
}
inline ::comphealth::KEYTYPE REntry::initial_ktype() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.initial_ktype)
  return static_cast< ::comphealth::KEYTYPE >(initial_ktype_);
}
inline void REntry::set_initial_ktype(::comphealth::KEYTYPE value) {
  assert(::comphealth::KEYTYPE_IsValid(value));
  set_has_initial_ktype();
  initial_ktype_ = value;
  // @@protoc_insertion_point(field_set:comphealth.REntry.initial_ktype)
}

// required .comphealth.KEYTYPE sub_ktype = 10;
inline bool REntry::has_sub_ktype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void REntry::set_has_sub_ktype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void REntry::clear_has_sub_ktype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void REntry::clear_sub_ktype() {
  sub_ktype_ = 120;
  clear_has_sub_ktype();
}
inline ::comphealth::KEYTYPE REntry::sub_ktype() const {
  // @@protoc_insertion_point(field_get:comphealth.REntry.sub_ktype)
  return static_cast< ::comphealth::KEYTYPE >(sub_ktype_);
}
inline void REntry::set_sub_ktype(::comphealth::KEYTYPE value) {
  assert(::comphealth::KEYTYPE_IsValid(value));
  set_has_sub_ktype();
  sub_ktype_ = value;
  // @@protoc_insertion_point(field_set:comphealth.REntry.sub_ktype)
}

// -------------------------------------------------------------------

// RNode

// required string key = 1;
inline bool RNode::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RNode::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RNode::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RNode::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& RNode::key() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.key)
  return *key_;
}
inline void RNode::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.RNode.key)
}
inline void RNode::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.RNode.key)
}
inline void RNode::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.RNode.key)
}
inline ::std::string* RNode::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.RNode.key)
  return key_;
}
inline ::std::string* RNode::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RNode::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.RNode.key)
}

// required .comphealth.KEYTYPE ktype = 2;
inline bool RNode::has_ktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RNode::set_has_ktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RNode::clear_has_ktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RNode::clear_ktype() {
  ktype_ = 120;
  clear_has_ktype();
}
inline ::comphealth::KEYTYPE RNode::ktype() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.ktype)
  return static_cast< ::comphealth::KEYTYPE >(ktype_);
}
inline void RNode::set_ktype(::comphealth::KEYTYPE value) {
  assert(::comphealth::KEYTYPE_IsValid(value));
  set_has_ktype();
  ktype_ = value;
  // @@protoc_insertion_point(field_set:comphealth.RNode.ktype)
}

// optional string dataset = 3;
inline bool RNode::has_dataset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RNode::set_has_dataset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RNode::clear_has_dataset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RNode::clear_dataset() {
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_->clear();
  }
  clear_has_dataset();
}
inline const ::std::string& RNode::dataset() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.dataset)
  return *dataset_;
}
inline void RNode::set_dataset(const ::std::string& value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.RNode.dataset)
}
inline void RNode::set_dataset(const char* value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.RNode.dataset)
}
inline void RNode::set_dataset(const char* value, size_t size) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.RNode.dataset)
}
inline ::std::string* RNode::mutable_dataset() {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dataset_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.RNode.dataset)
  return dataset_;
}
inline ::std::string* RNode::release_dataset() {
  clear_has_dataset();
  if (dataset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dataset_;
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RNode::set_allocated_dataset(::std::string* dataset) {
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (dataset) {
    set_has_dataset();
    dataset_ = dataset;
  } else {
    clear_has_dataset();
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.RNode.dataset)
}

// required .comphealth.AGG all = 4;
inline bool RNode::has_all() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RNode::set_has_all() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RNode::clear_has_all() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RNode::clear_all() {
  if (all_ != NULL) all_->::comphealth::AGG::Clear();
  clear_has_all();
}
inline const ::comphealth::AGG& RNode::all() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.all)
  return all_ != NULL ? *all_ : *default_instance_->all_;
}
inline ::comphealth::AGG* RNode::mutable_all() {
  set_has_all();
  if (all_ == NULL) all_ = new ::comphealth::AGG;
  // @@protoc_insertion_point(field_mutable:comphealth.RNode.all)
  return all_;
}
inline ::comphealth::AGG* RNode::release_all() {
  clear_has_all();
  ::comphealth::AGG* temp = all_;
  all_ = NULL;
  return temp;
}
inline void RNode::set_allocated_all(::comphealth::AGG* all) {
  delete all_;
  all_ = all;
  if (all) {
    set_has_all();
  } else {
    clear_has_all();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.RNode.all)
}

// optional .comphealth.AGG discharged = 5;
inline bool RNode::has_discharged() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RNode::set_has_discharged() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RNode::clear_has_discharged() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RNode::clear_discharged() {
  if (discharged_ != NULL) discharged_->::comphealth::AGG::Clear();
  clear_has_discharged();
}
inline const ::comphealth::AGG& RNode::discharged() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.discharged)
  return discharged_ != NULL ? *discharged_ : *default_instance_->discharged_;
}
inline ::comphealth::AGG* RNode::mutable_discharged() {
  set_has_discharged();
  if (discharged_ == NULL) discharged_ = new ::comphealth::AGG;
  // @@protoc_insertion_point(field_mutable:comphealth.RNode.discharged)
  return discharged_;
}
inline ::comphealth::AGG* RNode::release_discharged() {
  clear_has_discharged();
  ::comphealth::AGG* temp = discharged_;
  discharged_ = NULL;
  return temp;
}
inline void RNode::set_allocated_discharged(::comphealth::AGG* discharged) {
  delete discharged_;
  discharged_ = discharged;
  if (discharged) {
    set_has_discharged();
  } else {
    clear_has_discharged();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.RNode.discharged)
}

// optional .comphealth.AGG transferred = 6;
inline bool RNode::has_transferred() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RNode::set_has_transferred() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RNode::clear_has_transferred() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RNode::clear_transferred() {
  if (transferred_ != NULL) transferred_->::comphealth::AGG::Clear();
  clear_has_transferred();
}
inline const ::comphealth::AGG& RNode::transferred() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.transferred)
  return transferred_ != NULL ? *transferred_ : *default_instance_->transferred_;
}
inline ::comphealth::AGG* RNode::mutable_transferred() {
  set_has_transferred();
  if (transferred_ == NULL) transferred_ = new ::comphealth::AGG;
  // @@protoc_insertion_point(field_mutable:comphealth.RNode.transferred)
  return transferred_;
}
inline ::comphealth::AGG* RNode::release_transferred() {
  clear_has_transferred();
  ::comphealth::AGG* temp = transferred_;
  transferred_ = NULL;
  return temp;
}
inline void RNode::set_allocated_transferred(::comphealth::AGG* transferred) {
  delete transferred_;
  transferred_ = transferred;
  if (transferred) {
    set_has_transferred();
  } else {
    clear_has_transferred();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.RNode.transferred)
}

// optional .comphealth.AGG died = 7;
inline bool RNode::has_died() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RNode::set_has_died() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RNode::clear_has_died() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RNode::clear_died() {
  if (died_ != NULL) died_->::comphealth::AGG::Clear();
  clear_has_died();
}
inline const ::comphealth::AGG& RNode::died() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.died)
  return died_ != NULL ? *died_ : *default_instance_->died_;
}
inline ::comphealth::AGG* RNode::mutable_died() {
  set_has_died();
  if (died_ == NULL) died_ = new ::comphealth::AGG;
  // @@protoc_insertion_point(field_mutable:comphealth.RNode.died)
  return died_;
}
inline ::comphealth::AGG* RNode::release_died() {
  clear_has_died();
  ::comphealth::AGG* temp = died_;
  died_ = NULL;
  return temp;
}
inline void RNode::set_allocated_died(::comphealth::AGG* died) {
  delete died_;
  died_ = died;
  if (died) {
    set_has_died();
  } else {
    clear_has_died();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.RNode.died)
}

// repeated .comphealth.Exclusion provenance = 8;
inline int RNode::provenance_size() const {
  return provenance_.size();
}
inline void RNode::clear_provenance() {
  provenance_.Clear();
}
inline const ::comphealth::Exclusion& RNode::provenance(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.provenance)
  return provenance_.Get(index);
}
inline ::comphealth::Exclusion* RNode::mutable_provenance(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.RNode.provenance)
  return provenance_.Mutable(index);
}
inline ::comphealth::Exclusion* RNode::add_provenance() {
  // @@protoc_insertion_point(field_add:comphealth.RNode.provenance)
  return provenance_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >&
RNode::provenance() const {
  // @@protoc_insertion_point(field_list:comphealth.RNode.provenance)
  return provenance_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::Exclusion >*
RNode::mutable_provenance() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.RNode.provenance)
  return &provenance_;
}

// required bool linked = 9;
inline bool RNode::has_linked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RNode::set_has_linked() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RNode::clear_has_linked() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RNode::clear_linked() {
  linked_ = false;
  clear_has_linked();
}
inline bool RNode::linked() const {
  // @@protoc_insertion_point(field_get:comphealth.RNode.linked)
  return linked_;
}
inline void RNode::set_linked(bool value) {
  set_has_linked();
  linked_ = value;
  // @@protoc_insertion_point(field_set:comphealth.RNode.linked)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::comphealth::KEYTYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comphealth::KEYTYPE>() {
  return ::comphealth::KEYTYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pn2_2eproto__INCLUDED

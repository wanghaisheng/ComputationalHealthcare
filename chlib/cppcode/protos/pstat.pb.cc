// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pstat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pstat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comphealth {

namespace {

const ::google::protobuf::Descriptor* PAGG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PAGG_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSubsets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSubsets_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitDeltaHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitDeltaHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AGG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AGG_reflection_ = NULL;
const ::google::protobuf::Descriptor* Policy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Policy_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVII_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVII_reflection_ = NULL;
const ::google::protobuf::Descriptor* DXI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DXI_reflection_ = NULL;
const ::google::protobuf::Descriptor* DispositionHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DispositionHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* EtypeHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EtypeHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* EtypeCountHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EtypeCountHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* SourceHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SourceHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayerHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayerHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeathHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeathHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* SexHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SexHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* DNRHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DNRHist_reflection_ = NULL;
const ::google::protobuf::Descriptor* PZipHist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PZipHist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pstat_2eproto() {
  protobuf_AddDesc_pstat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pstat.proto");
  GOOGLE_CHECK(file != NULL);
  PAGG_descriptor_ = file->message_type(0);
  static const int PAGG_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, unlinked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, patient_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, visit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, linked_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, unlinked_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, subsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, delta_hist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, delta_error_hist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, count_hist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, edge_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, negative_delta_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, policy_),
  };
  PAGG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PAGG_descriptor_,
      PAGG::default_instance_,
      PAGG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAGG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PAGG));
  PSubsets_descriptor_ = file->message_type(1);
  static const int PSubsets_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSubsets, linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSubsets, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSubsets, subset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSubsets, k_),
  };
  PSubsets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSubsets_descriptor_,
      PSubsets::default_instance_,
      PSubsets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSubsets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSubsets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSubsets));
  VisitDeltaHist_descriptor_ = file->message_type(2);
  static const int VisitDeltaHist_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitDeltaHist, initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitDeltaHist, sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitDeltaHist, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitDeltaHist, v_),
  };
  VisitDeltaHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisitDeltaHist_descriptor_,
      VisitDeltaHist::default_instance_,
      VisitDeltaHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitDeltaHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitDeltaHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisitDeltaHist));
  AGG_descriptor_ = file->message_type(3);
  static const int AGG_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, mini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, charges_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, charges_den_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, ageh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, sexh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, raceh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, sourceh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, disph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, payerh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, deathh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, dxh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, primary_prh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, prh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, exh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, drgh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, losh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, dnrh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, pziph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, agedh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, yearh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, vtypeh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, facilityh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, dataset_),
  };
  AGG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AGG_descriptor_,
      AGG::default_instance_,
      AGG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AGG));
  Policy_descriptor_ = file->message_type(4);
  static const int Policy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, min_hospital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, min_subset_),
  };
  Policy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Policy_descriptor_,
      Policy::default_instance_,
      Policy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Policy));
  IntHist_descriptor_ = file->message_type(5);
  static const int IntHist_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntHist, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntHist, median_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntHist, fq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntHist, tq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntHist, mean_),
  };
  IntHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntHist_descriptor_,
      IntHist::default_instance_,
      IntHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntHist));
  KVII_descriptor_ = file->message_type(6);
  static const int KVII_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVII, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVII, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVII, s_),
  };
  KVII_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVII_descriptor_,
      KVII::default_instance_,
      KVII_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVII, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVII, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVII));
  DXI_descriptor_ = file->message_type(7);
  static const int DXI_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, primary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, poa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, s_),
  };
  DXI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DXI_descriptor_,
      DXI::default_instance_,
      DXI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DXI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DXI));
  DispositionHist_descriptor_ = file->message_type(8);
  static const int DispositionHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispositionHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispositionHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispositionHist, s_),
  };
  DispositionHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DispositionHist_descriptor_,
      DispositionHist::default_instance_,
      DispositionHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispositionHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispositionHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DispositionHist));
  EtypeHist_descriptor_ = file->message_type(9);
  static const int EtypeHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeHist, s_),
  };
  EtypeHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EtypeHist_descriptor_,
      EtypeHist::default_instance_,
      EtypeHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EtypeHist));
  EtypeCountHist_descriptor_ = file->message_type(10);
  static const int EtypeCountHist_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeCountHist, linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeCountHist, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeCountHist, ed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeCountHist, asg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeCountHist, v_),
  };
  EtypeCountHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EtypeCountHist_descriptor_,
      EtypeCountHist::default_instance_,
      EtypeCountHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeCountHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtypeCountHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EtypeCountHist));
  SourceHist_descriptor_ = file->message_type(11);
  static const int SourceHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceHist, s_),
  };
  SourceHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SourceHist_descriptor_,
      SourceHist::default_instance_,
      SourceHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SourceHist));
  PayerHist_descriptor_ = file->message_type(12);
  static const int PayerHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayerHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayerHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayerHist, s_),
  };
  PayerHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayerHist_descriptor_,
      PayerHist::default_instance_,
      PayerHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayerHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayerHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayerHist));
  RaceHist_descriptor_ = file->message_type(13);
  static const int RaceHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceHist, s_),
  };
  RaceHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceHist_descriptor_,
      RaceHist::default_instance_,
      RaceHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceHist));
  DeathHist_descriptor_ = file->message_type(14);
  static const int DeathHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathHist, s_),
  };
  DeathHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeathHist_descriptor_,
      DeathHist::default_instance_,
      DeathHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeathHist));
  SexHist_descriptor_ = file->message_type(15);
  static const int SexHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SexHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SexHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SexHist, s_),
  };
  SexHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SexHist_descriptor_,
      SexHist::default_instance_,
      SexHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SexHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SexHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SexHist));
  DNRHist_descriptor_ = file->message_type(16);
  static const int DNRHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNRHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNRHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNRHist, s_),
  };
  DNRHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DNRHist_descriptor_,
      DNRHist::default_instance_,
      DNRHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNRHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNRHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DNRHist));
  PZipHist_descriptor_ = file->message_type(17);
  static const int PZipHist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PZipHist, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PZipHist, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PZipHist, s_),
  };
  PZipHist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PZipHist_descriptor_,
      PZipHist::default_instance_,
      PZipHist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PZipHist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PZipHist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PZipHist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pstat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PAGG_descriptor_, &PAGG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSubsets_descriptor_, &PSubsets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisitDeltaHist_descriptor_, &VisitDeltaHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AGG_descriptor_, &AGG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Policy_descriptor_, &Policy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntHist_descriptor_, &IntHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVII_descriptor_, &KVII::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DXI_descriptor_, &DXI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DispositionHist_descriptor_, &DispositionHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EtypeHist_descriptor_, &EtypeHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EtypeCountHist_descriptor_, &EtypeCountHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SourceHist_descriptor_, &SourceHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayerHist_descriptor_, &PayerHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceHist_descriptor_, &RaceHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeathHist_descriptor_, &DeathHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SexHist_descriptor_, &SexHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DNRHist_descriptor_, &DNRHist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PZipHist_descriptor_, &PZipHist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pstat_2eproto() {
  delete PAGG::default_instance_;
  delete PAGG_reflection_;
  delete PSubsets::default_instance_;
  delete PSubsets_reflection_;
  delete VisitDeltaHist::default_instance_;
  delete VisitDeltaHist_reflection_;
  delete AGG::default_instance_;
  delete AGG_reflection_;
  delete Policy::default_instance_;
  delete Policy_reflection_;
  delete IntHist::default_instance_;
  delete IntHist_reflection_;
  delete KVII::default_instance_;
  delete KVII_reflection_;
  delete DXI::default_instance_;
  delete DXI_reflection_;
  delete DispositionHist::default_instance_;
  delete DispositionHist_reflection_;
  delete EtypeHist::default_instance_;
  delete EtypeHist_reflection_;
  delete EtypeCountHist::default_instance_;
  delete EtypeCountHist_reflection_;
  delete SourceHist::default_instance_;
  delete SourceHist_reflection_;
  delete PayerHist::default_instance_;
  delete PayerHist_reflection_;
  delete RaceHist::default_instance_;
  delete RaceHist_reflection_;
  delete DeathHist::default_instance_;
  delete DeathHist_reflection_;
  delete SexHist::default_instance_;
  delete SexHist_reflection_;
  delete DNRHist::default_instance_;
  delete DNRHist_reflection_;
  delete PZipHist::default_instance_;
  delete PZipHist_reflection_;
}

void protobuf_AddDesc_pstat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comphealth::protobuf_AddDesc_penums_2eproto();
  ::comphealth::protobuf_AddDesc_pvisit_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013pstat.proto\022\ncomphealth\032\014penums.proto\032"
    "\014pvisit.proto\"\263\003\n\004PAGG\022\013\n\003key\030\001 \002(\t\022\017\n\007d"
    "ataset\030\002 \001(\t\022\016\n\006linked\030\003 \002(\010\022\020\n\010unlinked"
    "\030\004 \002(\010\022\025\n\rpatient_count\030\006 \002(\005\022\023\n\013visit_c"
    "ount\030\007 \002(\005\022\024\n\014linked_count\030\010 \002(\005\022\026\n\016unli"
    "nked_count\030\t \002(\005\022%\n\007subsets\030\n \003(\0132\024.comp"
    "health.PSubsets\022.\n\ndelta_hist\030\013 \003(\0132\032.co"
    "mphealth.VisitDeltaHist\0224\n\020delta_error_h"
    "ist\030\r \003(\0132\032.comphealth.VisitDeltaHist\022.\n"
    "\ncount_hist\030\014 \003(\0132\032.comphealth.EtypeCoun"
    "tHist\022\022\n\nedge_count\030\016 \001(\005\022\034\n\024negative_de"
    "lta_count\030\017 \001(\005\022\"\n\006policy\030\020 \002(\0132\022.comphe"
    "alth.Policy\"h\n\010PSubsets\022\016\n\006linked\030\001 \002(\010\022"
    " \n\005vtype\030\002 \002(\0162\021.comphealth.ETYPE\022\037\n\006sub"
    "set\030\003 \002(\0132\017.comphealth.AGG\022\t\n\001k\030\004 \001(\t\"n\n"
    "\016VisitDeltaHist\022\"\n\007initial\030\001 \002(\0162\021.comph"
    "ealth.ETYPE\022\036\n\003sub\030\002 \002(\0162\021.comphealth.ET"
    "YPE\022\r\n\005delta\030\003 \002(\005\022\t\n\001v\030\004 \002(\005\"\254\006\n\003AGG\022\013\n"
    "\003key\030\001 \002(\t\022\023\n\004mini\030\032 \002(\010:\005false\022\020\n\005count"
    "\030\002 \001(\005:\0010\022\"\n\006policy\030! \002(\0132\022.comphealth.P"
    "olicy\022\023\n\013charges_num\030\037 \001(\003\022\023\n\013charges_de"
    "n\030  \001(\003\022!\n\004ageh\030\003 \001(\0132\023.comphealth.IntHi"
    "st\022!\n\004sexh\030\004 \003(\0132\023.comphealth.SexHist\022#\n"
    "\005raceh\030\005 \003(\0132\024.comphealth.RaceHist\022\'\n\007so"
    "urceh\030\006 \003(\0132\026.comphealth.SourceHist\022*\n\005d"
    "isph\030\007 \003(\0132\033.comphealth.DispositionHist\022"
    "%\n\006payerh\030\010 \003(\0132\025.comphealth.PayerHist\022%"
    "\n\006deathh\030\t \003(\0132\025.comphealth.DeathHist\022\034\n"
    "\003dxh\030\n \003(\0132\017.comphealth.DXI\022$\n\013primary_p"
    "rh\030\013 \003(\0132\017.comphealth.KVI\022\034\n\003prh\030\r \003(\0132\017"
    ".comphealth.KVI\022\034\n\003exh\030\016 \003(\0132\017.comphealt"
    "h.KVI\022\035\n\004drgh\030\017 \003(\0132\017.comphealth.KVI\022!\n\004"
    "losh\030\020 \001(\0132\023.comphealth.IntHist\022!\n\004dnrh\030"
    "\022 \003(\0132\023.comphealth.DNRHist\022#\n\005pziph\030\023 \003("
    "\0132\024.comphealth.PZipHist\022\037\n\005agedh\030\025 \003(\0132\020"
    ".comphealth.KVII\022\037\n\005yearh\030\026 \003(\0132\020.comphe"
    "alth.KVII\022%\n\006vtypeh\030\027 \003(\0132\025.comphealth.E"
    "typeHist\022\021\n\tfacilityh\030\030 \003(\t\022\017\n\007dataset\030\031"
    " \001(\t\"S\n\006Policy\022\021\n\tmin_count\030\001 \002(\005\022\024\n\014min"
    "_hospital\030\002 \002(\005\022\014\n\004base\030\003 \002(\005\022\022\n\nmin_sub"
    "set\030\004 \002(\005\"\\\n\007IntHist\022\033\n\001h\030\001 \003(\0132\020.comphe"
    "alth.KVII\022\016\n\006median\030\002 \001(\005\022\n\n\002fq\030\003 \001(\005\022\n\n"
    "\002tq\030\004 \001(\005\022\014\n\004mean\030\005 \001(\002\"\'\n\004KVII\022\t\n\001k\030\001 \002"
    "(\005\022\t\n\001v\030\002 \002(\005\022\t\n\001s\030\003 \001(\t\"Q\n\003DXI\022\t\n\001k\030\001 \002"
    "(\t\022\017\n\007primary\030\002 \001(\005\022\013\n\003poa\030\003 \001(\005\022\013\n\003all\030"
    "\004 \001(\005\022\t\n\001c\030\005 \001(\t\022\t\n\001s\030\006 \001(\t\"K\n\017Dispositi"
    "onHist\022\"\n\001k\030\001 \002(\0162\027.comphealth.DISPOSITI"
    "ON\022\t\n\001v\030\002 \002(\005\022\t\n\001s\030\003 \001(\t\"\?\n\tEtypeHist\022\034\n"
    "\001k\030\001 \002(\0162\021.comphealth.ETYPE\022\t\n\001v\030\002 \002(\005\022\t"
    "\n\001s\030\003 \001(\t\"P\n\016EtypeCountHist\022\016\n\006linked\030\005 "
    "\002(\010\022\n\n\002ip\030\001 \002(\005\022\n\n\002ed\030\002 \002(\005\022\013\n\003asg\030\003 \002(\005"
    "\022\t\n\001v\030\004 \002(\005\"A\n\nSourceHist\022\035\n\001k\030\001 \002(\0162\022.c"
    "omphealth.SOURCE\022\t\n\001v\030\002 \002(\005\022\t\n\001s\030\003 \001(\t\"\?"
    "\n\tPayerHist\022\034\n\001k\030\001 \002(\0162\021.comphealth.PAYE"
    "R\022\t\n\001v\030\002 \002(\005\022\t\n\001s\030\003 \001(\t\"=\n\010RaceHist\022\033\n\001k"
    "\030\001 \002(\0162\020.comphealth.RACE\022\t\n\001v\030\002 \002(\005\022\t\n\001s"
    "\030\003 \001(\t\"\?\n\tDeathHist\022\034\n\001k\030\001 \002(\0162\021.comphea"
    "lth.DEATH\022\t\n\001v\030\002 \002(\005\022\t\n\001s\030\003 \001(\t\";\n\007SexHi"
    "st\022\032\n\001k\030\001 \002(\0162\017.comphealth.SEX\022\t\n\001v\030\002 \002("
    "\005\022\t\n\001s\030\003 \001(\t\";\n\007DNRHist\022\032\n\001k\030\001 \002(\0162\017.com"
    "phealth.DNR\022\t\n\001v\030\002 \002(\005\022\t\n\001s\030\003 \001(\t\"=\n\010PZi"
    "pHist\022\033\n\001k\030\001 \002(\0162\020.comphealth.PZIP\022\t\n\001v\030"
    "\002 \002(\005\022\t\n\001s\030\003 \001(\t", 2496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pstat.proto", &protobuf_RegisterTypes);
  PAGG::default_instance_ = new PAGG();
  PSubsets::default_instance_ = new PSubsets();
  VisitDeltaHist::default_instance_ = new VisitDeltaHist();
  AGG::default_instance_ = new AGG();
  Policy::default_instance_ = new Policy();
  IntHist::default_instance_ = new IntHist();
  KVII::default_instance_ = new KVII();
  DXI::default_instance_ = new DXI();
  DispositionHist::default_instance_ = new DispositionHist();
  EtypeHist::default_instance_ = new EtypeHist();
  EtypeCountHist::default_instance_ = new EtypeCountHist();
  SourceHist::default_instance_ = new SourceHist();
  PayerHist::default_instance_ = new PayerHist();
  RaceHist::default_instance_ = new RaceHist();
  DeathHist::default_instance_ = new DeathHist();
  SexHist::default_instance_ = new SexHist();
  DNRHist::default_instance_ = new DNRHist();
  PZipHist::default_instance_ = new PZipHist();
  PAGG::default_instance_->InitAsDefaultInstance();
  PSubsets::default_instance_->InitAsDefaultInstance();
  VisitDeltaHist::default_instance_->InitAsDefaultInstance();
  AGG::default_instance_->InitAsDefaultInstance();
  Policy::default_instance_->InitAsDefaultInstance();
  IntHist::default_instance_->InitAsDefaultInstance();
  KVII::default_instance_->InitAsDefaultInstance();
  DXI::default_instance_->InitAsDefaultInstance();
  DispositionHist::default_instance_->InitAsDefaultInstance();
  EtypeHist::default_instance_->InitAsDefaultInstance();
  EtypeCountHist::default_instance_->InitAsDefaultInstance();
  SourceHist::default_instance_->InitAsDefaultInstance();
  PayerHist::default_instance_->InitAsDefaultInstance();
  RaceHist::default_instance_->InitAsDefaultInstance();
  DeathHist::default_instance_->InitAsDefaultInstance();
  SexHist::default_instance_->InitAsDefaultInstance();
  DNRHist::default_instance_->InitAsDefaultInstance();
  PZipHist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pstat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pstat_2eproto {
  StaticDescriptorInitializer_pstat_2eproto() {
    protobuf_AddDesc_pstat_2eproto();
  }
} static_descriptor_initializer_pstat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PAGG::kKeyFieldNumber;
const int PAGG::kDatasetFieldNumber;
const int PAGG::kLinkedFieldNumber;
const int PAGG::kUnlinkedFieldNumber;
const int PAGG::kPatientCountFieldNumber;
const int PAGG::kVisitCountFieldNumber;
const int PAGG::kLinkedCountFieldNumber;
const int PAGG::kUnlinkedCountFieldNumber;
const int PAGG::kSubsetsFieldNumber;
const int PAGG::kDeltaHistFieldNumber;
const int PAGG::kDeltaErrorHistFieldNumber;
const int PAGG::kCountHistFieldNumber;
const int PAGG::kEdgeCountFieldNumber;
const int PAGG::kNegativeDeltaCountFieldNumber;
const int PAGG::kPolicyFieldNumber;
#endif  // !_MSC_VER

PAGG::PAGG()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PAGG)
}

void PAGG::InitAsDefaultInstance() {
  policy_ = const_cast< ::comphealth::Policy*>(&::comphealth::Policy::default_instance());
}

PAGG::PAGG(const PAGG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PAGG)
}

void PAGG::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linked_ = false;
  unlinked_ = false;
  patient_count_ = 0;
  visit_count_ = 0;
  linked_count_ = 0;
  unlinked_count_ = 0;
  edge_count_ = 0;
  negative_delta_count_ = 0;
  policy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PAGG::~PAGG() {
  // @@protoc_insertion_point(destructor:comphealth.PAGG)
  SharedDtor();
}

void PAGG::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (this != default_instance_) {
    delete policy_;
  }
}

void PAGG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PAGG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PAGG_descriptor_;
}

const PAGG& PAGG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

PAGG* PAGG::default_instance_ = NULL;

PAGG* PAGG::New() const {
  return new PAGG;
}

void PAGG::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PAGG*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(linked_, linked_count_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_dataset()) {
      if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataset_->clear();
      }
    }
    unlinked_count_ = 0;
  }
  if (_has_bits_[8 / 32] & 28672) {
    edge_count_ = 0;
    negative_delta_count_ = 0;
    if (has_policy()) {
      if (policy_ != NULL) policy_->::comphealth::Policy::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  subsets_.Clear();
  delta_hist_.Clear();
  delta_error_hist_.Clear();
  count_hist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PAGG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PAGG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dataset;
        break;
      }

      // optional string dataset = 2;
      case 2: {
        if (tag == 18) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_linked;
        break;
      }

      // required bool linked = 3;
      case 3: {
        if (tag == 24) {
         parse_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlinked;
        break;
      }

      // required bool unlinked = 4;
      case 4: {
        if (tag == 32) {
         parse_unlinked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlinked_)));
          set_has_unlinked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_patient_count;
        break;
      }

      // required int32 patient_count = 6;
      case 6: {
        if (tag == 48) {
         parse_patient_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patient_count_)));
          set_has_patient_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_visit_count;
        break;
      }

      // required int32 visit_count = 7;
      case 7: {
        if (tag == 56) {
         parse_visit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visit_count_)));
          set_has_visit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_linked_count;
        break;
      }

      // required int32 linked_count = 8;
      case 8: {
        if (tag == 64) {
         parse_linked_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linked_count_)));
          set_has_linked_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_unlinked_count;
        break;
      }

      // required int32 unlinked_count = 9;
      case 9: {
        if (tag == 72) {
         parse_unlinked_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlinked_count_)));
          set_has_unlinked_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_subsets;
        break;
      }

      // repeated .comphealth.PSubsets subsets = 10;
      case 10: {
        if (tag == 82) {
         parse_subsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_subsets;
        if (input->ExpectTag(90)) goto parse_delta_hist;
        break;
      }

      // repeated .comphealth.VisitDeltaHist delta_hist = 11;
      case 11: {
        if (tag == 90) {
         parse_delta_hist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delta_hist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_delta_hist;
        if (input->ExpectTag(98)) goto parse_count_hist;
        break;
      }

      // repeated .comphealth.EtypeCountHist count_hist = 12;
      case 12: {
        if (tag == 98) {
         parse_count_hist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count_hist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_count_hist;
        if (input->ExpectTag(106)) goto parse_delta_error_hist;
        break;
      }

      // repeated .comphealth.VisitDeltaHist delta_error_hist = 13;
      case 13: {
        if (tag == 106) {
         parse_delta_error_hist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delta_error_hist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_delta_error_hist;
        if (input->ExpectTag(112)) goto parse_edge_count;
        break;
      }

      // optional int32 edge_count = 14;
      case 14: {
        if (tag == 112) {
         parse_edge_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edge_count_)));
          set_has_edge_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_negative_delta_count;
        break;
      }

      // optional int32 negative_delta_count = 15;
      case 15: {
        if (tag == 120) {
         parse_negative_delta_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &negative_delta_count_)));
          set_has_negative_delta_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_policy;
        break;
      }

      // required .comphealth.Policy policy = 16;
      case 16: {
        if (tag == 130) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PAGG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PAGG)
  return false;
#undef DO_
}

void PAGG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PAGG)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string dataset = 2;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dataset(), output);
  }

  // required bool linked = 3;
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->linked(), output);
  }

  // required bool unlinked = 4;
  if (has_unlinked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unlinked(), output);
  }

  // required int32 patient_count = 6;
  if (has_patient_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->patient_count(), output);
  }

  // required int32 visit_count = 7;
  if (has_visit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->visit_count(), output);
  }

  // required int32 linked_count = 8;
  if (has_linked_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->linked_count(), output);
  }

  // required int32 unlinked_count = 9;
  if (has_unlinked_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->unlinked_count(), output);
  }

  // repeated .comphealth.PSubsets subsets = 10;
  for (int i = 0; i < this->subsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->subsets(i), output);
  }

  // repeated .comphealth.VisitDeltaHist delta_hist = 11;
  for (int i = 0; i < this->delta_hist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->delta_hist(i), output);
  }

  // repeated .comphealth.EtypeCountHist count_hist = 12;
  for (int i = 0; i < this->count_hist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->count_hist(i), output);
  }

  // repeated .comphealth.VisitDeltaHist delta_error_hist = 13;
  for (int i = 0; i < this->delta_error_hist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->delta_error_hist(i), output);
  }

  // optional int32 edge_count = 14;
  if (has_edge_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->edge_count(), output);
  }

  // optional int32 negative_delta_count = 15;
  if (has_negative_delta_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->negative_delta_count(), output);
  }

  // required .comphealth.Policy policy = 16;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->policy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PAGG)
}

::google::protobuf::uint8* PAGG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PAGG)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string dataset = 2;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset(), target);
  }

  // required bool linked = 3;
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->linked(), target);
  }

  // required bool unlinked = 4;
  if (has_unlinked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unlinked(), target);
  }

  // required int32 patient_count = 6;
  if (has_patient_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->patient_count(), target);
  }

  // required int32 visit_count = 7;
  if (has_visit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->visit_count(), target);
  }

  // required int32 linked_count = 8;
  if (has_linked_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->linked_count(), target);
  }

  // required int32 unlinked_count = 9;
  if (has_unlinked_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->unlinked_count(), target);
  }

  // repeated .comphealth.PSubsets subsets = 10;
  for (int i = 0; i < this->subsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->subsets(i), target);
  }

  // repeated .comphealth.VisitDeltaHist delta_hist = 11;
  for (int i = 0; i < this->delta_hist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->delta_hist(i), target);
  }

  // repeated .comphealth.EtypeCountHist count_hist = 12;
  for (int i = 0; i < this->count_hist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->count_hist(i), target);
  }

  // repeated .comphealth.VisitDeltaHist delta_error_hist = 13;
  for (int i = 0; i < this->delta_error_hist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->delta_error_hist(i), target);
  }

  // optional int32 edge_count = 14;
  if (has_edge_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->edge_count(), target);
  }

  // optional int32 negative_delta_count = 15;
  if (has_negative_delta_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->negative_delta_count(), target);
  }

  // required .comphealth.Policy policy = 16;
  if (has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->policy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PAGG)
  return target;
}

int PAGG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string dataset = 2;
    if (has_dataset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

    // required bool linked = 3;
    if (has_linked()) {
      total_size += 1 + 1;
    }

    // required bool unlinked = 4;
    if (has_unlinked()) {
      total_size += 1 + 1;
    }

    // required int32 patient_count = 6;
    if (has_patient_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patient_count());
    }

    // required int32 visit_count = 7;
    if (has_visit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visit_count());
    }

    // required int32 linked_count = 8;
    if (has_linked_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linked_count());
    }

    // required int32 unlinked_count = 9;
    if (has_unlinked_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlinked_count());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional int32 edge_count = 14;
    if (has_edge_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edge_count());
    }

    // optional int32 negative_delta_count = 15;
    if (has_negative_delta_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->negative_delta_count());
    }

    // required .comphealth.Policy policy = 16;
    if (has_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->policy());
    }

  }
  // repeated .comphealth.PSubsets subsets = 10;
  total_size += 1 * this->subsets_size();
  for (int i = 0; i < this->subsets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subsets(i));
  }

  // repeated .comphealth.VisitDeltaHist delta_hist = 11;
  total_size += 1 * this->delta_hist_size();
  for (int i = 0; i < this->delta_hist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delta_hist(i));
  }

  // repeated .comphealth.VisitDeltaHist delta_error_hist = 13;
  total_size += 1 * this->delta_error_hist_size();
  for (int i = 0; i < this->delta_error_hist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delta_error_hist(i));
  }

  // repeated .comphealth.EtypeCountHist count_hist = 12;
  total_size += 1 * this->count_hist_size();
  for (int i = 0; i < this->count_hist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count_hist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PAGG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PAGG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PAGG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PAGG::MergeFrom(const PAGG& from) {
  GOOGLE_CHECK_NE(&from, this);
  subsets_.MergeFrom(from.subsets_);
  delta_hist_.MergeFrom(from.delta_hist_);
  delta_error_hist_.MergeFrom(from.delta_error_hist_);
  count_hist_.MergeFrom(from.count_hist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
    if (from.has_linked()) {
      set_linked(from.linked());
    }
    if (from.has_unlinked()) {
      set_unlinked(from.unlinked());
    }
    if (from.has_patient_count()) {
      set_patient_count(from.patient_count());
    }
    if (from.has_visit_count()) {
      set_visit_count(from.visit_count());
    }
    if (from.has_linked_count()) {
      set_linked_count(from.linked_count());
    }
    if (from.has_unlinked_count()) {
      set_unlinked_count(from.unlinked_count());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_edge_count()) {
      set_edge_count(from.edge_count());
    }
    if (from.has_negative_delta_count()) {
      set_negative_delta_count(from.negative_delta_count());
    }
    if (from.has_policy()) {
      mutable_policy()->::comphealth::Policy::MergeFrom(from.policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PAGG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAGG::CopyFrom(const PAGG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAGG::IsInitialized() const {
  if ((_has_bits_[0] & 0x000040fd) != 0x000040fd) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->subsets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->delta_hist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->delta_error_hist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->count_hist())) return false;
  if (has_policy()) {
    if (!this->policy().IsInitialized()) return false;
  }
  return true;
}

void PAGG::Swap(PAGG* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(dataset_, other->dataset_);
    std::swap(linked_, other->linked_);
    std::swap(unlinked_, other->unlinked_);
    std::swap(patient_count_, other->patient_count_);
    std::swap(visit_count_, other->visit_count_);
    std::swap(linked_count_, other->linked_count_);
    std::swap(unlinked_count_, other->unlinked_count_);
    subsets_.Swap(&other->subsets_);
    delta_hist_.Swap(&other->delta_hist_);
    delta_error_hist_.Swap(&other->delta_error_hist_);
    count_hist_.Swap(&other->count_hist_);
    std::swap(edge_count_, other->edge_count_);
    std::swap(negative_delta_count_, other->negative_delta_count_);
    std::swap(policy_, other->policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PAGG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PAGG_descriptor_;
  metadata.reflection = PAGG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PSubsets::kLinkedFieldNumber;
const int PSubsets::kVtypeFieldNumber;
const int PSubsets::kSubsetFieldNumber;
const int PSubsets::kKFieldNumber;
#endif  // !_MSC_VER

PSubsets::PSubsets()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PSubsets)
}

void PSubsets::InitAsDefaultInstance() {
  subset_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
}

PSubsets::PSubsets(const PSubsets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PSubsets)
}

void PSubsets::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  linked_ = false;
  vtype_ = 0;
  subset_ = NULL;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSubsets::~PSubsets() {
  // @@protoc_insertion_point(destructor:comphealth.PSubsets)
  SharedDtor();
}

void PSubsets::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (this != default_instance_) {
    delete subset_;
  }
}

void PSubsets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSubsets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSubsets_descriptor_;
}

const PSubsets& PSubsets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

PSubsets* PSubsets::default_instance_ = NULL;

PSubsets* PSubsets::New() const {
  return new PSubsets;
}

void PSubsets::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PSubsets*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(linked_, vtype_);
    if (has_subset()) {
      if (subset_ != NULL) subset_->::comphealth::AGG::Clear();
    }
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSubsets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PSubsets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool linked = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vtype;
        break;
      }

      // required .comphealth.ETYPE vtype = 2;
      case 2: {
        if (tag == 16) {
         parse_vtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::ETYPE_IsValid(value)) {
            set_vtype(static_cast< ::comphealth::ETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subset;
        break;
      }

      // required .comphealth.AGG subset = 3;
      case 3: {
        if (tag == 26) {
         parse_subset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_k;
        break;
      }

      // optional string k = 4;
      case 4: {
        if (tag == 34) {
         parse_k:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PSubsets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PSubsets)
  return false;
#undef DO_
}

void PSubsets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PSubsets)
  // required bool linked = 1;
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->linked(), output);
  }

  // required .comphealth.ETYPE vtype = 2;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->vtype(), output);
  }

  // required .comphealth.AGG subset = 3;
  if (has_subset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subset(), output);
  }

  // optional string k = 4;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PSubsets)
}

::google::protobuf::uint8* PSubsets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PSubsets)
  // required bool linked = 1;
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->linked(), target);
  }

  // required .comphealth.ETYPE vtype = 2;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->vtype(), target);
  }

  // required .comphealth.AGG subset = 3;
  if (has_subset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subset(), target);
  }

  // optional string k = 4;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PSubsets)
  return target;
}

int PSubsets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool linked = 1;
    if (has_linked()) {
      total_size += 1 + 1;
    }

    // required .comphealth.ETYPE vtype = 2;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vtype());
    }

    // required .comphealth.AGG subset = 3;
    if (has_subset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subset());
    }

    // optional string k = 4;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSubsets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSubsets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSubsets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSubsets::MergeFrom(const PSubsets& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linked()) {
      set_linked(from.linked());
    }
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_subset()) {
      mutable_subset()->::comphealth::AGG::MergeFrom(from.subset());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSubsets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSubsets::CopyFrom(const PSubsets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSubsets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_subset()) {
    if (!this->subset().IsInitialized()) return false;
  }
  return true;
}

void PSubsets::Swap(PSubsets* other) {
  if (other != this) {
    std::swap(linked_, other->linked_);
    std::swap(vtype_, other->vtype_);
    std::swap(subset_, other->subset_);
    std::swap(k_, other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSubsets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSubsets_descriptor_;
  metadata.reflection = PSubsets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisitDeltaHist::kInitialFieldNumber;
const int VisitDeltaHist::kSubFieldNumber;
const int VisitDeltaHist::kDeltaFieldNumber;
const int VisitDeltaHist::kVFieldNumber;
#endif  // !_MSC_VER

VisitDeltaHist::VisitDeltaHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.VisitDeltaHist)
}

void VisitDeltaHist::InitAsDefaultInstance() {
}

VisitDeltaHist::VisitDeltaHist(const VisitDeltaHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.VisitDeltaHist)
}

void VisitDeltaHist::SharedCtor() {
  _cached_size_ = 0;
  initial_ = 0;
  sub_ = 0;
  delta_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisitDeltaHist::~VisitDeltaHist() {
  // @@protoc_insertion_point(destructor:comphealth.VisitDeltaHist)
  SharedDtor();
}

void VisitDeltaHist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisitDeltaHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitDeltaHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitDeltaHist_descriptor_;
}

const VisitDeltaHist& VisitDeltaHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

VisitDeltaHist* VisitDeltaHist::default_instance_ = NULL;

VisitDeltaHist* VisitDeltaHist::New() const {
  return new VisitDeltaHist;
}

void VisitDeltaHist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VisitDeltaHist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(initial_, v_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisitDeltaHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.VisitDeltaHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.ETYPE initial = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::ETYPE_IsValid(value)) {
            set_initial(static_cast< ::comphealth::ETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sub;
        break;
      }

      // required .comphealth.ETYPE sub = 2;
      case 2: {
        if (tag == 16) {
         parse_sub:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::ETYPE_IsValid(value)) {
            set_sub(static_cast< ::comphealth::ETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_delta;
        break;
      }

      // required int32 delta = 3;
      case 3: {
        if (tag == 24) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_v;
        break;
      }

      // required int32 v = 4;
      case 4: {
        if (tag == 32) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.VisitDeltaHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.VisitDeltaHist)
  return false;
#undef DO_
}

void VisitDeltaHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.VisitDeltaHist)
  // required .comphealth.ETYPE initial = 1;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->initial(), output);
  }

  // required .comphealth.ETYPE sub = 2;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sub(), output);
  }

  // required int32 delta = 3;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->delta(), output);
  }

  // required int32 v = 4;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.VisitDeltaHist)
}

::google::protobuf::uint8* VisitDeltaHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.VisitDeltaHist)
  // required .comphealth.ETYPE initial = 1;
  if (has_initial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->initial(), target);
  }

  // required .comphealth.ETYPE sub = 2;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sub(), target);
  }

  // required int32 delta = 3;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->delta(), target);
  }

  // required int32 v = 4;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.VisitDeltaHist)
  return target;
}

int VisitDeltaHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.ETYPE initial = 1;
    if (has_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initial());
    }

    // required .comphealth.ETYPE sub = 2;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub());
    }

    // required int32 delta = 3;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }

    // required int32 v = 4;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitDeltaHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisitDeltaHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisitDeltaHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisitDeltaHist::MergeFrom(const VisitDeltaHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initial()) {
      set_initial(from.initial());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisitDeltaHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitDeltaHist::CopyFrom(const VisitDeltaHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitDeltaHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void VisitDeltaHist::Swap(VisitDeltaHist* other) {
  if (other != this) {
    std::swap(initial_, other->initial_);
    std::swap(sub_, other->sub_);
    std::swap(delta_, other->delta_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisitDeltaHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitDeltaHist_descriptor_;
  metadata.reflection = VisitDeltaHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AGG::kKeyFieldNumber;
const int AGG::kMiniFieldNumber;
const int AGG::kCountFieldNumber;
const int AGG::kPolicyFieldNumber;
const int AGG::kChargesNumFieldNumber;
const int AGG::kChargesDenFieldNumber;
const int AGG::kAgehFieldNumber;
const int AGG::kSexhFieldNumber;
const int AGG::kRacehFieldNumber;
const int AGG::kSourcehFieldNumber;
const int AGG::kDisphFieldNumber;
const int AGG::kPayerhFieldNumber;
const int AGG::kDeathhFieldNumber;
const int AGG::kDxhFieldNumber;
const int AGG::kPrimaryPrhFieldNumber;
const int AGG::kPrhFieldNumber;
const int AGG::kExhFieldNumber;
const int AGG::kDrghFieldNumber;
const int AGG::kLoshFieldNumber;
const int AGG::kDnrhFieldNumber;
const int AGG::kPziphFieldNumber;
const int AGG::kAgedhFieldNumber;
const int AGG::kYearhFieldNumber;
const int AGG::kVtypehFieldNumber;
const int AGG::kFacilityhFieldNumber;
const int AGG::kDatasetFieldNumber;
#endif  // !_MSC_VER

AGG::AGG()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.AGG)
}

void AGG::InitAsDefaultInstance() {
  policy_ = const_cast< ::comphealth::Policy*>(&::comphealth::Policy::default_instance());
  ageh_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
  losh_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
}

AGG::AGG(const AGG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.AGG)
}

void AGG::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mini_ = false;
  count_ = 0;
  policy_ = NULL;
  charges_num_ = GOOGLE_LONGLONG(0);
  charges_den_ = GOOGLE_LONGLONG(0);
  ageh_ = NULL;
  losh_ = NULL;
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AGG::~AGG() {
  // @@protoc_insertion_point(destructor:comphealth.AGG)
  SharedDtor();
}

void AGG::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (this != default_instance_) {
    delete policy_;
    delete ageh_;
    delete losh_;
  }
}

void AGG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AGG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AGG_descriptor_;
}

const AGG& AGG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

AGG* AGG::default_instance_ = NULL;

AGG* AGG::New() const {
  return new AGG;
}

void AGG::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AGG*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(mini_, count_);
    ZR_(charges_num_, charges_den_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_policy()) {
      if (policy_ != NULL) policy_->::comphealth::Policy::Clear();
    }
    if (has_ageh()) {
      if (ageh_ != NULL) ageh_->::comphealth::IntHist::Clear();
    }
  }
  if (has_losh()) {
    if (losh_ != NULL) losh_->::comphealth::IntHist::Clear();
  }
  if (has_dataset()) {
    if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      dataset_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sexh_.Clear();
  raceh_.Clear();
  sourceh_.Clear();
  disph_.Clear();
  payerh_.Clear();
  deathh_.Clear();
  dxh_.Clear();
  primary_prh_.Clear();
  prh_.Clear();
  exh_.Clear();
  drgh_.Clear();
  dnrh_.Clear();
  pziph_.Clear();
  agedh_.Clear();
  yearh_.Clear();
  vtypeh_.Clear();
  facilityh_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AGG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.AGG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ageh;
        break;
      }

      // optional .comphealth.IntHist ageh = 3;
      case 3: {
        if (tag == 26) {
         parse_ageh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ageh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sexh;
        break;
      }

      // repeated .comphealth.SexHist sexh = 4;
      case 4: {
        if (tag == 34) {
         parse_sexh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sexh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sexh;
        if (input->ExpectTag(42)) goto parse_raceh;
        break;
      }

      // repeated .comphealth.RaceHist raceh = 5;
      case 5: {
        if (tag == 42) {
         parse_raceh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raceh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_raceh;
        if (input->ExpectTag(50)) goto parse_sourceh;
        break;
      }

      // repeated .comphealth.SourceHist sourceh = 6;
      case 6: {
        if (tag == 50) {
         parse_sourceh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sourceh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sourceh;
        if (input->ExpectTag(58)) goto parse_disph;
        break;
      }

      // repeated .comphealth.DispositionHist disph = 7;
      case 7: {
        if (tag == 58) {
         parse_disph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_disph;
        if (input->ExpectTag(66)) goto parse_payerh;
        break;
      }

      // repeated .comphealth.PayerHist payerh = 8;
      case 8: {
        if (tag == 66) {
         parse_payerh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_payerh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_payerh;
        if (input->ExpectTag(74)) goto parse_deathh;
        break;
      }

      // repeated .comphealth.DeathHist deathh = 9;
      case 9: {
        if (tag == 74) {
         parse_deathh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deathh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_deathh;
        if (input->ExpectTag(82)) goto parse_dxh;
        break;
      }

      // repeated .comphealth.DXI dxh = 10;
      case 10: {
        if (tag == 82) {
         parse_dxh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dxh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_dxh;
        if (input->ExpectTag(90)) goto parse_primary_prh;
        break;
      }

      // repeated .comphealth.KVI primary_prh = 11;
      case 11: {
        if (tag == 90) {
         parse_primary_prh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primary_prh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_primary_prh;
        if (input->ExpectTag(106)) goto parse_prh;
        break;
      }

      // repeated .comphealth.KVI prh = 13;
      case 13: {
        if (tag == 106) {
         parse_prh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_prh;
        if (input->ExpectTag(114)) goto parse_exh;
        break;
      }

      // repeated .comphealth.KVI exh = 14;
      case 14: {
        if (tag == 114) {
         parse_exh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_exh;
        if (input->ExpectTag(122)) goto parse_drgh;
        break;
      }

      // repeated .comphealth.KVI drgh = 15;
      case 15: {
        if (tag == 122) {
         parse_drgh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drgh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_drgh;
        if (input->ExpectTag(130)) goto parse_losh;
        break;
      }

      // optional .comphealth.IntHist losh = 16;
      case 16: {
        if (tag == 130) {
         parse_losh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_losh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_dnrh;
        break;
      }

      // repeated .comphealth.DNRHist dnrh = 18;
      case 18: {
        if (tag == 146) {
         parse_dnrh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dnrh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_dnrh;
        if (input->ExpectTag(154)) goto parse_pziph;
        break;
      }

      // repeated .comphealth.PZipHist pziph = 19;
      case 19: {
        if (tag == 154) {
         parse_pziph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pziph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_pziph;
        if (input->ExpectTag(170)) goto parse_agedh;
        break;
      }

      // repeated .comphealth.KVII agedh = 21;
      case 21: {
        if (tag == 170) {
         parse_agedh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agedh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_agedh;
        if (input->ExpectTag(178)) goto parse_yearh;
        break;
      }

      // repeated .comphealth.KVII yearh = 22;
      case 22: {
        if (tag == 178) {
         parse_yearh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yearh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_yearh;
        if (input->ExpectTag(186)) goto parse_vtypeh;
        break;
      }

      // repeated .comphealth.EtypeHist vtypeh = 23;
      case 23: {
        if (tag == 186) {
         parse_vtypeh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vtypeh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_vtypeh;
        if (input->ExpectTag(194)) goto parse_facilityh;
        break;
      }

      // repeated string facilityh = 24;
      case 24: {
        if (tag == 194) {
         parse_facilityh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_facilityh()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->facilityh(this->facilityh_size() - 1).data(),
            this->facilityh(this->facilityh_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "facilityh");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_facilityh;
        if (input->ExpectTag(202)) goto parse_dataset;
        break;
      }

      // optional string dataset = 25;
      case 25: {
        if (tag == 202) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_mini;
        break;
      }

      // required bool mini = 26 [default = false];
      case 26: {
        if (tag == 208) {
         parse_mini:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mini_)));
          set_has_mini();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_charges_num;
        break;
      }

      // optional int64 charges_num = 31;
      case 31: {
        if (tag == 248) {
         parse_charges_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charges_num_)));
          set_has_charges_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_charges_den;
        break;
      }

      // optional int64 charges_den = 32;
      case 32: {
        if (tag == 256) {
         parse_charges_den:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charges_den_)));
          set_has_charges_den();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_policy;
        break;
      }

      // required .comphealth.Policy policy = 33;
      case 33: {
        if (tag == 266) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.AGG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.AGG)
  return false;
#undef DO_
}

void AGG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.AGG)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional .comphealth.IntHist ageh = 3;
  if (has_ageh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ageh(), output);
  }

  // repeated .comphealth.SexHist sexh = 4;
  for (int i = 0; i < this->sexh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sexh(i), output);
  }

  // repeated .comphealth.RaceHist raceh = 5;
  for (int i = 0; i < this->raceh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->raceh(i), output);
  }

  // repeated .comphealth.SourceHist sourceh = 6;
  for (int i = 0; i < this->sourceh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sourceh(i), output);
  }

  // repeated .comphealth.DispositionHist disph = 7;
  for (int i = 0; i < this->disph_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->disph(i), output);
  }

  // repeated .comphealth.PayerHist payerh = 8;
  for (int i = 0; i < this->payerh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->payerh(i), output);
  }

  // repeated .comphealth.DeathHist deathh = 9;
  for (int i = 0; i < this->deathh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->deathh(i), output);
  }

  // repeated .comphealth.DXI dxh = 10;
  for (int i = 0; i < this->dxh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->dxh(i), output);
  }

  // repeated .comphealth.KVI primary_prh = 11;
  for (int i = 0; i < this->primary_prh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->primary_prh(i), output);
  }

  // repeated .comphealth.KVI prh = 13;
  for (int i = 0; i < this->prh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->prh(i), output);
  }

  // repeated .comphealth.KVI exh = 14;
  for (int i = 0; i < this->exh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->exh(i), output);
  }

  // repeated .comphealth.KVI drgh = 15;
  for (int i = 0; i < this->drgh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->drgh(i), output);
  }

  // optional .comphealth.IntHist losh = 16;
  if (has_losh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->losh(), output);
  }

  // repeated .comphealth.DNRHist dnrh = 18;
  for (int i = 0; i < this->dnrh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dnrh(i), output);
  }

  // repeated .comphealth.PZipHist pziph = 19;
  for (int i = 0; i < this->pziph_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->pziph(i), output);
  }

  // repeated .comphealth.KVII agedh = 21;
  for (int i = 0; i < this->agedh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->agedh(i), output);
  }

  // repeated .comphealth.KVII yearh = 22;
  for (int i = 0; i < this->yearh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->yearh(i), output);
  }

  // repeated .comphealth.EtypeHist vtypeh = 23;
  for (int i = 0; i < this->vtypeh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->vtypeh(i), output);
  }

  // repeated string facilityh = 24;
  for (int i = 0; i < this->facilityh_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->facilityh(i).data(), this->facilityh(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "facilityh");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->facilityh(i), output);
  }

  // optional string dataset = 25;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->dataset(), output);
  }

  // required bool mini = 26 [default = false];
  if (has_mini()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->mini(), output);
  }

  // optional int64 charges_num = 31;
  if (has_charges_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->charges_num(), output);
  }

  // optional int64 charges_den = 32;
  if (has_charges_den()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->charges_den(), output);
  }

  // required .comphealth.Policy policy = 33;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->policy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.AGG)
}

::google::protobuf::uint8* AGG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.AGG)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional .comphealth.IntHist ageh = 3;
  if (has_ageh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ageh(), target);
  }

  // repeated .comphealth.SexHist sexh = 4;
  for (int i = 0; i < this->sexh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sexh(i), target);
  }

  // repeated .comphealth.RaceHist raceh = 5;
  for (int i = 0; i < this->raceh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->raceh(i), target);
  }

  // repeated .comphealth.SourceHist sourceh = 6;
  for (int i = 0; i < this->sourceh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sourceh(i), target);
  }

  // repeated .comphealth.DispositionHist disph = 7;
  for (int i = 0; i < this->disph_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->disph(i), target);
  }

  // repeated .comphealth.PayerHist payerh = 8;
  for (int i = 0; i < this->payerh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->payerh(i), target);
  }

  // repeated .comphealth.DeathHist deathh = 9;
  for (int i = 0; i < this->deathh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->deathh(i), target);
  }

  // repeated .comphealth.DXI dxh = 10;
  for (int i = 0; i < this->dxh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->dxh(i), target);
  }

  // repeated .comphealth.KVI primary_prh = 11;
  for (int i = 0; i < this->primary_prh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->primary_prh(i), target);
  }

  // repeated .comphealth.KVI prh = 13;
  for (int i = 0; i < this->prh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->prh(i), target);
  }

  // repeated .comphealth.KVI exh = 14;
  for (int i = 0; i < this->exh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->exh(i), target);
  }

  // repeated .comphealth.KVI drgh = 15;
  for (int i = 0; i < this->drgh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->drgh(i), target);
  }

  // optional .comphealth.IntHist losh = 16;
  if (has_losh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->losh(), target);
  }

  // repeated .comphealth.DNRHist dnrh = 18;
  for (int i = 0; i < this->dnrh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->dnrh(i), target);
  }

  // repeated .comphealth.PZipHist pziph = 19;
  for (int i = 0; i < this->pziph_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->pziph(i), target);
  }

  // repeated .comphealth.KVII agedh = 21;
  for (int i = 0; i < this->agedh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->agedh(i), target);
  }

  // repeated .comphealth.KVII yearh = 22;
  for (int i = 0; i < this->yearh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->yearh(i), target);
  }

  // repeated .comphealth.EtypeHist vtypeh = 23;
  for (int i = 0; i < this->vtypeh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->vtypeh(i), target);
  }

  // repeated string facilityh = 24;
  for (int i = 0; i < this->facilityh_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->facilityh(i).data(), this->facilityh(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "facilityh");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(24, this->facilityh(i), target);
  }

  // optional string dataset = 25;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->dataset(), target);
  }

  // required bool mini = 26 [default = false];
  if (has_mini()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->mini(), target);
  }

  // optional int64 charges_num = 31;
  if (has_charges_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->charges_num(), target);
  }

  // optional int64 charges_den = 32;
  if (has_charges_den()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->charges_den(), target);
  }

  // required .comphealth.Policy policy = 33;
  if (has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->policy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.AGG)
  return target;
}

int AGG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required bool mini = 26 [default = false];
    if (has_mini()) {
      total_size += 2 + 1;
    }

    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required .comphealth.Policy policy = 33;
    if (has_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->policy());
    }

    // optional int64 charges_num = 31;
    if (has_charges_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charges_num());
    }

    // optional int64 charges_den = 32;
    if (has_charges_den()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charges_den());
    }

    // optional .comphealth.IntHist ageh = 3;
    if (has_ageh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ageh());
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional .comphealth.IntHist losh = 16;
    if (has_losh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->losh());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional string dataset = 25;
    if (has_dataset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

  }
  // repeated .comphealth.SexHist sexh = 4;
  total_size += 1 * this->sexh_size();
  for (int i = 0; i < this->sexh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sexh(i));
  }

  // repeated .comphealth.RaceHist raceh = 5;
  total_size += 1 * this->raceh_size();
  for (int i = 0; i < this->raceh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raceh(i));
  }

  // repeated .comphealth.SourceHist sourceh = 6;
  total_size += 1 * this->sourceh_size();
  for (int i = 0; i < this->sourceh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sourceh(i));
  }

  // repeated .comphealth.DispositionHist disph = 7;
  total_size += 1 * this->disph_size();
  for (int i = 0; i < this->disph_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disph(i));
  }

  // repeated .comphealth.PayerHist payerh = 8;
  total_size += 1 * this->payerh_size();
  for (int i = 0; i < this->payerh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->payerh(i));
  }

  // repeated .comphealth.DeathHist deathh = 9;
  total_size += 1 * this->deathh_size();
  for (int i = 0; i < this->deathh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deathh(i));
  }

  // repeated .comphealth.DXI dxh = 10;
  total_size += 1 * this->dxh_size();
  for (int i = 0; i < this->dxh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dxh(i));
  }

  // repeated .comphealth.KVI primary_prh = 11;
  total_size += 1 * this->primary_prh_size();
  for (int i = 0; i < this->primary_prh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primary_prh(i));
  }

  // repeated .comphealth.KVI prh = 13;
  total_size += 1 * this->prh_size();
  for (int i = 0; i < this->prh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prh(i));
  }

  // repeated .comphealth.KVI exh = 14;
  total_size += 1 * this->exh_size();
  for (int i = 0; i < this->exh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exh(i));
  }

  // repeated .comphealth.KVI drgh = 15;
  total_size += 1 * this->drgh_size();
  for (int i = 0; i < this->drgh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drgh(i));
  }

  // repeated .comphealth.DNRHist dnrh = 18;
  total_size += 2 * this->dnrh_size();
  for (int i = 0; i < this->dnrh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dnrh(i));
  }

  // repeated .comphealth.PZipHist pziph = 19;
  total_size += 2 * this->pziph_size();
  for (int i = 0; i < this->pziph_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pziph(i));
  }

  // repeated .comphealth.KVII agedh = 21;
  total_size += 2 * this->agedh_size();
  for (int i = 0; i < this->agedh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agedh(i));
  }

  // repeated .comphealth.KVII yearh = 22;
  total_size += 2 * this->yearh_size();
  for (int i = 0; i < this->yearh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yearh(i));
  }

  // repeated .comphealth.EtypeHist vtypeh = 23;
  total_size += 2 * this->vtypeh_size();
  for (int i = 0; i < this->vtypeh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vtypeh(i));
  }

  // repeated string facilityh = 24;
  total_size += 2 * this->facilityh_size();
  for (int i = 0; i < this->facilityh_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->facilityh(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AGG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AGG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AGG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AGG::MergeFrom(const AGG& from) {
  GOOGLE_CHECK_NE(&from, this);
  sexh_.MergeFrom(from.sexh_);
  raceh_.MergeFrom(from.raceh_);
  sourceh_.MergeFrom(from.sourceh_);
  disph_.MergeFrom(from.disph_);
  payerh_.MergeFrom(from.payerh_);
  deathh_.MergeFrom(from.deathh_);
  dxh_.MergeFrom(from.dxh_);
  primary_prh_.MergeFrom(from.primary_prh_);
  prh_.MergeFrom(from.prh_);
  exh_.MergeFrom(from.exh_);
  drgh_.MergeFrom(from.drgh_);
  dnrh_.MergeFrom(from.dnrh_);
  pziph_.MergeFrom(from.pziph_);
  agedh_.MergeFrom(from.agedh_);
  yearh_.MergeFrom(from.yearh_);
  vtypeh_.MergeFrom(from.vtypeh_);
  facilityh_.MergeFrom(from.facilityh_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_mini()) {
      set_mini(from.mini());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_policy()) {
      mutable_policy()->::comphealth::Policy::MergeFrom(from.policy());
    }
    if (from.has_charges_num()) {
      set_charges_num(from.charges_num());
    }
    if (from.has_charges_den()) {
      set_charges_den(from.charges_den());
    }
    if (from.has_ageh()) {
      mutable_ageh()->::comphealth::IntHist::MergeFrom(from.ageh());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_losh()) {
      mutable_losh()->::comphealth::IntHist::MergeFrom(from.losh());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AGG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AGG::CopyFrom(const AGG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AGG::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_policy()) {
    if (!this->policy().IsInitialized()) return false;
  }
  if (has_ageh()) {
    if (!this->ageh().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sexh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->raceh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sourceh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->disph())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->payerh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->deathh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dxh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->primary_prh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->prh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->exh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->drgh())) return false;
  if (has_losh()) {
    if (!this->losh().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dnrh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pziph())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->agedh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->yearh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vtypeh())) return false;
  return true;
}

void AGG::Swap(AGG* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(mini_, other->mini_);
    std::swap(count_, other->count_);
    std::swap(policy_, other->policy_);
    std::swap(charges_num_, other->charges_num_);
    std::swap(charges_den_, other->charges_den_);
    std::swap(ageh_, other->ageh_);
    sexh_.Swap(&other->sexh_);
    raceh_.Swap(&other->raceh_);
    sourceh_.Swap(&other->sourceh_);
    disph_.Swap(&other->disph_);
    payerh_.Swap(&other->payerh_);
    deathh_.Swap(&other->deathh_);
    dxh_.Swap(&other->dxh_);
    primary_prh_.Swap(&other->primary_prh_);
    prh_.Swap(&other->prh_);
    exh_.Swap(&other->exh_);
    drgh_.Swap(&other->drgh_);
    std::swap(losh_, other->losh_);
    dnrh_.Swap(&other->dnrh_);
    pziph_.Swap(&other->pziph_);
    agedh_.Swap(&other->agedh_);
    yearh_.Swap(&other->yearh_);
    vtypeh_.Swap(&other->vtypeh_);
    facilityh_.Swap(&other->facilityh_);
    std::swap(dataset_, other->dataset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AGG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AGG_descriptor_;
  metadata.reflection = AGG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Policy::kMinCountFieldNumber;
const int Policy::kMinHospitalFieldNumber;
const int Policy::kBaseFieldNumber;
const int Policy::kMinSubsetFieldNumber;
#endif  // !_MSC_VER

Policy::Policy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.Policy)
}

void Policy::InitAsDefaultInstance() {
}

Policy::Policy(const Policy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.Policy)
}

void Policy::SharedCtor() {
  _cached_size_ = 0;
  min_count_ = 0;
  min_hospital_ = 0;
  base_ = 0;
  min_subset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:comphealth.Policy)
  SharedDtor();
}

void Policy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Policy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Policy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Policy_descriptor_;
}

const Policy& Policy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

Policy* Policy::default_instance_ = NULL;

Policy* Policy::New() const {
  return new Policy;
}

void Policy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Policy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_count_, min_subset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Policy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.Policy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_count_)));
          set_has_min_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_hospital;
        break;
      }

      // required int32 min_hospital = 2;
      case 2: {
        if (tag == 16) {
         parse_min_hospital:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_hospital_)));
          set_has_min_hospital();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_base;
        break;
      }

      // required int32 base = 3;
      case 3: {
        if (tag == 24) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_subset;
        break;
      }

      // required int32 min_subset = 4;
      case 4: {
        if (tag == 32) {
         parse_min_subset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_subset_)));
          set_has_min_subset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.Policy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.Policy)
  return false;
#undef DO_
}

void Policy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.Policy)
  // required int32 min_count = 1;
  if (has_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_count(), output);
  }

  // required int32 min_hospital = 2;
  if (has_min_hospital()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_hospital(), output);
  }

  // required int32 base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->base(), output);
  }

  // required int32 min_subset = 4;
  if (has_min_subset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_subset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.Policy)
}

::google::protobuf::uint8* Policy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.Policy)
  // required int32 min_count = 1;
  if (has_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_count(), target);
  }

  // required int32 min_hospital = 2;
  if (has_min_hospital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_hospital(), target);
  }

  // required int32 base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->base(), target);
  }

  // required int32 min_subset = 4;
  if (has_min_subset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_subset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.Policy)
  return target;
}

int Policy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_count = 1;
    if (has_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_count());
    }

    // required int32 min_hospital = 2;
    if (has_min_hospital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_hospital());
    }

    // required int32 base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base());
    }

    // required int32 min_subset = 4;
    if (has_min_subset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_subset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Policy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Policy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Policy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Policy::MergeFrom(const Policy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_count()) {
      set_min_count(from.min_count());
    }
    if (from.has_min_hospital()) {
      set_min_hospital(from.min_hospital());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_min_subset()) {
      set_min_subset(from.min_subset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Policy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Policy::CopyFrom(const Policy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Policy::Swap(Policy* other) {
  if (other != this) {
    std::swap(min_count_, other->min_count_);
    std::swap(min_hospital_, other->min_hospital_);
    std::swap(base_, other->base_);
    std::swap(min_subset_, other->min_subset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Policy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Policy_descriptor_;
  metadata.reflection = Policy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntHist::kHFieldNumber;
const int IntHist::kMedianFieldNumber;
const int IntHist::kFqFieldNumber;
const int IntHist::kTqFieldNumber;
const int IntHist::kMeanFieldNumber;
#endif  // !_MSC_VER

IntHist::IntHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.IntHist)
}

void IntHist::InitAsDefaultInstance() {
}

IntHist::IntHist(const IntHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.IntHist)
}

void IntHist::SharedCtor() {
  _cached_size_ = 0;
  median_ = 0;
  fq_ = 0;
  tq_ = 0;
  mean_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntHist::~IntHist() {
  // @@protoc_insertion_point(destructor:comphealth.IntHist)
  SharedDtor();
}

void IntHist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntHist_descriptor_;
}

const IntHist& IntHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

IntHist* IntHist::default_instance_ = NULL;

IntHist* IntHist::New() const {
  return new IntHist;
}

void IntHist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IntHist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(median_, mean_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  h_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.IntHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comphealth.KVII h = 1;
      case 1: {
        if (tag == 10) {
         parse_h:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_h()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_h;
        if (input->ExpectTag(16)) goto parse_median;
        break;
      }

      // optional int32 median = 2;
      case 2: {
        if (tag == 16) {
         parse_median:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &median_)));
          set_has_median();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fq;
        break;
      }

      // optional int32 fq = 3;
      case 3: {
        if (tag == 24) {
         parse_fq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fq_)));
          set_has_fq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tq;
        break;
      }

      // optional int32 tq = 4;
      case 4: {
        if (tag == 32) {
         parse_tq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tq_)));
          set_has_tq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean;
        break;
      }

      // optional float mean = 5;
      case 5: {
        if (tag == 45) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.IntHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.IntHist)
  return false;
#undef DO_
}

void IntHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.IntHist)
  // repeated .comphealth.KVII h = 1;
  for (int i = 0; i < this->h_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->h(i), output);
  }

  // optional int32 median = 2;
  if (has_median()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->median(), output);
  }

  // optional int32 fq = 3;
  if (has_fq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fq(), output);
  }

  // optional int32 tq = 4;
  if (has_tq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tq(), output);
  }

  // optional float mean = 5;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.IntHist)
}

::google::protobuf::uint8* IntHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.IntHist)
  // repeated .comphealth.KVII h = 1;
  for (int i = 0; i < this->h_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->h(i), target);
  }

  // optional int32 median = 2;
  if (has_median()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->median(), target);
  }

  // optional int32 fq = 3;
  if (has_fq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fq(), target);
  }

  // optional int32 tq = 4;
  if (has_tq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tq(), target);
  }

  // optional float mean = 5;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.IntHist)
  return target;
}

int IntHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 median = 2;
    if (has_median()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->median());
    }

    // optional int32 fq = 3;
    if (has_fq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fq());
    }

    // optional int32 tq = 4;
    if (has_tq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tq());
    }

    // optional float mean = 5;
    if (has_mean()) {
      total_size += 1 + 4;
    }

  }
  // repeated .comphealth.KVII h = 1;
  total_size += 1 * this->h_size();
  for (int i = 0; i < this->h_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->h(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntHist::MergeFrom(const IntHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  h_.MergeFrom(from.h_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_median()) {
      set_median(from.median());
    }
    if (from.has_fq()) {
      set_fq(from.fq());
    }
    if (from.has_tq()) {
      set_tq(from.tq());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntHist::CopyFrom(const IntHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntHist::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->h())) return false;
  return true;
}

void IntHist::Swap(IntHist* other) {
  if (other != this) {
    h_.Swap(&other->h_);
    std::swap(median_, other->median_);
    std::swap(fq_, other->fq_);
    std::swap(tq_, other->tq_);
    std::swap(mean_, other->mean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntHist_descriptor_;
  metadata.reflection = IntHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KVII::kKFieldNumber;
const int KVII::kVFieldNumber;
const int KVII::kSFieldNumber;
#endif  // !_MSC_VER

KVII::KVII()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.KVII)
}

void KVII::InitAsDefaultInstance() {
}

KVII::KVII(const KVII& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.KVII)
}

void KVII::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 0;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVII::~KVII() {
  // @@protoc_insertion_point(destructor:comphealth.KVII)
  SharedDtor();
}

void KVII::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void KVII::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVII::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVII_descriptor_;
}

const KVII& KVII::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

KVII* KVII::default_instance_ = NULL;

KVII* KVII::New() const {
  return new KVII;
}

void KVII::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KVII*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(k_, v_);
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVII::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.KVII)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 k = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.KVII)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.KVII)
  return false;
#undef DO_
}

void KVII::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.KVII)
  // required int32 k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.KVII)
}

::google::protobuf::uint8* KVII::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.KVII)
  // required int32 k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.KVII)
  return target;
}

int KVII::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVII::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVII* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVII*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVII::MergeFrom(const KVII& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVII::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVII::CopyFrom(const KVII& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVII::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KVII::Swap(KVII* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVII::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVII_descriptor_;
  metadata.reflection = KVII_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DXI::kKFieldNumber;
const int DXI::kPrimaryFieldNumber;
const int DXI::kPoaFieldNumber;
const int DXI::kAllFieldNumber;
const int DXI::kCFieldNumber;
const int DXI::kSFieldNumber;
#endif  // !_MSC_VER

DXI::DXI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.DXI)
}

void DXI::InitAsDefaultInstance() {
}

DXI::DXI(const DXI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.DXI)
}

void DXI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_ = 0;
  poa_ = 0;
  all_ = 0;
  c_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DXI::~DXI() {
  // @@protoc_insertion_point(destructor:comphealth.DXI)
  SharedDtor();
}

void DXI::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (c_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete c_;
  }
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void DXI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DXI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DXI_descriptor_;
}

const DXI& DXI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

DXI* DXI::default_instance_ = NULL;

DXI* DXI::New() const {
  return new DXI;
}

void DXI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DXI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(primary_, poa_);
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
    all_ = 0;
    if (has_c()) {
      if (c_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        c_->clear();
      }
    }
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DXI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.DXI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_primary;
        break;
      }

      // optional int32 primary = 2;
      case 2: {
        if (tag == 16) {
         parse_primary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_)));
          set_has_primary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_poa;
        break;
      }

      // optional int32 poa = 3;
      case 3: {
        if (tag == 24) {
         parse_poa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poa_)));
          set_has_poa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_all;
        break;
      }

      // optional int32 all = 4;
      case 4: {
        if (tag == 32) {
         parse_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_)));
          set_has_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_c;
        break;
      }

      // optional string c = 5;
      case 5: {
        if (tag == 42) {
         parse_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->c().data(), this->c().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_s;
        break;
      }

      // optional string s = 6;
      case 6: {
        if (tag == 50) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.DXI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.DXI)
  return false;
#undef DO_
}

void DXI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.DXI)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // optional int32 primary = 2;
  if (has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->primary(), output);
  }

  // optional int32 poa = 3;
  if (has_poa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->poa(), output);
  }

  // optional int32 all = 4;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->all(), output);
  }

  // optional string c = 5;
  if (has_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->c().data(), this->c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->c(), output);
  }

  // optional string s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.DXI)
}

::google::protobuf::uint8* DXI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.DXI)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // optional int32 primary = 2;
  if (has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->primary(), target);
  }

  // optional int32 poa = 3;
  if (has_poa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->poa(), target);
  }

  // optional int32 all = 4;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->all(), target);
  }

  // optional string c = 5;
  if (has_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->c().data(), this->c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->c(), target);
  }

  // optional string s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.DXI)
  return target;
}

int DXI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // optional int32 primary = 2;
    if (has_primary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary());
    }

    // optional int32 poa = 3;
    if (has_poa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poa());
    }

    // optional int32 all = 4;
    if (has_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all());
    }

    // optional string c = 5;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->c());
    }

    // optional string s = 6;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DXI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DXI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DXI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DXI::MergeFrom(const DXI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_primary()) {
      set_primary(from.primary());
    }
    if (from.has_poa()) {
      set_poa(from.poa());
    }
    if (from.has_all()) {
      set_all(from.all());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DXI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DXI::CopyFrom(const DXI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DXI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DXI::Swap(DXI* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(primary_, other->primary_);
    std::swap(poa_, other->poa_);
    std::swap(all_, other->all_);
    std::swap(c_, other->c_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DXI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DXI_descriptor_;
  metadata.reflection = DXI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DispositionHist::kKFieldNumber;
const int DispositionHist::kVFieldNumber;
const int DispositionHist::kSFieldNumber;
#endif  // !_MSC_VER

DispositionHist::DispositionHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.DispositionHist)
}

void DispositionHist::InitAsDefaultInstance() {
}

DispositionHist::DispositionHist(const DispositionHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.DispositionHist)
}

void DispositionHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 71;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispositionHist::~DispositionHist() {
  // @@protoc_insertion_point(destructor:comphealth.DispositionHist)
  SharedDtor();
}

void DispositionHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void DispositionHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispositionHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DispositionHist_descriptor_;
}

const DispositionHist& DispositionHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

DispositionHist* DispositionHist::default_instance_ = NULL;

DispositionHist* DispositionHist::New() const {
  return new DispositionHist;
}

void DispositionHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 71;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DispositionHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.DispositionHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.DISPOSITION k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::DISPOSITION_IsValid(value)) {
            set_k(static_cast< ::comphealth::DISPOSITION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.DispositionHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.DispositionHist)
  return false;
#undef DO_
}

void DispositionHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.DispositionHist)
  // required .comphealth.DISPOSITION k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.DispositionHist)
}

::google::protobuf::uint8* DispositionHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.DispositionHist)
  // required .comphealth.DISPOSITION k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.DispositionHist)
  return target;
}

int DispositionHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.DISPOSITION k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispositionHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DispositionHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DispositionHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DispositionHist::MergeFrom(const DispositionHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DispositionHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispositionHist::CopyFrom(const DispositionHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispositionHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DispositionHist::Swap(DispositionHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DispositionHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DispositionHist_descriptor_;
  metadata.reflection = DispositionHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EtypeHist::kKFieldNumber;
const int EtypeHist::kVFieldNumber;
const int EtypeHist::kSFieldNumber;
#endif  // !_MSC_VER

EtypeHist::EtypeHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.EtypeHist)
}

void EtypeHist::InitAsDefaultInstance() {
}

EtypeHist::EtypeHist(const EtypeHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.EtypeHist)
}

void EtypeHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 0;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EtypeHist::~EtypeHist() {
  // @@protoc_insertion_point(destructor:comphealth.EtypeHist)
  SharedDtor();
}

void EtypeHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void EtypeHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EtypeHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EtypeHist_descriptor_;
}

const EtypeHist& EtypeHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

EtypeHist* EtypeHist::default_instance_ = NULL;

EtypeHist* EtypeHist::New() const {
  return new EtypeHist;
}

void EtypeHist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EtypeHist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(k_, v_);
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EtypeHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.EtypeHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.ETYPE k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::ETYPE_IsValid(value)) {
            set_k(static_cast< ::comphealth::ETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.EtypeHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.EtypeHist)
  return false;
#undef DO_
}

void EtypeHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.EtypeHist)
  // required .comphealth.ETYPE k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.EtypeHist)
}

::google::protobuf::uint8* EtypeHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.EtypeHist)
  // required .comphealth.ETYPE k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.EtypeHist)
  return target;
}

int EtypeHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.ETYPE k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EtypeHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EtypeHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EtypeHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EtypeHist::MergeFrom(const EtypeHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EtypeHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtypeHist::CopyFrom(const EtypeHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtypeHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EtypeHist::Swap(EtypeHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EtypeHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EtypeHist_descriptor_;
  metadata.reflection = EtypeHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EtypeCountHist::kLinkedFieldNumber;
const int EtypeCountHist::kIpFieldNumber;
const int EtypeCountHist::kEdFieldNumber;
const int EtypeCountHist::kAsgFieldNumber;
const int EtypeCountHist::kVFieldNumber;
#endif  // !_MSC_VER

EtypeCountHist::EtypeCountHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.EtypeCountHist)
}

void EtypeCountHist::InitAsDefaultInstance() {
}

EtypeCountHist::EtypeCountHist(const EtypeCountHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.EtypeCountHist)
}

void EtypeCountHist::SharedCtor() {
  _cached_size_ = 0;
  linked_ = false;
  ip_ = 0;
  ed_ = 0;
  asg_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EtypeCountHist::~EtypeCountHist() {
  // @@protoc_insertion_point(destructor:comphealth.EtypeCountHist)
  SharedDtor();
}

void EtypeCountHist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EtypeCountHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EtypeCountHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EtypeCountHist_descriptor_;
}

const EtypeCountHist& EtypeCountHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

EtypeCountHist* EtypeCountHist::default_instance_ = NULL;

EtypeCountHist* EtypeCountHist::New() const {
  return new EtypeCountHist;
}

void EtypeCountHist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EtypeCountHist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(linked_, v_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EtypeCountHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.EtypeCountHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ed;
        break;
      }

      // required int32 ed = 2;
      case 2: {
        if (tag == 16) {
         parse_ed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ed_)));
          set_has_ed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_asg;
        break;
      }

      // required int32 asg = 3;
      case 3: {
        if (tag == 24) {
         parse_asg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asg_)));
          set_has_asg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_v;
        break;
      }

      // required int32 v = 4;
      case 4: {
        if (tag == 32) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_linked;
        break;
      }

      // required bool linked = 5;
      case 5: {
        if (tag == 40) {
         parse_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.EtypeCountHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.EtypeCountHist)
  return false;
#undef DO_
}

void EtypeCountHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.EtypeCountHist)
  // required int32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 ed = 2;
  if (has_ed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ed(), output);
  }

  // required int32 asg = 3;
  if (has_asg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->asg(), output);
  }

  // required int32 v = 4;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v(), output);
  }

  // required bool linked = 5;
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->linked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.EtypeCountHist)
}

::google::protobuf::uint8* EtypeCountHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.EtypeCountHist)
  // required int32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 ed = 2;
  if (has_ed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ed(), target);
  }

  // required int32 asg = 3;
  if (has_asg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->asg(), target);
  }

  // required int32 v = 4;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v(), target);
  }

  // required bool linked = 5;
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->linked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.EtypeCountHist)
  return target;
}

int EtypeCountHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool linked = 5;
    if (has_linked()) {
      total_size += 1 + 1;
    }

    // required int32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int32 ed = 2;
    if (has_ed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ed());
    }

    // required int32 asg = 3;
    if (has_asg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asg());
    }

    // required int32 v = 4;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EtypeCountHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EtypeCountHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EtypeCountHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EtypeCountHist::MergeFrom(const EtypeCountHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linked()) {
      set_linked(from.linked());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ed()) {
      set_ed(from.ed());
    }
    if (from.has_asg()) {
      set_asg(from.asg());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EtypeCountHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtypeCountHist::CopyFrom(const EtypeCountHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtypeCountHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void EtypeCountHist::Swap(EtypeCountHist* other) {
  if (other != this) {
    std::swap(linked_, other->linked_);
    std::swap(ip_, other->ip_);
    std::swap(ed_, other->ed_);
    std::swap(asg_, other->asg_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EtypeCountHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EtypeCountHist_descriptor_;
  metadata.reflection = EtypeCountHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SourceHist::kKFieldNumber;
const int SourceHist::kVFieldNumber;
const int SourceHist::kSFieldNumber;
#endif  // !_MSC_VER

SourceHist::SourceHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.SourceHist)
}

void SourceHist::InitAsDefaultInstance() {
}

SourceHist::SourceHist(const SourceHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.SourceHist)
}

void SourceHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 61;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceHist::~SourceHist() {
  // @@protoc_insertion_point(destructor:comphealth.SourceHist)
  SharedDtor();
}

void SourceHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void SourceHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceHist_descriptor_;
}

const SourceHist& SourceHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

SourceHist* SourceHist::default_instance_ = NULL;

SourceHist* SourceHist::New() const {
  return new SourceHist;
}

void SourceHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 61;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SourceHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.SourceHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.SOURCE k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::SOURCE_IsValid(value)) {
            set_k(static_cast< ::comphealth::SOURCE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.SourceHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.SourceHist)
  return false;
#undef DO_
}

void SourceHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.SourceHist)
  // required .comphealth.SOURCE k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.SourceHist)
}

::google::protobuf::uint8* SourceHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.SourceHist)
  // required .comphealth.SOURCE k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.SourceHist)
  return target;
}

int SourceHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.SOURCE k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SourceHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SourceHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SourceHist::MergeFrom(const SourceHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SourceHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceHist::CopyFrom(const SourceHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SourceHist::Swap(SourceHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SourceHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SourceHist_descriptor_;
  metadata.reflection = SourceHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayerHist::kKFieldNumber;
const int PayerHist::kVFieldNumber;
const int PayerHist::kSFieldNumber;
#endif  // !_MSC_VER

PayerHist::PayerHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PayerHist)
}

void PayerHist::InitAsDefaultInstance() {
}

PayerHist::PayerHist(const PayerHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PayerHist)
}

void PayerHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 41;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayerHist::~PayerHist() {
  // @@protoc_insertion_point(destructor:comphealth.PayerHist)
  SharedDtor();
}

void PayerHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void PayerHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayerHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayerHist_descriptor_;
}

const PayerHist& PayerHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

PayerHist* PayerHist::default_instance_ = NULL;

PayerHist* PayerHist::New() const {
  return new PayerHist;
}

void PayerHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 41;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayerHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PayerHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.PAYER k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::PAYER_IsValid(value)) {
            set_k(static_cast< ::comphealth::PAYER >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PayerHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PayerHist)
  return false;
#undef DO_
}

void PayerHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PayerHist)
  // required .comphealth.PAYER k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PayerHist)
}

::google::protobuf::uint8* PayerHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PayerHist)
  // required .comphealth.PAYER k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PayerHist)
  return target;
}

int PayerHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.PAYER k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayerHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayerHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayerHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayerHist::MergeFrom(const PayerHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayerHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayerHist::CopyFrom(const PayerHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayerHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayerHist::Swap(PayerHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayerHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayerHist_descriptor_;
  metadata.reflection = PayerHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceHist::kKFieldNumber;
const int RaceHist::kVFieldNumber;
const int RaceHist::kSFieldNumber;
#endif  // !_MSC_VER

RaceHist::RaceHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.RaceHist)
}

void RaceHist::InitAsDefaultInstance() {
}

RaceHist::RaceHist(const RaceHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.RaceHist)
}

void RaceHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 51;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceHist::~RaceHist() {
  // @@protoc_insertion_point(destructor:comphealth.RaceHist)
  SharedDtor();
}

void RaceHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void RaceHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceHist_descriptor_;
}

const RaceHist& RaceHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

RaceHist* RaceHist::default_instance_ = NULL;

RaceHist* RaceHist::New() const {
  return new RaceHist;
}

void RaceHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 51;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.RaceHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.RACE k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::RACE_IsValid(value)) {
            set_k(static_cast< ::comphealth::RACE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.RaceHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.RaceHist)
  return false;
#undef DO_
}

void RaceHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.RaceHist)
  // required .comphealth.RACE k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.RaceHist)
}

::google::protobuf::uint8* RaceHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.RaceHist)
  // required .comphealth.RACE k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.RaceHist)
  return target;
}

int RaceHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.RACE k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceHist::MergeFrom(const RaceHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceHist::CopyFrom(const RaceHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RaceHist::Swap(RaceHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceHist_descriptor_;
  metadata.reflection = RaceHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeathHist::kKFieldNumber;
const int DeathHist::kVFieldNumber;
const int DeathHist::kSFieldNumber;
#endif  // !_MSC_VER

DeathHist::DeathHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.DeathHist)
}

void DeathHist::InitAsDefaultInstance() {
}

DeathHist::DeathHist(const DeathHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.DeathHist)
}

void DeathHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 30;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeathHist::~DeathHist() {
  // @@protoc_insertion_point(destructor:comphealth.DeathHist)
  SharedDtor();
}

void DeathHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void DeathHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeathHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeathHist_descriptor_;
}

const DeathHist& DeathHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

DeathHist* DeathHist::default_instance_ = NULL;

DeathHist* DeathHist::New() const {
  return new DeathHist;
}

void DeathHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 30;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeathHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.DeathHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.DEATH k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::DEATH_IsValid(value)) {
            set_k(static_cast< ::comphealth::DEATH >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.DeathHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.DeathHist)
  return false;
#undef DO_
}

void DeathHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.DeathHist)
  // required .comphealth.DEATH k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.DeathHist)
}

::google::protobuf::uint8* DeathHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.DeathHist)
  // required .comphealth.DEATH k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.DeathHist)
  return target;
}

int DeathHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.DEATH k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeathHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeathHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeathHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeathHist::MergeFrom(const DeathHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeathHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeathHist::CopyFrom(const DeathHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeathHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeathHist::Swap(DeathHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeathHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeathHist_descriptor_;
  metadata.reflection = DeathHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SexHist::kKFieldNumber;
const int SexHist::kVFieldNumber;
const int SexHist::kSFieldNumber;
#endif  // !_MSC_VER

SexHist::SexHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.SexHist)
}

void SexHist::InitAsDefaultInstance() {
}

SexHist::SexHist(const SexHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.SexHist)
}

void SexHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 10;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SexHist::~SexHist() {
  // @@protoc_insertion_point(destructor:comphealth.SexHist)
  SharedDtor();
}

void SexHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void SexHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SexHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SexHist_descriptor_;
}

const SexHist& SexHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

SexHist* SexHist::default_instance_ = NULL;

SexHist* SexHist::New() const {
  return new SexHist;
}

void SexHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 10;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SexHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.SexHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.SEX k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::SEX_IsValid(value)) {
            set_k(static_cast< ::comphealth::SEX >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.SexHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.SexHist)
  return false;
#undef DO_
}

void SexHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.SexHist)
  // required .comphealth.SEX k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.SexHist)
}

::google::protobuf::uint8* SexHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.SexHist)
  // required .comphealth.SEX k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.SexHist)
  return target;
}

int SexHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.SEX k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SexHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SexHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SexHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SexHist::MergeFrom(const SexHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SexHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SexHist::CopyFrom(const SexHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SexHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SexHist::Swap(SexHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SexHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SexHist_descriptor_;
  metadata.reflection = SexHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DNRHist::kKFieldNumber;
const int DNRHist::kVFieldNumber;
const int DNRHist::kSFieldNumber;
#endif  // !_MSC_VER

DNRHist::DNRHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.DNRHist)
}

void DNRHist::InitAsDefaultInstance() {
}

DNRHist::DNRHist(const DNRHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.DNRHist)
}

void DNRHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 80;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DNRHist::~DNRHist() {
  // @@protoc_insertion_point(destructor:comphealth.DNRHist)
  SharedDtor();
}

void DNRHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void DNRHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNRHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DNRHist_descriptor_;
}

const DNRHist& DNRHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

DNRHist* DNRHist::default_instance_ = NULL;

DNRHist* DNRHist::New() const {
  return new DNRHist;
}

void DNRHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 80;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DNRHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.DNRHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.DNR k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::DNR_IsValid(value)) {
            set_k(static_cast< ::comphealth::DNR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.DNRHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.DNRHist)
  return false;
#undef DO_
}

void DNRHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.DNRHist)
  // required .comphealth.DNR k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.DNRHist)
}

::google::protobuf::uint8* DNRHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.DNRHist)
  // required .comphealth.DNR k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.DNRHist)
  return target;
}

int DNRHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.DNR k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNRHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DNRHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DNRHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DNRHist::MergeFrom(const DNRHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DNRHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNRHist::CopyFrom(const DNRHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNRHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DNRHist::Swap(DNRHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DNRHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DNRHist_descriptor_;
  metadata.reflection = DNRHist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PZipHist::kKFieldNumber;
const int PZipHist::kVFieldNumber;
const int PZipHist::kSFieldNumber;
#endif  // !_MSC_VER

PZipHist::PZipHist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PZipHist)
}

void PZipHist::InitAsDefaultInstance() {
}

PZipHist::PZipHist(const PZipHist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PZipHist)
}

void PZipHist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 101;
  v_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PZipHist::~PZipHist() {
  // @@protoc_insertion_point(destructor:comphealth.PZipHist)
  SharedDtor();
}

void PZipHist::SharedDtor() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void PZipHist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PZipHist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PZipHist_descriptor_;
}

const PZipHist& PZipHist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstat_2eproto();
  return *default_instance_;
}

PZipHist* PZipHist::default_instance_ = NULL;

PZipHist* PZipHist::New() const {
  return new PZipHist;
}

void PZipHist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_ = 101;
    v_ = 0;
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PZipHist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PZipHist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.PZIP k = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::PZIP_IsValid(value)) {
            set_k(static_cast< ::comphealth::PZIP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }

      // required int32 v = 2;
      case 2: {
        if (tag == 16) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s;
        break;
      }

      // optional string s = 3;
      case 3: {
        if (tag == 26) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PZipHist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PZipHist)
  return false;
#undef DO_
}

void PZipHist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PZipHist)
  // required .comphealth.PZIP k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->k(), output);
  }

  // required int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PZipHist)
}

::google::protobuf::uint8* PZipHist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PZipHist)
  // required .comphealth.PZIP k = 1;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->k(), target);
  }

  // required int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }

  // optional string s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PZipHist)
  return target;
}

int PZipHist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.PZIP k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->k());
    }

    // required int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

    // optional string s = 3;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PZipHist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PZipHist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PZipHist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PZipHist::MergeFrom(const PZipHist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PZipHist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PZipHist::CopyFrom(const PZipHist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PZipHist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PZipHist::Swap(PZipHist* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PZipHist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PZipHist_descriptor_;
  metadata.reflection = PZipHist_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

// @@protoc_insertion_point(global_scope)

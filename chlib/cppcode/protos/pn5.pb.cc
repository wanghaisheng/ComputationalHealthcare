// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pn5.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pn5.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexFile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pn5_2eproto() {
  protobuf_AddDesc_pn5_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pn5.proto");
  GOOGLE_CHECK(file != NULL);
  PIndex_descriptor_ = file->message_type(0);
  static const int PIndex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIndex, patient_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIndex, position_),
  };
  PIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PIndex_descriptor_,
      PIndex::default_instance_,
      PIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PIndex));
  VIndex_descriptor_ = file->message_type(1);
  static const int VIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIndex, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIndex, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIndex, meta_),
  };
  VIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIndex_descriptor_,
      VIndex::default_instance_,
      VIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIndex));
  IMeta_descriptor_ = file->message_type(2);
  static const int IMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMeta, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMeta, ftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMeta, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMeta, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMeta, state_),
  };
  IMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMeta_descriptor_,
      IMeta::default_instance_,
      IMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMeta));
  IndexFile_descriptor_ = file->message_type(3);
  static const int IndexFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexFile, patients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexFile, visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexFile, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexFile, filename_),
  };
  IndexFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexFile_descriptor_,
      IndexFile::default_instance_,
      IndexFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexFile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pn5_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PIndex_descriptor_, &PIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIndex_descriptor_, &VIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMeta_descriptor_, &IMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexFile_descriptor_, &IndexFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pn5_2eproto() {
  delete PIndex::default_instance_;
  delete PIndex_reflection_;
  delete VIndex::default_instance_;
  delete VIndex_reflection_;
  delete IMeta::default_instance_;
  delete IMeta_reflection_;
  delete IndexFile::default_instance_;
  delete IndexFile_reflection_;
}

void protobuf_AddDesc_pn5_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpn5.proto\"/\n\006PIndex\022\023\n\013patient_key\030\001 \002"
    "(\t\022\020\n\010position\030\002 \002(\003\"5\n\006VIndex\022\013\n\003key\030\001 "
    "\002(\t\022\020\n\010position\030\002 \002(\003\022\014\n\004meta\030\003 \001(\005\"Q\n\005I"
    "Meta\022\r\n\005index\030\001 \002(\005\022\r\n\005ftype\030\005 \001(\t\022\014\n\004ye"
    "ar\030\002 \001(\005\022\r\n\005dtype\030\003 \001(\t\022\r\n\005state\030\004 \001(\t\"k"
    "\n\tIndexFile\022\031\n\010patients\030\001 \003(\0132\007.PIndex\022\027"
    "\n\006visits\030\002 \003(\0132\007.VIndex\022\030\n\010metadata\030\003 \003("
    "\0132\006.IMeta\022\020\n\010filename\030\004 \002(\t", 307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pn5.proto", &protobuf_RegisterTypes);
  PIndex::default_instance_ = new PIndex();
  VIndex::default_instance_ = new VIndex();
  IMeta::default_instance_ = new IMeta();
  IndexFile::default_instance_ = new IndexFile();
  PIndex::default_instance_->InitAsDefaultInstance();
  VIndex::default_instance_->InitAsDefaultInstance();
  IMeta::default_instance_->InitAsDefaultInstance();
  IndexFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pn5_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pn5_2eproto {
  StaticDescriptorInitializer_pn5_2eproto() {
    protobuf_AddDesc_pn5_2eproto();
  }
} static_descriptor_initializer_pn5_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PIndex::kPatientKeyFieldNumber;
const int PIndex::kPositionFieldNumber;
#endif  // !_MSC_VER

PIndex::PIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PIndex)
}

void PIndex::InitAsDefaultInstance() {
}

PIndex::PIndex(const PIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PIndex)
}

void PIndex::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  patient_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PIndex::~PIndex() {
  // @@protoc_insertion_point(destructor:PIndex)
  SharedDtor();
}

void PIndex::SharedDtor() {
  if (patient_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patient_key_;
  }
  if (this != default_instance_) {
  }
}

void PIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PIndex_descriptor_;
}

const PIndex& PIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn5_2eproto();
  return *default_instance_;
}

PIndex* PIndex::default_instance_ = NULL;

PIndex* PIndex::New() const {
  return new PIndex;
}

void PIndex::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_patient_key()) {
      if (patient_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patient_key_->clear();
      }
    }
    position_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string patient_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patient_key().data(), this->patient_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patient_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required int64 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PIndex)
  return false;
#undef DO_
}

void PIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PIndex)
  // required string patient_key = 1;
  if (has_patient_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_key().data(), this->patient_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patient_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->patient_key(), output);
  }

  // required int64 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PIndex)
}

::google::protobuf::uint8* PIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PIndex)
  // required string patient_key = 1;
  if (has_patient_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_key().data(), this->patient_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patient_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patient_key(), target);
  }

  // required int64 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PIndex)
  return target;
}

int PIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string patient_key = 1;
    if (has_patient_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patient_key());
    }

    // required int64 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PIndex::MergeFrom(const PIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patient_key()) {
      set_patient_key(from.patient_key());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PIndex::CopyFrom(const PIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PIndex::Swap(PIndex* other) {
  if (other != this) {
    std::swap(patient_key_, other->patient_key_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PIndex_descriptor_;
  metadata.reflection = PIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIndex::kKeyFieldNumber;
const int VIndex::kPositionFieldNumber;
const int VIndex::kMetaFieldNumber;
#endif  // !_MSC_VER

VIndex::VIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VIndex)
}

void VIndex::InitAsDefaultInstance() {
}

VIndex::VIndex(const VIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VIndex)
}

void VIndex::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = GOOGLE_LONGLONG(0);
  meta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIndex::~VIndex() {
  // @@protoc_insertion_point(destructor:VIndex)
  SharedDtor();
}

void VIndex::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void VIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIndex_descriptor_;
}

const VIndex& VIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn5_2eproto();
  return *default_instance_;
}

VIndex* VIndex::default_instance_ = NULL;

VIndex* VIndex::New() const {
  return new VIndex;
}

void VIndex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VIndex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(position_, meta_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required int64 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_meta;
        break;
      }

      // optional int32 meta = 3;
      case 3: {
        if (tag == 24) {
         parse_meta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_)));
          set_has_meta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VIndex)
  return false;
#undef DO_
}

void VIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VIndex)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required int64 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->position(), output);
  }

  // optional int32 meta = 3;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->meta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VIndex)
}

::google::protobuf::uint8* VIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VIndex)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required int64 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->position(), target);
  }

  // optional int32 meta = 3;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->meta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VIndex)
  return target;
}

int VIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required int64 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position());
    }

    // optional int32 meta = 3;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIndex::MergeFrom(const VIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_meta()) {
      set_meta(from.meta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIndex::CopyFrom(const VIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VIndex::Swap(VIndex* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(position_, other->position_);
    std::swap(meta_, other->meta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIndex_descriptor_;
  metadata.reflection = VIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMeta::kIndexFieldNumber;
const int IMeta::kFtypeFieldNumber;
const int IMeta::kYearFieldNumber;
const int IMeta::kDtypeFieldNumber;
const int IMeta::kStateFieldNumber;
#endif  // !_MSC_VER

IMeta::IMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMeta)
}

void IMeta::InitAsDefaultInstance() {
}

IMeta::IMeta(const IMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMeta)
}

void IMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  ftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year_ = 0;
  dtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMeta::~IMeta() {
  // @@protoc_insertion_point(destructor:IMeta)
  SharedDtor();
}

void IMeta::SharedDtor() {
  if (ftype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ftype_;
  }
  if (dtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dtype_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void IMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMeta_descriptor_;
}

const IMeta& IMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn5_2eproto();
  return *default_instance_;
}

IMeta* IMeta::default_instance_ = NULL;

IMeta* IMeta::New() const {
  return new IMeta;
}

void IMeta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMeta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(index_, year_);
    if (has_ftype()) {
      if (ftype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ftype_->clear();
      }
    }
    if (has_dtype()) {
      if (dtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dtype_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_year;
        break;
      }

      // optional int32 year = 2;
      case 2: {
        if (tag == 16) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dtype;
        break;
      }

      // optional string dtype = 3;
      case 3: {
        if (tag == 26) {
         parse_dtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dtype().data(), this->dtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_state;
        break;
      }

      // optional string state = 4;
      case 4: {
        if (tag == 34) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ftype;
        break;
      }

      // optional string ftype = 5;
      case 5: {
        if (tag == 42) {
         parse_ftype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ftype().data(), this->ftype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ftype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMeta)
  return false;
#undef DO_
}

void IMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMeta)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 year = 2;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->year(), output);
  }

  // optional string dtype = 3;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dtype().data(), this->dtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dtype(), output);
  }

  // optional string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->state(), output);
  }

  // optional string ftype = 5;
  if (has_ftype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ftype().data(), this->ftype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ftype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ftype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IMeta)
}

::google::protobuf::uint8* IMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMeta)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 year = 2;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->year(), target);
  }

  // optional string dtype = 3;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dtype().data(), this->dtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dtype(), target);
  }

  // optional string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->state(), target);
  }

  // optional string ftype = 5;
  if (has_ftype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ftype().data(), this->ftype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ftype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ftype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IMeta)
  return target;
}

int IMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string ftype = 5;
    if (has_ftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftype());
    }

    // optional int32 year = 2;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional string dtype = 3;
    if (has_dtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dtype());
    }

    // optional string state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMeta::MergeFrom(const IMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ftype()) {
      set_ftype(from.ftype());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_dtype()) {
      set_dtype(from.dtype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMeta::CopyFrom(const IMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMeta::Swap(IMeta* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(ftype_, other->ftype_);
    std::swap(year_, other->year_);
    std::swap(dtype_, other->dtype_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMeta_descriptor_;
  metadata.reflection = IMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexFile::kPatientsFieldNumber;
const int IndexFile::kVisitsFieldNumber;
const int IndexFile::kMetadataFieldNumber;
const int IndexFile::kFilenameFieldNumber;
#endif  // !_MSC_VER

IndexFile::IndexFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexFile)
}

void IndexFile::InitAsDefaultInstance() {
}

IndexFile::IndexFile(const IndexFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexFile)
}

void IndexFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexFile::~IndexFile() {
  // @@protoc_insertion_point(destructor:IndexFile)
  SharedDtor();
}

void IndexFile::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void IndexFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexFile_descriptor_;
}

const IndexFile& IndexFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn5_2eproto();
  return *default_instance_;
}

IndexFile* IndexFile::default_instance_ = NULL;

IndexFile* IndexFile::New() const {
  return new IndexFile;
}

void IndexFile::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  patients_.Clear();
  visits_.Clear();
  metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PIndex patients = 1;
      case 1: {
        if (tag == 10) {
         parse_patients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_patients;
        if (input->ExpectTag(18)) goto parse_visits;
        break;
      }

      // repeated .VIndex visits = 2;
      case 2: {
        if (tag == 18) {
         parse_visits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_visits;
        if (input->ExpectTag(26)) goto parse_metadata;
        break;
      }

      // repeated .IMeta metadata = 3;
      case 3: {
        if (tag == 26) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_metadata;
        if (input->ExpectTag(34)) goto parse_filename;
        break;
      }

      // required string filename = 4;
      case 4: {
        if (tag == 34) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexFile)
  return false;
#undef DO_
}

void IndexFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexFile)
  // repeated .PIndex patients = 1;
  for (int i = 0; i < this->patients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->patients(i), output);
  }

  // repeated .VIndex visits = 2;
  for (int i = 0; i < this->visits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->visits(i), output);
  }

  // repeated .IMeta metadata = 3;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->metadata(i), output);
  }

  // required string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexFile)
}

::google::protobuf::uint8* IndexFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexFile)
  // repeated .PIndex patients = 1;
  for (int i = 0; i < this->patients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->patients(i), target);
  }

  // repeated .VIndex visits = 2;
  for (int i = 0; i < this->visits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->visits(i), target);
  }

  // repeated .IMeta metadata = 3;
  for (int i = 0; i < this->metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->metadata(i), target);
  }

  // required string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexFile)
  return target;
}

int IndexFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  // repeated .PIndex patients = 1;
  total_size += 1 * this->patients_size();
  for (int i = 0; i < this->patients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patients(i));
  }

  // repeated .VIndex visits = 2;
  total_size += 1 * this->visits_size();
  for (int i = 0; i < this->visits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visits(i));
  }

  // repeated .IMeta metadata = 3;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexFile::MergeFrom(const IndexFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  patients_.MergeFrom(from.patients_);
  visits_.MergeFrom(from.visits_);
  metadata_.MergeFrom(from.metadata_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexFile::CopyFrom(const IndexFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->patients())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->visits())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->metadata())) return false;
  return true;
}

void IndexFile::Swap(IndexFile* other) {
  if (other != this) {
    patients_.Swap(&other->patients_);
    visits_.Swap(&other->visits_);
    metadata_.Swap(&other->metadata_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexFile_descriptor_;
  metadata.reflection = IndexFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pn4.proto

#ifndef PROTOBUF_pn4_2eproto__INCLUDED
#define PROTOBUF_pn4_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "penums.pb.h"
#include "pvisit.pb.h"
#include "pstat.pb.h"
// @@protoc_insertion_point(includes)

namespace comphealth {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pn4_2eproto();
void protobuf_AssignDesc_pn4_2eproto();
void protobuf_ShutdownFile_pn4_2eproto();

class NEntry;
class N4VCOUNT;

// ===================================================================

class NEntry : public ::google::protobuf::Message {
 public:
  NEntry();
  virtual ~NEntry();

  NEntry(const NEntry& from);

  inline NEntry& operator=(const NEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NEntry& default_instance();

  void Swap(NEntry* other);

  // implements Message ----------------------------------------------

  NEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NEntry& from);
  void MergeFrom(const NEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const char* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  inline void set_allocated_index(::std::string* index);

  // required string sub = 3;
  inline bool has_sub() const;
  inline void clear_sub();
  static const int kSubFieldNumber = 3;
  inline const ::std::string& sub() const;
  inline void set_sub(const ::std::string& value);
  inline void set_sub(const char* value);
  inline void set_sub(const char* value, size_t size);
  inline ::std::string* mutable_sub();
  inline ::std::string* release_sub();
  inline void set_allocated_sub(::std::string* sub);

  // required int32 count = 12;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 12;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required int32 linked_visits = 13;
  inline bool has_linked_visits() const;
  inline void clear_linked_visits();
  static const int kLinkedVisitsFieldNumber = 13;
  inline ::google::protobuf::int32 linked_visits() const;
  inline void set_linked_visits(::google::protobuf::int32 value);

  // required int32 unlinked_visits = 14;
  inline bool has_unlinked_visits() const;
  inline void clear_unlinked_visits();
  static const int kUnlinkedVisitsFieldNumber = 14;
  inline ::google::protobuf::int32 unlinked_visits() const;
  inline void set_unlinked_visits(::google::protobuf::int32 value);

  // required int32 patients = 15;
  inline bool has_patients() const;
  inline void clear_patients();
  static const int kPatientsFieldNumber = 15;
  inline ::google::protobuf::int32 patients() const;
  inline void set_patients(::google::protobuf::int32 value);

  // required .comphealth.IntHist index_first_days = 16;
  inline bool has_index_first_days() const;
  inline void clear_index_first_days();
  static const int kIndexFirstDaysFieldNumber = 16;
  inline const ::comphealth::IntHist& index_first_days() const;
  inline ::comphealth::IntHist* mutable_index_first_days();
  inline ::comphealth::IntHist* release_index_first_days();
  inline void set_allocated_index_first_days(::comphealth::IntHist* index_first_days);

  // required .comphealth.IntHist sub_first_days = 20;
  inline bool has_sub_first_days() const;
  inline void clear_sub_first_days();
  static const int kSubFirstDaysFieldNumber = 20;
  inline const ::comphealth::IntHist& sub_first_days() const;
  inline ::comphealth::IntHist* mutable_sub_first_days();
  inline ::comphealth::IntHist* release_sub_first_days();
  inline void set_allocated_sub_first_days(::comphealth::IntHist* sub_first_days);

  // required int32 index_visits = 17;
  inline bool has_index_visits() const;
  inline void clear_index_visits();
  static const int kIndexVisitsFieldNumber = 17;
  inline ::google::protobuf::int32 index_visits() const;
  inline void set_index_visits(::google::protobuf::int32 value);

  // required int32 sub_visits = 18;
  inline bool has_sub_visits() const;
  inline void clear_sub_visits();
  static const int kSubVisitsFieldNumber = 18;
  inline ::google::protobuf::int32 sub_visits() const;
  inline void set_sub_visits(::google::protobuf::int32 value);

  // required int32 intersection_visits = 19;
  inline bool has_intersection_visits() const;
  inline void clear_intersection_visits();
  static const int kIntersectionVisitsFieldNumber = 19;
  inline ::google::protobuf::int32 intersection_visits() const;
  inline void set_intersection_visits(::google::protobuf::int32 value);

  // required int32 patient_index_first = 21;
  inline bool has_patient_index_first() const;
  inline void clear_patient_index_first();
  static const int kPatientIndexFirstFieldNumber = 21;
  inline ::google::protobuf::int32 patient_index_first() const;
  inline void set_patient_index_first(::google::protobuf::int32 value);

  // required int32 patient_sub_first = 23;
  inline bool has_patient_sub_first() const;
  inline void clear_patient_sub_first();
  static const int kPatientSubFirstFieldNumber = 23;
  inline ::google::protobuf::int32 patient_sub_first() const;
  inline void set_patient_sub_first(::google::protobuf::int32 value);

  // repeated .comphealth.DXI dxh = 24;
  inline int dxh_size() const;
  inline void clear_dxh();
  static const int kDxhFieldNumber = 24;
  inline const ::comphealth::DXI& dxh(int index) const;
  inline ::comphealth::DXI* mutable_dxh(int index);
  inline ::comphealth::DXI* add_dxh();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::DXI >&
      dxh() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::DXI >*
      mutable_dxh();

  // repeated .comphealth.KVI primary_prh = 25;
  inline int primary_prh_size() const;
  inline void clear_primary_prh();
  static const int kPrimaryPrhFieldNumber = 25;
  inline const ::comphealth::KVI& primary_prh(int index) const;
  inline ::comphealth::KVI* mutable_primary_prh(int index);
  inline ::comphealth::KVI* add_primary_prh();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
      primary_prh() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
      mutable_primary_prh();

  // repeated .comphealth.KVI prh = 26;
  inline int prh_size() const;
  inline void clear_prh();
  static const int kPrhFieldNumber = 26;
  inline const ::comphealth::KVI& prh(int index) const;
  inline ::comphealth::KVI* mutable_prh(int index);
  inline ::comphealth::KVI* add_prh();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
      prh() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
      mutable_prh();

  // repeated .comphealth.KVI exh = 27;
  inline int exh_size() const;
  inline void clear_exh();
  static const int kExhFieldNumber = 27;
  inline const ::comphealth::KVI& exh(int index) const;
  inline ::comphealth::KVI* mutable_exh(int index);
  inline ::comphealth::KVI* add_exh();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
      exh() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
      mutable_exh();

  // repeated .comphealth.KVI drgh = 28;
  inline int drgh_size() const;
  inline void clear_drgh();
  static const int kDrghFieldNumber = 28;
  inline const ::comphealth::KVI& drgh(int index) const;
  inline ::comphealth::KVI* mutable_drgh(int index);
  inline ::comphealth::KVI* add_drgh();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
      drgh() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
      mutable_drgh();

  // optional .comphealth.AGG first_inpatient_visit = 29;
  inline bool has_first_inpatient_visit() const;
  inline void clear_first_inpatient_visit();
  static const int kFirstInpatientVisitFieldNumber = 29;
  inline const ::comphealth::AGG& first_inpatient_visit() const;
  inline ::comphealth::AGG* mutable_first_inpatient_visit();
  inline ::comphealth::AGG* release_first_inpatient_visit();
  inline void set_allocated_first_inpatient_visit(::comphealth::AGG* first_inpatient_visit);

  // repeated .comphealth.N4VCOUNT vtype_count = 30;
  inline int vtype_count_size() const;
  inline void clear_vtype_count();
  static const int kVtypeCountFieldNumber = 30;
  inline const ::comphealth::N4VCOUNT& vtype_count(int index) const;
  inline ::comphealth::N4VCOUNT* mutable_vtype_count(int index);
  inline ::comphealth::N4VCOUNT* add_vtype_count();
  inline const ::google::protobuf::RepeatedPtrField< ::comphealth::N4VCOUNT >&
      vtype_count() const;
  inline ::google::protobuf::RepeatedPtrField< ::comphealth::N4VCOUNT >*
      mutable_vtype_count();

  // @@protoc_insertion_point(class_scope:comphealth.NEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_sub();
  inline void clear_has_sub();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_linked_visits();
  inline void clear_has_linked_visits();
  inline void set_has_unlinked_visits();
  inline void clear_has_unlinked_visits();
  inline void set_has_patients();
  inline void clear_has_patients();
  inline void set_has_index_first_days();
  inline void clear_has_index_first_days();
  inline void set_has_sub_first_days();
  inline void clear_has_sub_first_days();
  inline void set_has_index_visits();
  inline void clear_has_index_visits();
  inline void set_has_sub_visits();
  inline void clear_has_sub_visits();
  inline void set_has_intersection_visits();
  inline void clear_has_intersection_visits();
  inline void set_has_patient_index_first();
  inline void clear_has_patient_index_first();
  inline void set_has_patient_sub_first();
  inline void clear_has_patient_sub_first();
  inline void set_has_first_inpatient_visit();
  inline void clear_has_first_inpatient_visit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* index_;
  ::std::string* sub_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 linked_visits_;
  ::google::protobuf::int32 unlinked_visits_;
  ::google::protobuf::int32 patients_;
  ::comphealth::IntHist* index_first_days_;
  ::comphealth::IntHist* sub_first_days_;
  ::google::protobuf::int32 index_visits_;
  ::google::protobuf::int32 sub_visits_;
  ::google::protobuf::int32 intersection_visits_;
  ::google::protobuf::int32 patient_index_first_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::DXI > dxh_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::KVI > primary_prh_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::KVI > prh_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::KVI > exh_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::KVI > drgh_;
  ::comphealth::AGG* first_inpatient_visit_;
  ::google::protobuf::RepeatedPtrField< ::comphealth::N4VCOUNT > vtype_count_;
  ::google::protobuf::int32 patient_sub_first_;
  friend void  protobuf_AddDesc_pn4_2eproto();
  friend void protobuf_AssignDesc_pn4_2eproto();
  friend void protobuf_ShutdownFile_pn4_2eproto();

  void InitAsDefaultInstance();
  static NEntry* default_instance_;
};
// -------------------------------------------------------------------

class N4VCOUNT : public ::google::protobuf::Message {
 public:
  N4VCOUNT();
  virtual ~N4VCOUNT();

  N4VCOUNT(const N4VCOUNT& from);

  inline N4VCOUNT& operator=(const N4VCOUNT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const N4VCOUNT& default_instance();

  void Swap(N4VCOUNT* other);

  // implements Message ----------------------------------------------

  N4VCOUNT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const N4VCOUNT& from);
  void MergeFrom(const N4VCOUNT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string k = 1;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 1;
  inline const ::std::string& k() const;
  inline void set_k(const ::std::string& value);
  inline void set_k(const char* value);
  inline void set_k(const char* value, size_t size);
  inline ::std::string* mutable_k();
  inline ::std::string* release_k();
  inline void set_allocated_k(::std::string* k);

  // optional int32 IP = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 2;
  inline ::google::protobuf::int32 ip() const;
  inline void set_ip(::google::protobuf::int32 value);

  // optional int32 ED = 3;
  inline bool has_ed() const;
  inline void clear_ed();
  static const int kEDFieldNumber = 3;
  inline ::google::protobuf::int32 ed() const;
  inline void set_ed(::google::protobuf::int32 value);

  // optional int32 AS = 4;
  inline bool has_as() const;
  inline void clear_as();
  static const int kASFieldNumber = 4;
  inline ::google::protobuf::int32 as() const;
  inline void set_as(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:comphealth.N4VCOUNT)
 private:
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_ed();
  inline void clear_has_ed();
  inline void set_has_as();
  inline void clear_has_as();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* k_;
  ::google::protobuf::int32 ip_;
  ::google::protobuf::int32 ed_;
  ::google::protobuf::int32 as_;
  friend void  protobuf_AddDesc_pn4_2eproto();
  friend void protobuf_AssignDesc_pn4_2eproto();
  friend void protobuf_ShutdownFile_pn4_2eproto();

  void InitAsDefaultInstance();
  static N4VCOUNT* default_instance_;
};
// ===================================================================


// ===================================================================

// NEntry

// required string key = 1;
inline bool NEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NEntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& NEntry::key() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.key)
  return *key_;
}
inline void NEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.NEntry.key)
}
inline void NEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.NEntry.key)
}
inline void NEntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.NEntry.key)
}
inline ::std::string* NEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.key)
  return key_;
}
inline ::std::string* NEntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.NEntry.key)
}

// required string index = 2;
inline bool NEntry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NEntry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NEntry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NEntry::clear_index() {
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& NEntry::index() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.index)
  return *index_;
}
inline void NEntry::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  index_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.NEntry.index)
}
inline void NEntry::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  index_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.NEntry.index)
}
inline void NEntry::set_index(const char* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.NEntry.index)
}
inline ::std::string* NEntry::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.index)
  return index_;
}
inline ::std::string* NEntry::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NEntry::set_allocated_index(::std::string* index) {
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_;
  }
  if (index) {
    set_has_index();
    index_ = index;
  } else {
    clear_has_index();
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.NEntry.index)
}

// required string sub = 3;
inline bool NEntry::has_sub() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NEntry::set_has_sub() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NEntry::clear_has_sub() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NEntry::clear_sub() {
  if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_->clear();
  }
  clear_has_sub();
}
inline const ::std::string& NEntry::sub() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.sub)
  return *sub_;
}
inline void NEntry::set_sub(const ::std::string& value) {
  set_has_sub();
  if (sub_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_ = new ::std::string;
  }
  sub_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.NEntry.sub)
}
inline void NEntry::set_sub(const char* value) {
  set_has_sub();
  if (sub_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_ = new ::std::string;
  }
  sub_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.NEntry.sub)
}
inline void NEntry::set_sub(const char* value, size_t size) {
  set_has_sub();
  if (sub_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_ = new ::std::string;
  }
  sub_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.NEntry.sub)
}
inline ::std::string* NEntry::mutable_sub() {
  set_has_sub();
  if (sub_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sub_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.sub)
  return sub_;
}
inline ::std::string* NEntry::release_sub() {
  clear_has_sub();
  if (sub_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sub_;
    sub_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NEntry::set_allocated_sub(::std::string* sub) {
  if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sub_;
  }
  if (sub) {
    set_has_sub();
    sub_ = sub;
  } else {
    clear_has_sub();
    sub_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.NEntry.sub)
}

// required int32 count = 12;
inline bool NEntry::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NEntry::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NEntry::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NEntry::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NEntry::count() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.count)
  return count_;
}
inline void NEntry::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.count)
}

// required int32 linked_visits = 13;
inline bool NEntry::has_linked_visits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NEntry::set_has_linked_visits() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NEntry::clear_has_linked_visits() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NEntry::clear_linked_visits() {
  linked_visits_ = 0;
  clear_has_linked_visits();
}
inline ::google::protobuf::int32 NEntry::linked_visits() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.linked_visits)
  return linked_visits_;
}
inline void NEntry::set_linked_visits(::google::protobuf::int32 value) {
  set_has_linked_visits();
  linked_visits_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.linked_visits)
}

// required int32 unlinked_visits = 14;
inline bool NEntry::has_unlinked_visits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NEntry::set_has_unlinked_visits() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NEntry::clear_has_unlinked_visits() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NEntry::clear_unlinked_visits() {
  unlinked_visits_ = 0;
  clear_has_unlinked_visits();
}
inline ::google::protobuf::int32 NEntry::unlinked_visits() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.unlinked_visits)
  return unlinked_visits_;
}
inline void NEntry::set_unlinked_visits(::google::protobuf::int32 value) {
  set_has_unlinked_visits();
  unlinked_visits_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.unlinked_visits)
}

// required int32 patients = 15;
inline bool NEntry::has_patients() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NEntry::set_has_patients() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NEntry::clear_has_patients() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NEntry::clear_patients() {
  patients_ = 0;
  clear_has_patients();
}
inline ::google::protobuf::int32 NEntry::patients() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.patients)
  return patients_;
}
inline void NEntry::set_patients(::google::protobuf::int32 value) {
  set_has_patients();
  patients_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.patients)
}

// required .comphealth.IntHist index_first_days = 16;
inline bool NEntry::has_index_first_days() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NEntry::set_has_index_first_days() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NEntry::clear_has_index_first_days() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NEntry::clear_index_first_days() {
  if (index_first_days_ != NULL) index_first_days_->::comphealth::IntHist::Clear();
  clear_has_index_first_days();
}
inline const ::comphealth::IntHist& NEntry::index_first_days() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.index_first_days)
  return index_first_days_ != NULL ? *index_first_days_ : *default_instance_->index_first_days_;
}
inline ::comphealth::IntHist* NEntry::mutable_index_first_days() {
  set_has_index_first_days();
  if (index_first_days_ == NULL) index_first_days_ = new ::comphealth::IntHist;
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.index_first_days)
  return index_first_days_;
}
inline ::comphealth::IntHist* NEntry::release_index_first_days() {
  clear_has_index_first_days();
  ::comphealth::IntHist* temp = index_first_days_;
  index_first_days_ = NULL;
  return temp;
}
inline void NEntry::set_allocated_index_first_days(::comphealth::IntHist* index_first_days) {
  delete index_first_days_;
  index_first_days_ = index_first_days;
  if (index_first_days) {
    set_has_index_first_days();
  } else {
    clear_has_index_first_days();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.NEntry.index_first_days)
}

// required .comphealth.IntHist sub_first_days = 20;
inline bool NEntry::has_sub_first_days() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NEntry::set_has_sub_first_days() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NEntry::clear_has_sub_first_days() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NEntry::clear_sub_first_days() {
  if (sub_first_days_ != NULL) sub_first_days_->::comphealth::IntHist::Clear();
  clear_has_sub_first_days();
}
inline const ::comphealth::IntHist& NEntry::sub_first_days() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.sub_first_days)
  return sub_first_days_ != NULL ? *sub_first_days_ : *default_instance_->sub_first_days_;
}
inline ::comphealth::IntHist* NEntry::mutable_sub_first_days() {
  set_has_sub_first_days();
  if (sub_first_days_ == NULL) sub_first_days_ = new ::comphealth::IntHist;
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.sub_first_days)
  return sub_first_days_;
}
inline ::comphealth::IntHist* NEntry::release_sub_first_days() {
  clear_has_sub_first_days();
  ::comphealth::IntHist* temp = sub_first_days_;
  sub_first_days_ = NULL;
  return temp;
}
inline void NEntry::set_allocated_sub_first_days(::comphealth::IntHist* sub_first_days) {
  delete sub_first_days_;
  sub_first_days_ = sub_first_days;
  if (sub_first_days) {
    set_has_sub_first_days();
  } else {
    clear_has_sub_first_days();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.NEntry.sub_first_days)
}

// required int32 index_visits = 17;
inline bool NEntry::has_index_visits() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NEntry::set_has_index_visits() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NEntry::clear_has_index_visits() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NEntry::clear_index_visits() {
  index_visits_ = 0;
  clear_has_index_visits();
}
inline ::google::protobuf::int32 NEntry::index_visits() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.index_visits)
  return index_visits_;
}
inline void NEntry::set_index_visits(::google::protobuf::int32 value) {
  set_has_index_visits();
  index_visits_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.index_visits)
}

// required int32 sub_visits = 18;
inline bool NEntry::has_sub_visits() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NEntry::set_has_sub_visits() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NEntry::clear_has_sub_visits() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NEntry::clear_sub_visits() {
  sub_visits_ = 0;
  clear_has_sub_visits();
}
inline ::google::protobuf::int32 NEntry::sub_visits() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.sub_visits)
  return sub_visits_;
}
inline void NEntry::set_sub_visits(::google::protobuf::int32 value) {
  set_has_sub_visits();
  sub_visits_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.sub_visits)
}

// required int32 intersection_visits = 19;
inline bool NEntry::has_intersection_visits() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NEntry::set_has_intersection_visits() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NEntry::clear_has_intersection_visits() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NEntry::clear_intersection_visits() {
  intersection_visits_ = 0;
  clear_has_intersection_visits();
}
inline ::google::protobuf::int32 NEntry::intersection_visits() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.intersection_visits)
  return intersection_visits_;
}
inline void NEntry::set_intersection_visits(::google::protobuf::int32 value) {
  set_has_intersection_visits();
  intersection_visits_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.intersection_visits)
}

// required int32 patient_index_first = 21;
inline bool NEntry::has_patient_index_first() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NEntry::set_has_patient_index_first() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NEntry::clear_has_patient_index_first() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NEntry::clear_patient_index_first() {
  patient_index_first_ = 0;
  clear_has_patient_index_first();
}
inline ::google::protobuf::int32 NEntry::patient_index_first() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.patient_index_first)
  return patient_index_first_;
}
inline void NEntry::set_patient_index_first(::google::protobuf::int32 value) {
  set_has_patient_index_first();
  patient_index_first_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.patient_index_first)
}

// required int32 patient_sub_first = 23;
inline bool NEntry::has_patient_sub_first() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NEntry::set_has_patient_sub_first() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NEntry::clear_has_patient_sub_first() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NEntry::clear_patient_sub_first() {
  patient_sub_first_ = 0;
  clear_has_patient_sub_first();
}
inline ::google::protobuf::int32 NEntry::patient_sub_first() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.patient_sub_first)
  return patient_sub_first_;
}
inline void NEntry::set_patient_sub_first(::google::protobuf::int32 value) {
  set_has_patient_sub_first();
  patient_sub_first_ = value;
  // @@protoc_insertion_point(field_set:comphealth.NEntry.patient_sub_first)
}

// repeated .comphealth.DXI dxh = 24;
inline int NEntry::dxh_size() const {
  return dxh_.size();
}
inline void NEntry::clear_dxh() {
  dxh_.Clear();
}
inline const ::comphealth::DXI& NEntry::dxh(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.dxh)
  return dxh_.Get(index);
}
inline ::comphealth::DXI* NEntry::mutable_dxh(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.dxh)
  return dxh_.Mutable(index);
}
inline ::comphealth::DXI* NEntry::add_dxh() {
  // @@protoc_insertion_point(field_add:comphealth.NEntry.dxh)
  return dxh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::DXI >&
NEntry::dxh() const {
  // @@protoc_insertion_point(field_list:comphealth.NEntry.dxh)
  return dxh_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::DXI >*
NEntry::mutable_dxh() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.NEntry.dxh)
  return &dxh_;
}

// repeated .comphealth.KVI primary_prh = 25;
inline int NEntry::primary_prh_size() const {
  return primary_prh_.size();
}
inline void NEntry::clear_primary_prh() {
  primary_prh_.Clear();
}
inline const ::comphealth::KVI& NEntry::primary_prh(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.primary_prh)
  return primary_prh_.Get(index);
}
inline ::comphealth::KVI* NEntry::mutable_primary_prh(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.primary_prh)
  return primary_prh_.Mutable(index);
}
inline ::comphealth::KVI* NEntry::add_primary_prh() {
  // @@protoc_insertion_point(field_add:comphealth.NEntry.primary_prh)
  return primary_prh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
NEntry::primary_prh() const {
  // @@protoc_insertion_point(field_list:comphealth.NEntry.primary_prh)
  return primary_prh_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
NEntry::mutable_primary_prh() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.NEntry.primary_prh)
  return &primary_prh_;
}

// repeated .comphealth.KVI prh = 26;
inline int NEntry::prh_size() const {
  return prh_.size();
}
inline void NEntry::clear_prh() {
  prh_.Clear();
}
inline const ::comphealth::KVI& NEntry::prh(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.prh)
  return prh_.Get(index);
}
inline ::comphealth::KVI* NEntry::mutable_prh(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.prh)
  return prh_.Mutable(index);
}
inline ::comphealth::KVI* NEntry::add_prh() {
  // @@protoc_insertion_point(field_add:comphealth.NEntry.prh)
  return prh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
NEntry::prh() const {
  // @@protoc_insertion_point(field_list:comphealth.NEntry.prh)
  return prh_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
NEntry::mutable_prh() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.NEntry.prh)
  return &prh_;
}

// repeated .comphealth.KVI exh = 27;
inline int NEntry::exh_size() const {
  return exh_.size();
}
inline void NEntry::clear_exh() {
  exh_.Clear();
}
inline const ::comphealth::KVI& NEntry::exh(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.exh)
  return exh_.Get(index);
}
inline ::comphealth::KVI* NEntry::mutable_exh(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.exh)
  return exh_.Mutable(index);
}
inline ::comphealth::KVI* NEntry::add_exh() {
  // @@protoc_insertion_point(field_add:comphealth.NEntry.exh)
  return exh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
NEntry::exh() const {
  // @@protoc_insertion_point(field_list:comphealth.NEntry.exh)
  return exh_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
NEntry::mutable_exh() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.NEntry.exh)
  return &exh_;
}

// repeated .comphealth.KVI drgh = 28;
inline int NEntry::drgh_size() const {
  return drgh_.size();
}
inline void NEntry::clear_drgh() {
  drgh_.Clear();
}
inline const ::comphealth::KVI& NEntry::drgh(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.drgh)
  return drgh_.Get(index);
}
inline ::comphealth::KVI* NEntry::mutable_drgh(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.drgh)
  return drgh_.Mutable(index);
}
inline ::comphealth::KVI* NEntry::add_drgh() {
  // @@protoc_insertion_point(field_add:comphealth.NEntry.drgh)
  return drgh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >&
NEntry::drgh() const {
  // @@protoc_insertion_point(field_list:comphealth.NEntry.drgh)
  return drgh_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::KVI >*
NEntry::mutable_drgh() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.NEntry.drgh)
  return &drgh_;
}

// optional .comphealth.AGG first_inpatient_visit = 29;
inline bool NEntry::has_first_inpatient_visit() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NEntry::set_has_first_inpatient_visit() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NEntry::clear_has_first_inpatient_visit() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NEntry::clear_first_inpatient_visit() {
  if (first_inpatient_visit_ != NULL) first_inpatient_visit_->::comphealth::AGG::Clear();
  clear_has_first_inpatient_visit();
}
inline const ::comphealth::AGG& NEntry::first_inpatient_visit() const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.first_inpatient_visit)
  return first_inpatient_visit_ != NULL ? *first_inpatient_visit_ : *default_instance_->first_inpatient_visit_;
}
inline ::comphealth::AGG* NEntry::mutable_first_inpatient_visit() {
  set_has_first_inpatient_visit();
  if (first_inpatient_visit_ == NULL) first_inpatient_visit_ = new ::comphealth::AGG;
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.first_inpatient_visit)
  return first_inpatient_visit_;
}
inline ::comphealth::AGG* NEntry::release_first_inpatient_visit() {
  clear_has_first_inpatient_visit();
  ::comphealth::AGG* temp = first_inpatient_visit_;
  first_inpatient_visit_ = NULL;
  return temp;
}
inline void NEntry::set_allocated_first_inpatient_visit(::comphealth::AGG* first_inpatient_visit) {
  delete first_inpatient_visit_;
  first_inpatient_visit_ = first_inpatient_visit;
  if (first_inpatient_visit) {
    set_has_first_inpatient_visit();
  } else {
    clear_has_first_inpatient_visit();
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.NEntry.first_inpatient_visit)
}

// repeated .comphealth.N4VCOUNT vtype_count = 30;
inline int NEntry::vtype_count_size() const {
  return vtype_count_.size();
}
inline void NEntry::clear_vtype_count() {
  vtype_count_.Clear();
}
inline const ::comphealth::N4VCOUNT& NEntry::vtype_count(int index) const {
  // @@protoc_insertion_point(field_get:comphealth.NEntry.vtype_count)
  return vtype_count_.Get(index);
}
inline ::comphealth::N4VCOUNT* NEntry::mutable_vtype_count(int index) {
  // @@protoc_insertion_point(field_mutable:comphealth.NEntry.vtype_count)
  return vtype_count_.Mutable(index);
}
inline ::comphealth::N4VCOUNT* NEntry::add_vtype_count() {
  // @@protoc_insertion_point(field_add:comphealth.NEntry.vtype_count)
  return vtype_count_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comphealth::N4VCOUNT >&
NEntry::vtype_count() const {
  // @@protoc_insertion_point(field_list:comphealth.NEntry.vtype_count)
  return vtype_count_;
}
inline ::google::protobuf::RepeatedPtrField< ::comphealth::N4VCOUNT >*
NEntry::mutable_vtype_count() {
  // @@protoc_insertion_point(field_mutable_list:comphealth.NEntry.vtype_count)
  return &vtype_count_;
}

// -------------------------------------------------------------------

// N4VCOUNT

// required string k = 1;
inline bool N4VCOUNT::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void N4VCOUNT::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void N4VCOUNT::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void N4VCOUNT::clear_k() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    k_->clear();
  }
  clear_has_k();
}
inline const ::std::string& N4VCOUNT::k() const {
  // @@protoc_insertion_point(field_get:comphealth.N4VCOUNT.k)
  return *k_;
}
inline void N4VCOUNT::set_k(const ::std::string& value) {
  set_has_k();
  if (k_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    k_ = new ::std::string;
  }
  k_->assign(value);
  // @@protoc_insertion_point(field_set:comphealth.N4VCOUNT.k)
}
inline void N4VCOUNT::set_k(const char* value) {
  set_has_k();
  if (k_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    k_ = new ::std::string;
  }
  k_->assign(value);
  // @@protoc_insertion_point(field_set_char:comphealth.N4VCOUNT.k)
}
inline void N4VCOUNT::set_k(const char* value, size_t size) {
  set_has_k();
  if (k_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    k_ = new ::std::string;
  }
  k_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comphealth.N4VCOUNT.k)
}
inline ::std::string* N4VCOUNT::mutable_k() {
  set_has_k();
  if (k_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    k_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comphealth.N4VCOUNT.k)
  return k_;
}
inline ::std::string* N4VCOUNT::release_k() {
  clear_has_k();
  if (k_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = k_;
    k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void N4VCOUNT::set_allocated_k(::std::string* k) {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (k) {
    set_has_k();
    k_ = k;
  } else {
    clear_has_k();
    k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comphealth.N4VCOUNT.k)
}

// optional int32 IP = 2;
inline bool N4VCOUNT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void N4VCOUNT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void N4VCOUNT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void N4VCOUNT::clear_ip() {
  ip_ = 0;
  clear_has_ip();
}
inline ::google::protobuf::int32 N4VCOUNT::ip() const {
  // @@protoc_insertion_point(field_get:comphealth.N4VCOUNT.IP)
  return ip_;
}
inline void N4VCOUNT::set_ip(::google::protobuf::int32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:comphealth.N4VCOUNT.IP)
}

// optional int32 ED = 3;
inline bool N4VCOUNT::has_ed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void N4VCOUNT::set_has_ed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void N4VCOUNT::clear_has_ed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void N4VCOUNT::clear_ed() {
  ed_ = 0;
  clear_has_ed();
}
inline ::google::protobuf::int32 N4VCOUNT::ed() const {
  // @@protoc_insertion_point(field_get:comphealth.N4VCOUNT.ED)
  return ed_;
}
inline void N4VCOUNT::set_ed(::google::protobuf::int32 value) {
  set_has_ed();
  ed_ = value;
  // @@protoc_insertion_point(field_set:comphealth.N4VCOUNT.ED)
}

// optional int32 AS = 4;
inline bool N4VCOUNT::has_as() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void N4VCOUNT::set_has_as() {
  _has_bits_[0] |= 0x00000008u;
}
inline void N4VCOUNT::clear_has_as() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void N4VCOUNT::clear_as() {
  as_ = 0;
  clear_has_as();
}
inline ::google::protobuf::int32 N4VCOUNT::as() const {
  // @@protoc_insertion_point(field_get:comphealth.N4VCOUNT.AS)
  return as_;
}
inline void N4VCOUNT::set_as(::google::protobuf::int32 value) {
  set_has_as();
  as_ = value;
  // @@protoc_insertion_point(field_set:comphealth.N4VCOUNT.AS)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pn4_2eproto__INCLUDED

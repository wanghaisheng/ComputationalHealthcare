// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pn4.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pn4.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comphealth {

namespace {

const ::google::protobuf::Descriptor* NEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* N4VCOUNT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  N4VCOUNT_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pn4_2eproto() {
  protobuf_AddDesc_pn4_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pn4.proto");
  GOOGLE_CHECK(file != NULL);
  NEntry_descriptor_ = file->message_type(0);
  static const int NEntry_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, linked_visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, unlinked_visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, patients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, index_first_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, sub_first_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, index_visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, sub_visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, intersection_visits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, patient_index_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, patient_sub_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, dxh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, primary_prh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, prh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, exh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, drgh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, first_inpatient_visit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, vtype_count_),
  };
  NEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NEntry_descriptor_,
      NEntry::default_instance_,
      NEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NEntry));
  N4VCOUNT_descriptor_ = file->message_type(1);
  static const int N4VCOUNT_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N4VCOUNT, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N4VCOUNT, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N4VCOUNT, ed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N4VCOUNT, as_),
  };
  N4VCOUNT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      N4VCOUNT_descriptor_,
      N4VCOUNT::default_instance_,
      N4VCOUNT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N4VCOUNT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N4VCOUNT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(N4VCOUNT));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pn4_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NEntry_descriptor_, &NEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    N4VCOUNT_descriptor_, &N4VCOUNT::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pn4_2eproto() {
  delete NEntry::default_instance_;
  delete NEntry_reflection_;
  delete N4VCOUNT::default_instance_;
  delete N4VCOUNT_reflection_;
}

void protobuf_AddDesc_pn4_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comphealth::protobuf_AddDesc_penums_2eproto();
  ::comphealth::protobuf_AddDesc_pvisit_2eproto();
  ::comphealth::protobuf_AddDesc_pstat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpn4.proto\022\ncomphealth\032\014penums.proto\032\014p"
    "visit.proto\032\013pstat.proto\"\327\004\n\006NEntry\022\013\n\003k"
    "ey\030\001 \002(\t\022\r\n\005index\030\002 \002(\t\022\013\n\003sub\030\003 \002(\t\022\r\n\005"
    "count\030\014 \002(\005\022\025\n\rlinked_visits\030\r \002(\005\022\027\n\017un"
    "linked_visits\030\016 \002(\005\022\020\n\010patients\030\017 \002(\005\022-\n"
    "\020index_first_days\030\020 \002(\0132\023.comphealth.Int"
    "Hist\022+\n\016sub_first_days\030\024 \002(\0132\023.comphealt"
    "h.IntHist\022\024\n\014index_visits\030\021 \002(\005\022\022\n\nsub_v"
    "isits\030\022 \002(\005\022\033\n\023intersection_visits\030\023 \002(\005"
    "\022\033\n\023patient_index_first\030\025 \002(\005\022\031\n\021patient"
    "_sub_first\030\027 \002(\005\022\034\n\003dxh\030\030 \003(\0132\017.compheal"
    "th.DXI\022$\n\013primary_prh\030\031 \003(\0132\017.comphealth"
    ".KVI\022\034\n\003prh\030\032 \003(\0132\017.comphealth.KVI\022\034\n\003ex"
    "h\030\033 \003(\0132\017.comphealth.KVI\022\035\n\004drgh\030\034 \003(\0132\017"
    ".comphealth.KVI\022.\n\025first_inpatient_visit"
    "\030\035 \001(\0132\017.comphealth.AGG\022)\n\013vtype_count\030\036"
    " \003(\0132\024.comphealth.N4VCOUNT\"9\n\010N4VCOUNT\022\t"
    "\n\001k\030\001 \002(\t\022\n\n\002IP\030\002 \001(\005\022\n\n\002ED\030\003 \001(\005\022\n\n\002AS\030"
    "\004 \001(\005", 725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pn4.proto", &protobuf_RegisterTypes);
  NEntry::default_instance_ = new NEntry();
  N4VCOUNT::default_instance_ = new N4VCOUNT();
  NEntry::default_instance_->InitAsDefaultInstance();
  N4VCOUNT::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pn4_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pn4_2eproto {
  StaticDescriptorInitializer_pn4_2eproto() {
    protobuf_AddDesc_pn4_2eproto();
  }
} static_descriptor_initializer_pn4_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NEntry::kKeyFieldNumber;
const int NEntry::kIndexFieldNumber;
const int NEntry::kSubFieldNumber;
const int NEntry::kCountFieldNumber;
const int NEntry::kLinkedVisitsFieldNumber;
const int NEntry::kUnlinkedVisitsFieldNumber;
const int NEntry::kPatientsFieldNumber;
const int NEntry::kIndexFirstDaysFieldNumber;
const int NEntry::kSubFirstDaysFieldNumber;
const int NEntry::kIndexVisitsFieldNumber;
const int NEntry::kSubVisitsFieldNumber;
const int NEntry::kIntersectionVisitsFieldNumber;
const int NEntry::kPatientIndexFirstFieldNumber;
const int NEntry::kPatientSubFirstFieldNumber;
const int NEntry::kDxhFieldNumber;
const int NEntry::kPrimaryPrhFieldNumber;
const int NEntry::kPrhFieldNumber;
const int NEntry::kExhFieldNumber;
const int NEntry::kDrghFieldNumber;
const int NEntry::kFirstInpatientVisitFieldNumber;
const int NEntry::kVtypeCountFieldNumber;
#endif  // !_MSC_VER

NEntry::NEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.NEntry)
}

void NEntry::InitAsDefaultInstance() {
  index_first_days_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
  sub_first_days_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
  first_inpatient_visit_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
}

NEntry::NEntry(const NEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.NEntry)
}

void NEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  linked_visits_ = 0;
  unlinked_visits_ = 0;
  patients_ = 0;
  index_first_days_ = NULL;
  sub_first_days_ = NULL;
  index_visits_ = 0;
  sub_visits_ = 0;
  intersection_visits_ = 0;
  patient_index_first_ = 0;
  patient_sub_first_ = 0;
  first_inpatient_visit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NEntry::~NEntry() {
  // @@protoc_insertion_point(destructor:comphealth.NEntry)
  SharedDtor();
}

void NEntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_;
  }
  if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sub_;
  }
  if (this != default_instance_) {
    delete index_first_days_;
    delete sub_first_days_;
    delete first_inpatient_visit_;
  }
}

void NEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NEntry_descriptor_;
}

const NEntry& NEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn4_2eproto();
  return *default_instance_;
}

NEntry* NEntry::default_instance_ = NULL;

NEntry* NEntry::New() const {
  return new NEntry;
}

void NEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(count_, patients_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index_->clear();
      }
    }
    if (has_sub()) {
      if (sub_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sub_->clear();
      }
    }
    if (has_index_first_days()) {
      if (index_first_days_ != NULL) index_first_days_->::comphealth::IntHist::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(index_visits_, patient_index_first_);
    if (has_sub_first_days()) {
      if (sub_first_days_ != NULL) sub_first_days_->::comphealth::IntHist::Clear();
    }
    patient_sub_first_ = 0;
  }
  if (has_first_inpatient_visit()) {
    if (first_inpatient_visit_ != NULL) first_inpatient_visit_->::comphealth::AGG::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dxh_.Clear();
  primary_prh_.Clear();
  prh_.Clear();
  exh_.Clear();
  drgh_.Clear();
  vtype_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.NEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // required string index = 2;
      case 2: {
        if (tag == 18) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index().data(), this->index().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "index");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sub;
        break;
      }

      // required string sub = 3;
      case 3: {
        if (tag == 26) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub().data(), this->sub().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sub");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_count;
        break;
      }

      // required int32 count = 12;
      case 12: {
        if (tag == 96) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_linked_visits;
        break;
      }

      // required int32 linked_visits = 13;
      case 13: {
        if (tag == 104) {
         parse_linked_visits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linked_visits_)));
          set_has_linked_visits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unlinked_visits;
        break;
      }

      // required int32 unlinked_visits = 14;
      case 14: {
        if (tag == 112) {
         parse_unlinked_visits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlinked_visits_)));
          set_has_unlinked_visits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_patients;
        break;
      }

      // required int32 patients = 15;
      case 15: {
        if (tag == 120) {
         parse_patients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patients_)));
          set_has_patients();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_index_first_days;
        break;
      }

      // required .comphealth.IntHist index_first_days = 16;
      case 16: {
        if (tag == 130) {
         parse_index_first_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_first_days()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_index_visits;
        break;
      }

      // required int32 index_visits = 17;
      case 17: {
        if (tag == 136) {
         parse_index_visits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_visits_)));
          set_has_index_visits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_sub_visits;
        break;
      }

      // required int32 sub_visits = 18;
      case 18: {
        if (tag == 144) {
         parse_sub_visits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_visits_)));
          set_has_sub_visits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_intersection_visits;
        break;
      }

      // required int32 intersection_visits = 19;
      case 19: {
        if (tag == 152) {
         parse_intersection_visits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intersection_visits_)));
          set_has_intersection_visits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_sub_first_days;
        break;
      }

      // required .comphealth.IntHist sub_first_days = 20;
      case 20: {
        if (tag == 162) {
         parse_sub_first_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_first_days()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_patient_index_first;
        break;
      }

      // required int32 patient_index_first = 21;
      case 21: {
        if (tag == 168) {
         parse_patient_index_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patient_index_first_)));
          set_has_patient_index_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_patient_sub_first;
        break;
      }

      // required int32 patient_sub_first = 23;
      case 23: {
        if (tag == 184) {
         parse_patient_sub_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patient_sub_first_)));
          set_has_patient_sub_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_dxh;
        break;
      }

      // repeated .comphealth.DXI dxh = 24;
      case 24: {
        if (tag == 194) {
         parse_dxh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dxh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_dxh;
        if (input->ExpectTag(202)) goto parse_primary_prh;
        break;
      }

      // repeated .comphealth.KVI primary_prh = 25;
      case 25: {
        if (tag == 202) {
         parse_primary_prh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primary_prh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_primary_prh;
        if (input->ExpectTag(210)) goto parse_prh;
        break;
      }

      // repeated .comphealth.KVI prh = 26;
      case 26: {
        if (tag == 210) {
         parse_prh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_prh;
        if (input->ExpectTag(218)) goto parse_exh;
        break;
      }

      // repeated .comphealth.KVI exh = 27;
      case 27: {
        if (tag == 218) {
         parse_exh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_exh;
        if (input->ExpectTag(226)) goto parse_drgh;
        break;
      }

      // repeated .comphealth.KVI drgh = 28;
      case 28: {
        if (tag == 226) {
         parse_drgh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drgh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_drgh;
        if (input->ExpectTag(234)) goto parse_first_inpatient_visit;
        break;
      }

      // optional .comphealth.AGG first_inpatient_visit = 29;
      case 29: {
        if (tag == 234) {
         parse_first_inpatient_visit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_inpatient_visit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_vtype_count;
        break;
      }

      // repeated .comphealth.N4VCOUNT vtype_count = 30;
      case 30: {
        if (tag == 242) {
         parse_vtype_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vtype_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_vtype_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.NEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.NEntry)
  return false;
#undef DO_
}

void NEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.NEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "index");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->index(), output);
  }

  // required string sub = 3;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub().data(), this->sub().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sub(), output);
  }

  // required int32 count = 12;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->count(), output);
  }

  // required int32 linked_visits = 13;
  if (has_linked_visits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->linked_visits(), output);
  }

  // required int32 unlinked_visits = 14;
  if (has_unlinked_visits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->unlinked_visits(), output);
  }

  // required int32 patients = 15;
  if (has_patients()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->patients(), output);
  }

  // required .comphealth.IntHist index_first_days = 16;
  if (has_index_first_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->index_first_days(), output);
  }

  // required int32 index_visits = 17;
  if (has_index_visits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->index_visits(), output);
  }

  // required int32 sub_visits = 18;
  if (has_sub_visits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sub_visits(), output);
  }

  // required int32 intersection_visits = 19;
  if (has_intersection_visits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->intersection_visits(), output);
  }

  // required .comphealth.IntHist sub_first_days = 20;
  if (has_sub_first_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->sub_first_days(), output);
  }

  // required int32 patient_index_first = 21;
  if (has_patient_index_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->patient_index_first(), output);
  }

  // required int32 patient_sub_first = 23;
  if (has_patient_sub_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->patient_sub_first(), output);
  }

  // repeated .comphealth.DXI dxh = 24;
  for (int i = 0; i < this->dxh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->dxh(i), output);
  }

  // repeated .comphealth.KVI primary_prh = 25;
  for (int i = 0; i < this->primary_prh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->primary_prh(i), output);
  }

  // repeated .comphealth.KVI prh = 26;
  for (int i = 0; i < this->prh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->prh(i), output);
  }

  // repeated .comphealth.KVI exh = 27;
  for (int i = 0; i < this->exh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->exh(i), output);
  }

  // repeated .comphealth.KVI drgh = 28;
  for (int i = 0; i < this->drgh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->drgh(i), output);
  }

  // optional .comphealth.AGG first_inpatient_visit = 29;
  if (has_first_inpatient_visit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->first_inpatient_visit(), output);
  }

  // repeated .comphealth.N4VCOUNT vtype_count = 30;
  for (int i = 0; i < this->vtype_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->vtype_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.NEntry)
}

::google::protobuf::uint8* NEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.NEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "index");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->index(), target);
  }

  // required string sub = 3;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub().data(), this->sub().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sub(), target);
  }

  // required int32 count = 12;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->count(), target);
  }

  // required int32 linked_visits = 13;
  if (has_linked_visits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->linked_visits(), target);
  }

  // required int32 unlinked_visits = 14;
  if (has_unlinked_visits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->unlinked_visits(), target);
  }

  // required int32 patients = 15;
  if (has_patients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->patients(), target);
  }

  // required .comphealth.IntHist index_first_days = 16;
  if (has_index_first_days()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->index_first_days(), target);
  }

  // required int32 index_visits = 17;
  if (has_index_visits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->index_visits(), target);
  }

  // required int32 sub_visits = 18;
  if (has_sub_visits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sub_visits(), target);
  }

  // required int32 intersection_visits = 19;
  if (has_intersection_visits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->intersection_visits(), target);
  }

  // required .comphealth.IntHist sub_first_days = 20;
  if (has_sub_first_days()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->sub_first_days(), target);
  }

  // required int32 patient_index_first = 21;
  if (has_patient_index_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->patient_index_first(), target);
  }

  // required int32 patient_sub_first = 23;
  if (has_patient_sub_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->patient_sub_first(), target);
  }

  // repeated .comphealth.DXI dxh = 24;
  for (int i = 0; i < this->dxh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->dxh(i), target);
  }

  // repeated .comphealth.KVI primary_prh = 25;
  for (int i = 0; i < this->primary_prh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->primary_prh(i), target);
  }

  // repeated .comphealth.KVI prh = 26;
  for (int i = 0; i < this->prh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->prh(i), target);
  }

  // repeated .comphealth.KVI exh = 27;
  for (int i = 0; i < this->exh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->exh(i), target);
  }

  // repeated .comphealth.KVI drgh = 28;
  for (int i = 0; i < this->drgh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->drgh(i), target);
  }

  // optional .comphealth.AGG first_inpatient_visit = 29;
  if (has_first_inpatient_visit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->first_inpatient_visit(), target);
  }

  // repeated .comphealth.N4VCOUNT vtype_count = 30;
  for (int i = 0; i < this->vtype_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->vtype_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.NEntry)
  return target;
}

int NEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index());
    }

    // required string sub = 3;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub());
    }

    // required int32 count = 12;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 linked_visits = 13;
    if (has_linked_visits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linked_visits());
    }

    // required int32 unlinked_visits = 14;
    if (has_unlinked_visits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlinked_visits());
    }

    // required int32 patients = 15;
    if (has_patients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patients());
    }

    // required .comphealth.IntHist index_first_days = 16;
    if (has_index_first_days()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index_first_days());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .comphealth.IntHist sub_first_days = 20;
    if (has_sub_first_days()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_first_days());
    }

    // required int32 index_visits = 17;
    if (has_index_visits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_visits());
    }

    // required int32 sub_visits = 18;
    if (has_sub_visits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_visits());
    }

    // required int32 intersection_visits = 19;
    if (has_intersection_visits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intersection_visits());
    }

    // required int32 patient_index_first = 21;
    if (has_patient_index_first()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patient_index_first());
    }

    // required int32 patient_sub_first = 23;
    if (has_patient_sub_first()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patient_sub_first());
    }

  }
  if (_has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    // optional .comphealth.AGG first_inpatient_visit = 29;
    if (has_first_inpatient_visit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_inpatient_visit());
    }

  }
  // repeated .comphealth.DXI dxh = 24;
  total_size += 2 * this->dxh_size();
  for (int i = 0; i < this->dxh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dxh(i));
  }

  // repeated .comphealth.KVI primary_prh = 25;
  total_size += 2 * this->primary_prh_size();
  for (int i = 0; i < this->primary_prh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primary_prh(i));
  }

  // repeated .comphealth.KVI prh = 26;
  total_size += 2 * this->prh_size();
  for (int i = 0; i < this->prh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prh(i));
  }

  // repeated .comphealth.KVI exh = 27;
  total_size += 2 * this->exh_size();
  for (int i = 0; i < this->exh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exh(i));
  }

  // repeated .comphealth.KVI drgh = 28;
  total_size += 2 * this->drgh_size();
  for (int i = 0; i < this->drgh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drgh(i));
  }

  // repeated .comphealth.N4VCOUNT vtype_count = 30;
  total_size += 2 * this->vtype_count_size();
  for (int i = 0; i < this->vtype_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vtype_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NEntry::MergeFrom(const NEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  dxh_.MergeFrom(from.dxh_);
  primary_prh_.MergeFrom(from.primary_prh_);
  prh_.MergeFrom(from.prh_);
  exh_.MergeFrom(from.exh_);
  drgh_.MergeFrom(from.drgh_);
  vtype_count_.MergeFrom(from.vtype_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_linked_visits()) {
      set_linked_visits(from.linked_visits());
    }
    if (from.has_unlinked_visits()) {
      set_unlinked_visits(from.unlinked_visits());
    }
    if (from.has_patients()) {
      set_patients(from.patients());
    }
    if (from.has_index_first_days()) {
      mutable_index_first_days()->::comphealth::IntHist::MergeFrom(from.index_first_days());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_first_days()) {
      mutable_sub_first_days()->::comphealth::IntHist::MergeFrom(from.sub_first_days());
    }
    if (from.has_index_visits()) {
      set_index_visits(from.index_visits());
    }
    if (from.has_sub_visits()) {
      set_sub_visits(from.sub_visits());
    }
    if (from.has_intersection_visits()) {
      set_intersection_visits(from.intersection_visits());
    }
    if (from.has_patient_index_first()) {
      set_patient_index_first(from.patient_index_first());
    }
    if (from.has_patient_sub_first()) {
      set_patient_sub_first(from.patient_sub_first());
    }
  }
  if (from._has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    if (from.has_first_inpatient_visit()) {
      mutable_first_inpatient_visit()->::comphealth::AGG::MergeFrom(from.first_inpatient_visit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NEntry::CopyFrom(const NEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  if (has_index_first_days()) {
    if (!this->index_first_days().IsInitialized()) return false;
  }
  if (has_sub_first_days()) {
    if (!this->sub_first_days().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dxh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->primary_prh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->prh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->exh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->drgh())) return false;
  if (has_first_inpatient_visit()) {
    if (!this->first_inpatient_visit().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->vtype_count())) return false;
  return true;
}

void NEntry::Swap(NEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(index_, other->index_);
    std::swap(sub_, other->sub_);
    std::swap(count_, other->count_);
    std::swap(linked_visits_, other->linked_visits_);
    std::swap(unlinked_visits_, other->unlinked_visits_);
    std::swap(patients_, other->patients_);
    std::swap(index_first_days_, other->index_first_days_);
    std::swap(sub_first_days_, other->sub_first_days_);
    std::swap(index_visits_, other->index_visits_);
    std::swap(sub_visits_, other->sub_visits_);
    std::swap(intersection_visits_, other->intersection_visits_);
    std::swap(patient_index_first_, other->patient_index_first_);
    std::swap(patient_sub_first_, other->patient_sub_first_);
    dxh_.Swap(&other->dxh_);
    primary_prh_.Swap(&other->primary_prh_);
    prh_.Swap(&other->prh_);
    exh_.Swap(&other->exh_);
    drgh_.Swap(&other->drgh_);
    std::swap(first_inpatient_visit_, other->first_inpatient_visit_);
    vtype_count_.Swap(&other->vtype_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NEntry_descriptor_;
  metadata.reflection = NEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int N4VCOUNT::kKFieldNumber;
const int N4VCOUNT::kIPFieldNumber;
const int N4VCOUNT::kEDFieldNumber;
const int N4VCOUNT::kASFieldNumber;
#endif  // !_MSC_VER

N4VCOUNT::N4VCOUNT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.N4VCOUNT)
}

void N4VCOUNT::InitAsDefaultInstance() {
}

N4VCOUNT::N4VCOUNT(const N4VCOUNT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.N4VCOUNT)
}

void N4VCOUNT::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0;
  ed_ = 0;
  as_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

N4VCOUNT::~N4VCOUNT() {
  // @@protoc_insertion_point(destructor:comphealth.N4VCOUNT)
  SharedDtor();
}

void N4VCOUNT::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (this != default_instance_) {
  }
}

void N4VCOUNT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* N4VCOUNT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return N4VCOUNT_descriptor_;
}

const N4VCOUNT& N4VCOUNT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn4_2eproto();
  return *default_instance_;
}

N4VCOUNT* N4VCOUNT::default_instance_ = NULL;

N4VCOUNT* N4VCOUNT::New() const {
  return new N4VCOUNT;
}

void N4VCOUNT::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<N4VCOUNT*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ip_, as_);
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool N4VCOUNT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.N4VCOUNT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IP;
        break;
      }

      // optional int32 IP = 2;
      case 2: {
        if (tag == 16) {
         parse_IP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ED;
        break;
      }

      // optional int32 ED = 3;
      case 3: {
        if (tag == 24) {
         parse_ED:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ed_)));
          set_has_ed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AS;
        break;
      }

      // optional int32 AS = 4;
      case 4: {
        if (tag == 32) {
         parse_AS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &as_)));
          set_has_as();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.N4VCOUNT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.N4VCOUNT)
  return false;
#undef DO_
}

void N4VCOUNT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.N4VCOUNT)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // optional int32 IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ip(), output);
  }

  // optional int32 ED = 3;
  if (has_ed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ed(), output);
  }

  // optional int32 AS = 4;
  if (has_as()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->as(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.N4VCOUNT)
}

::google::protobuf::uint8* N4VCOUNT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.N4VCOUNT)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // optional int32 IP = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ip(), target);
  }

  // optional int32 ED = 3;
  if (has_ed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ed(), target);
  }

  // optional int32 AS = 4;
  if (has_as()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->as(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.N4VCOUNT)
  return target;
}

int N4VCOUNT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // optional int32 IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // optional int32 ED = 3;
    if (has_ed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ed());
    }

    // optional int32 AS = 4;
    if (has_as()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->as());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void N4VCOUNT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const N4VCOUNT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const N4VCOUNT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void N4VCOUNT::MergeFrom(const N4VCOUNT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ed()) {
      set_ed(from.ed());
    }
    if (from.has_as()) {
      set_as(from.as());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void N4VCOUNT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void N4VCOUNT::CopyFrom(const N4VCOUNT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool N4VCOUNT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void N4VCOUNT::Swap(N4VCOUNT* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(ip_, other->ip_);
    std::swap(ed_, other->ed_);
    std::swap(as_, other->as_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata N4VCOUNT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = N4VCOUNT_descriptor_;
  metadata.reflection = N4VCOUNT_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

// @@protoc_insertion_point(global_scope)

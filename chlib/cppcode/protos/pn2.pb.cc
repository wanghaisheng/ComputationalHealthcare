// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pn2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pn2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comphealth {

namespace {

const ::google::protobuf::Descriptor* REntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KEYTYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pn2_2eproto() {
  protobuf_AddDesc_pn2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pn2.proto");
  GOOGLE_CHECK(file != NULL);
  REntry_descriptor_ = file->message_type(0);
  static const int REntry_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, initial_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, sub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, deltah_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, deltaweekh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, provenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, initial_ktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, sub_ktype_),
  };
  REntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REntry_descriptor_,
      REntry::default_instance_,
      REntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REntry));
  RNode_descriptor_ = file->message_type(1);
  static const int RNode_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, ktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, discharged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, transferred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, died_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, provenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, linked_),
  };
  RNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RNode_descriptor_,
      RNode::default_instance_,
      RNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RNode));
  KEYTYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pn2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REntry_descriptor_, &REntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RNode_descriptor_, &RNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pn2_2eproto() {
  delete REntry::default_instance_;
  delete REntry_reflection_;
  delete RNode::default_instance_;
  delete RNode_reflection_;
}

void protobuf_AddDesc_pn2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comphealth::protobuf_AddDesc_penums_2eproto();
  ::comphealth::protobuf_AddDesc_pvisit_2eproto();
  ::comphealth::protobuf_AddDesc_pstat_2eproto();
  ::comphealth::protobuf_AddDesc_pn1_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpn2.proto\022\ncomphealth\032\014penums.proto\032\014p"
    "visit.proto\032\013pstat.proto\032\tpn1.proto\"\350\002\n\006"
    "REntry\022\013\n\003key\030\013 \002(\t\022\023\n\013initial_key\030\001 \002(\t"
    "\022\017\n\007sub_key\030\002 \002(\t\022\017\n\007dataset\030\003 \001(\t\022\r\n\005de"
    "lta\030\010 \001(\005\022 \n\007initial\030\004 \002(\0132\017.comphealth."
    "AGG\022\034\n\003sub\030\005 \002(\0132\017.comphealth.AGG\022#\n\006del"
    "tah\030\006 \002(\0132\023.comphealth.IntHist\022\'\n\ndeltaw"
    "eekh\030\014 \002(\0132\023.comphealth.IntHist\022)\n\nprove"
    "nance\030\007 \003(\0132\025.comphealth.Exclusion\022*\n\rin"
    "itial_ktype\030\t \002(\0162\023.comphealth.KEYTYPE\022&"
    "\n\tsub_ktype\030\n \002(\0162\023.comphealth.KEYTYPE\"\214"
    "\002\n\005RNode\022\013\n\003key\030\001 \002(\t\022\"\n\005ktype\030\002 \002(\0162\023.c"
    "omphealth.KEYTYPE\022\017\n\007dataset\030\003 \001(\t\022\034\n\003al"
    "l\030\004 \002(\0132\017.comphealth.AGG\022#\n\ndischarged\030\005"
    " \001(\0132\017.comphealth.AGG\022$\n\013transferred\030\006 \001"
    "(\0132\017.comphealth.AGG\022\035\n\004died\030\007 \001(\0132\017.comp"
    "health.AGG\022)\n\nprovenance\030\010 \003(\0132\025.comphea"
    "lth.Exclusion\022\016\n\006linked\030\t \002(\010*:\n\007KEYTYPE"
    "\022\014\n\010N2_ICDPR\020x\022\t\n\005N2_DX\020z\022\n\n\006N2_DRG\020{\022\n\n"
    "\006N2_ALL\020|", 769);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pn2.proto", &protobuf_RegisterTypes);
  REntry::default_instance_ = new REntry();
  RNode::default_instance_ = new RNode();
  REntry::default_instance_->InitAsDefaultInstance();
  RNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pn2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pn2_2eproto {
  StaticDescriptorInitializer_pn2_2eproto() {
    protobuf_AddDesc_pn2_2eproto();
  }
} static_descriptor_initializer_pn2_2eproto_;
const ::google::protobuf::EnumDescriptor* KEYTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KEYTYPE_descriptor_;
}
bool KEYTYPE_IsValid(int value) {
  switch(value) {
    case 120:
    case 122:
    case 123:
    case 124:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int REntry::kKeyFieldNumber;
const int REntry::kInitialKeyFieldNumber;
const int REntry::kSubKeyFieldNumber;
const int REntry::kDatasetFieldNumber;
const int REntry::kDeltaFieldNumber;
const int REntry::kInitialFieldNumber;
const int REntry::kSubFieldNumber;
const int REntry::kDeltahFieldNumber;
const int REntry::kDeltaweekhFieldNumber;
const int REntry::kProvenanceFieldNumber;
const int REntry::kInitialKtypeFieldNumber;
const int REntry::kSubKtypeFieldNumber;
#endif  // !_MSC_VER

REntry::REntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.REntry)
}

void REntry::InitAsDefaultInstance() {
  initial_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  sub_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  deltah_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
  deltaweekh_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
}

REntry::REntry(const REntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.REntry)
}

void REntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delta_ = 0;
  initial_ = NULL;
  sub_ = NULL;
  deltah_ = NULL;
  deltaweekh_ = NULL;
  initial_ktype_ = 120;
  sub_ktype_ = 120;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REntry::~REntry() {
  // @@protoc_insertion_point(destructor:comphealth.REntry)
  SharedDtor();
}

void REntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (initial_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initial_key_;
  }
  if (sub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sub_key_;
  }
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (this != default_instance_) {
    delete initial_;
    delete sub_;
    delete deltah_;
    delete deltaweekh_;
  }
}

void REntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REntry_descriptor_;
}

const REntry& REntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn2_2eproto();
  return *default_instance_;
}

REntry* REntry::default_instance_ = NULL;

REntry* REntry::New() const {
  return new REntry;
}

void REntry::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_initial_key()) {
      if (initial_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initial_key_->clear();
      }
    }
    if (has_sub_key()) {
      if (sub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sub_key_->clear();
      }
    }
    if (has_dataset()) {
      if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataset_->clear();
      }
    }
    delta_ = 0;
    if (has_initial()) {
      if (initial_ != NULL) initial_->::comphealth::AGG::Clear();
    }
    if (has_sub()) {
      if (sub_ != NULL) sub_->::comphealth::AGG::Clear();
    }
    if (has_deltah()) {
      if (deltah_ != NULL) deltah_->::comphealth::IntHist::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3328) {
    if (has_deltaweekh()) {
      if (deltaweekh_ != NULL) deltaweekh_->::comphealth::IntHist::Clear();
    }
    initial_ktype_ = 120;
    sub_ktype_ = 120;
  }
  provenance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.REntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string initial_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initial_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initial_key().data(), this->initial_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initial_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_key;
        break;
      }

      // required string sub_key = 2;
      case 2: {
        if (tag == 18) {
         parse_sub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub_key().data(), this->sub_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sub_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dataset;
        break;
      }

      // optional string dataset = 3;
      case 3: {
        if (tag == 26) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_initial;
        break;
      }

      // required .comphealth.AGG initial = 4;
      case 4: {
        if (tag == 34) {
         parse_initial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sub;
        break;
      }

      // required .comphealth.AGG sub = 5;
      case 5: {
        if (tag == 42) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deltah;
        break;
      }

      // required .comphealth.IntHist deltah = 6;
      case 6: {
        if (tag == 50) {
         parse_deltah:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deltah()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_provenance;
        break;
      }

      // repeated .comphealth.Exclusion provenance = 7;
      case 7: {
        if (tag == 58) {
         parse_provenance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_provenance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_provenance;
        if (input->ExpectTag(64)) goto parse_delta;
        break;
      }

      // optional int32 delta = 8;
      case 8: {
        if (tag == 64) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_initial_ktype;
        break;
      }

      // required .comphealth.KEYTYPE initial_ktype = 9;
      case 9: {
        if (tag == 72) {
         parse_initial_ktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::KEYTYPE_IsValid(value)) {
            set_initial_ktype(static_cast< ::comphealth::KEYTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sub_ktype;
        break;
      }

      // required .comphealth.KEYTYPE sub_ktype = 10;
      case 10: {
        if (tag == 80) {
         parse_sub_ktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::KEYTYPE_IsValid(value)) {
            set_sub_ktype(static_cast< ::comphealth::KEYTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_key;
        break;
      }

      // required string key = 11;
      case 11: {
        if (tag == 90) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_deltaweekh;
        break;
      }

      // required .comphealth.IntHist deltaweekh = 12;
      case 12: {
        if (tag == 98) {
         parse_deltaweekh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deltaweekh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.REntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.REntry)
  return false;
#undef DO_
}

void REntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.REntry)
  // required string initial_key = 1;
  if (has_initial_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial_key().data(), this->initial_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initial_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initial_key(), output);
  }

  // required string sub_key = 2;
  if (has_sub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_key().data(), this->sub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sub_key(), output);
  }

  // optional string dataset = 3;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dataset(), output);
  }

  // required .comphealth.AGG initial = 4;
  if (has_initial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initial(), output);
  }

  // required .comphealth.AGG sub = 5;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sub(), output);
  }

  // required .comphealth.IntHist deltah = 6;
  if (has_deltah()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deltah(), output);
  }

  // repeated .comphealth.Exclusion provenance = 7;
  for (int i = 0; i < this->provenance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->provenance(i), output);
  }

  // optional int32 delta = 8;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->delta(), output);
  }

  // required .comphealth.KEYTYPE initial_ktype = 9;
  if (has_initial_ktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->initial_ktype(), output);
  }

  // required .comphealth.KEYTYPE sub_ktype = 10;
  if (has_sub_ktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->sub_ktype(), output);
  }

  // required string key = 11;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->key(), output);
  }

  // required .comphealth.IntHist deltaweekh = 12;
  if (has_deltaweekh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->deltaweekh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.REntry)
}

::google::protobuf::uint8* REntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.REntry)
  // required string initial_key = 1;
  if (has_initial_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial_key().data(), this->initial_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initial_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initial_key(), target);
  }

  // required string sub_key = 2;
  if (has_sub_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_key().data(), this->sub_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sub_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sub_key(), target);
  }

  // optional string dataset = 3;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataset(), target);
  }

  // required .comphealth.AGG initial = 4;
  if (has_initial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initial(), target);
  }

  // required .comphealth.AGG sub = 5;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sub(), target);
  }

  // required .comphealth.IntHist deltah = 6;
  if (has_deltah()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deltah(), target);
  }

  // repeated .comphealth.Exclusion provenance = 7;
  for (int i = 0; i < this->provenance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->provenance(i), target);
  }

  // optional int32 delta = 8;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->delta(), target);
  }

  // required .comphealth.KEYTYPE initial_ktype = 9;
  if (has_initial_ktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->initial_ktype(), target);
  }

  // required .comphealth.KEYTYPE sub_ktype = 10;
  if (has_sub_ktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->sub_ktype(), target);
  }

  // required string key = 11;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->key(), target);
  }

  // required .comphealth.IntHist deltaweekh = 12;
  if (has_deltaweekh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->deltaweekh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.REntry)
  return target;
}

int REntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 11;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string initial_key = 1;
    if (has_initial_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initial_key());
    }

    // required string sub_key = 2;
    if (has_sub_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_key());
    }

    // optional string dataset = 3;
    if (has_dataset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

    // optional int32 delta = 8;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }

    // required .comphealth.AGG initial = 4;
    if (has_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initial());
    }

    // required .comphealth.AGG sub = 5;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub());
    }

    // required .comphealth.IntHist deltah = 6;
    if (has_deltah()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deltah());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .comphealth.IntHist deltaweekh = 12;
    if (has_deltaweekh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deltaweekh());
    }

    // required .comphealth.KEYTYPE initial_ktype = 9;
    if (has_initial_ktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initial_ktype());
    }

    // required .comphealth.KEYTYPE sub_ktype = 10;
    if (has_sub_ktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_ktype());
    }

  }
  // repeated .comphealth.Exclusion provenance = 7;
  total_size += 1 * this->provenance_size();
  for (int i = 0; i < this->provenance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->provenance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REntry::MergeFrom(const REntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  provenance_.MergeFrom(from.provenance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_initial_key()) {
      set_initial_key(from.initial_key());
    }
    if (from.has_sub_key()) {
      set_sub_key(from.sub_key());
    }
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_initial()) {
      mutable_initial()->::comphealth::AGG::MergeFrom(from.initial());
    }
    if (from.has_sub()) {
      mutable_sub()->::comphealth::AGG::MergeFrom(from.sub());
    }
    if (from.has_deltah()) {
      mutable_deltah()->::comphealth::IntHist::MergeFrom(from.deltah());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deltaweekh()) {
      mutable_deltaweekh()->::comphealth::IntHist::MergeFrom(from.deltaweekh());
    }
    if (from.has_initial_ktype()) {
      set_initial_ktype(from.initial_ktype());
    }
    if (from.has_sub_ktype()) {
      set_sub_ktype(from.sub_ktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REntry::CopyFrom(const REntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000de7) != 0x00000de7) return false;

  if (has_initial()) {
    if (!this->initial().IsInitialized()) return false;
  }
  if (has_sub()) {
    if (!this->sub().IsInitialized()) return false;
  }
  if (has_deltah()) {
    if (!this->deltah().IsInitialized()) return false;
  }
  if (has_deltaweekh()) {
    if (!this->deltaweekh().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->provenance())) return false;
  return true;
}

void REntry::Swap(REntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(initial_key_, other->initial_key_);
    std::swap(sub_key_, other->sub_key_);
    std::swap(dataset_, other->dataset_);
    std::swap(delta_, other->delta_);
    std::swap(initial_, other->initial_);
    std::swap(sub_, other->sub_);
    std::swap(deltah_, other->deltah_);
    std::swap(deltaweekh_, other->deltaweekh_);
    provenance_.Swap(&other->provenance_);
    std::swap(initial_ktype_, other->initial_ktype_);
    std::swap(sub_ktype_, other->sub_ktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REntry_descriptor_;
  metadata.reflection = REntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RNode::kKeyFieldNumber;
const int RNode::kKtypeFieldNumber;
const int RNode::kDatasetFieldNumber;
const int RNode::kAllFieldNumber;
const int RNode::kDischargedFieldNumber;
const int RNode::kTransferredFieldNumber;
const int RNode::kDiedFieldNumber;
const int RNode::kProvenanceFieldNumber;
const int RNode::kLinkedFieldNumber;
#endif  // !_MSC_VER

RNode::RNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.RNode)
}

void RNode::InitAsDefaultInstance() {
  all_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  discharged_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  transferred_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  died_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
}

RNode::RNode(const RNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.RNode)
}

void RNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ktype_ = 120;
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  all_ = NULL;
  discharged_ = NULL;
  transferred_ = NULL;
  died_ = NULL;
  linked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RNode::~RNode() {
  // @@protoc_insertion_point(destructor:comphealth.RNode)
  SharedDtor();
}

void RNode::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataset_;
  }
  if (this != default_instance_) {
    delete all_;
    delete discharged_;
    delete transferred_;
    delete died_;
  }
}

void RNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RNode_descriptor_;
}

const RNode& RNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn2_2eproto();
  return *default_instance_;
}

RNode* RNode::default_instance_ = NULL;

RNode* RNode::New() const {
  return new RNode;
}

void RNode::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    ktype_ = 120;
    if (has_dataset()) {
      if (dataset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataset_->clear();
      }
    }
    if (has_all()) {
      if (all_ != NULL) all_->::comphealth::AGG::Clear();
    }
    if (has_discharged()) {
      if (discharged_ != NULL) discharged_->::comphealth::AGG::Clear();
    }
    if (has_transferred()) {
      if (transferred_ != NULL) transferred_->::comphealth::AGG::Clear();
    }
    if (has_died()) {
      if (died_ != NULL) died_->::comphealth::AGG::Clear();
    }
  }
  linked_ = false;
  provenance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.RNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ktype;
        break;
      }

      // required .comphealth.KEYTYPE ktype = 2;
      case 2: {
        if (tag == 16) {
         parse_ktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::comphealth::KEYTYPE_IsValid(value)) {
            set_ktype(static_cast< ::comphealth::KEYTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dataset;
        break;
      }

      // optional string dataset = 3;
      case 3: {
        if (tag == 26) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_all;
        break;
      }

      // required .comphealth.AGG all = 4;
      case 4: {
        if (tag == 34) {
         parse_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_discharged;
        break;
      }

      // optional .comphealth.AGG discharged = 5;
      case 5: {
        if (tag == 42) {
         parse_discharged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discharged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transferred;
        break;
      }

      // optional .comphealth.AGG transferred = 6;
      case 6: {
        if (tag == 50) {
         parse_transferred:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transferred()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_died;
        break;
      }

      // optional .comphealth.AGG died = 7;
      case 7: {
        if (tag == 58) {
         parse_died:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_died()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_provenance;
        break;
      }

      // repeated .comphealth.Exclusion provenance = 8;
      case 8: {
        if (tag == 66) {
         parse_provenance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_provenance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_provenance;
        if (input->ExpectTag(72)) goto parse_linked;
        break;
      }

      // required bool linked = 9;
      case 9: {
        if (tag == 72) {
         parse_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.RNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.RNode)
  return false;
#undef DO_
}

void RNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.RNode)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .comphealth.KEYTYPE ktype = 2;
  if (has_ktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ktype(), output);
  }

  // optional string dataset = 3;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dataset(), output);
  }

  // required .comphealth.AGG all = 4;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->all(), output);
  }

  // optional .comphealth.AGG discharged = 5;
  if (has_discharged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->discharged(), output);
  }

  // optional .comphealth.AGG transferred = 6;
  if (has_transferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transferred(), output);
  }

  // optional .comphealth.AGG died = 7;
  if (has_died()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->died(), output);
  }

  // repeated .comphealth.Exclusion provenance = 8;
  for (int i = 0; i < this->provenance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->provenance(i), output);
  }

  // required bool linked = 9;
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->linked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.RNode)
}

::google::protobuf::uint8* RNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.RNode)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .comphealth.KEYTYPE ktype = 2;
  if (has_ktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ktype(), target);
  }

  // optional string dataset = 3;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataset(), target);
  }

  // required .comphealth.AGG all = 4;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->all(), target);
  }

  // optional .comphealth.AGG discharged = 5;
  if (has_discharged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->discharged(), target);
  }

  // optional .comphealth.AGG transferred = 6;
  if (has_transferred()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transferred(), target);
  }

  // optional .comphealth.AGG died = 7;
  if (has_died()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->died(), target);
  }

  // repeated .comphealth.Exclusion provenance = 8;
  for (int i = 0; i < this->provenance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->provenance(i), target);
  }

  // required bool linked = 9;
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->linked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.RNode)
  return target;
}

int RNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .comphealth.KEYTYPE ktype = 2;
    if (has_ktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ktype());
    }

    // optional string dataset = 3;
    if (has_dataset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

    // required .comphealth.AGG all = 4;
    if (has_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all());
    }

    // optional .comphealth.AGG discharged = 5;
    if (has_discharged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discharged());
    }

    // optional .comphealth.AGG transferred = 6;
    if (has_transferred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transferred());
    }

    // optional .comphealth.AGG died = 7;
    if (has_died()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->died());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool linked = 9;
    if (has_linked()) {
      total_size += 1 + 1;
    }

  }
  // repeated .comphealth.Exclusion provenance = 8;
  total_size += 1 * this->provenance_size();
  for (int i = 0; i < this->provenance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->provenance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RNode::MergeFrom(const RNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  provenance_.MergeFrom(from.provenance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_ktype()) {
      set_ktype(from.ktype());
    }
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
    if (from.has_all()) {
      mutable_all()->::comphealth::AGG::MergeFrom(from.all());
    }
    if (from.has_discharged()) {
      mutable_discharged()->::comphealth::AGG::MergeFrom(from.discharged());
    }
    if (from.has_transferred()) {
      mutable_transferred()->::comphealth::AGG::MergeFrom(from.transferred());
    }
    if (from.has_died()) {
      mutable_died()->::comphealth::AGG::MergeFrom(from.died());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linked()) {
      set_linked(from.linked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RNode::CopyFrom(const RNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000010b) != 0x0000010b) return false;

  if (has_all()) {
    if (!this->all().IsInitialized()) return false;
  }
  if (has_discharged()) {
    if (!this->discharged().IsInitialized()) return false;
  }
  if (has_transferred()) {
    if (!this->transferred().IsInitialized()) return false;
  }
  if (has_died()) {
    if (!this->died().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->provenance())) return false;
  return true;
}

void RNode::Swap(RNode* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(ktype_, other->ktype_);
    std::swap(dataset_, other->dataset_);
    std::swap(all_, other->all_);
    std::swap(discharged_, other->discharged_);
    std::swap(transferred_, other->transferred_);
    std::swap(died_, other->died_);
    provenance_.Swap(&other->provenance_);
    std::swap(linked_, other->linked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RNode_descriptor_;
  metadata.reflection = RNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

// @@protoc_insertion_point(global_scope)
